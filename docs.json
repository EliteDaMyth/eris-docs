{
  "docs": [
    {
      "comment": "/**\n    * Create a Client\n    * @arg {String} token bot token\n    * @arg {Object} [options] Eris options (all options are optional)\n    * @arg {Boolean} [options.autoreconnect=true] Have Eris autoreconnect when connection is lost\n    * @arg {Boolean} [options.compress=false] Whether to request WebSocket data to be compressed or not\n    * @arg {Number} [options.connectionTimeout=30000] How long in milliseconds to wait for the connection to handshake with the server\n    * @arg {Object} [options.disableEvents] If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)\n    * @arg {Boolean} [options.disableEveryone=true] When true, filter out @everyone/@here by default in createMessage/editMessage\n    * @arg {Number} [options.firstShardID=0] The ID of the first shard to run for this client\n    * @arg {Boolean} [options.getAllUsers=false] Get all the users in every guild. Ready time will be severely delayed\n    * @arg {Number} [options.guildCreateTimeout=2000] How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds\n    * @arg {Boolean} [options.guildSubscriptions=true] If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching\n    * @arg {Number} [options.largeThreshold=250] The maximum number of offline users per guild during initial guild data transmission\n    * @arg {Number} [options.latencyThreshold=30000] The average request latency at which Eris will start emitting latency errors\n    * @arg {Number} [options.lastShardID=options.maxShards - 1] The ID of the last shard to run for this client\n    * @arg {Number | String} [options.maxShards=1] The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.\n    * @arg {Number} [options.messageLimit=100] The maximum size of a channel message cache\n    * @arg {Boolean} [options.opusOnly=false] Whether to suppress the node-opus not found error or not\n    * @arg {Number} [options.ratelimiterOffset=0] A number of milliseconds to offset the ratelimit timing calculations by\n    * @arg {Number} [options.requestTimeout=15000] A number of milliseconds before requests are considered timed out\n    * @arg {Boolean} [options.restMode=false] Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode\n    * @arg {Boolean} [options.seedVoiceConnections=false] Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions\n    * @arg {String} [options.defaultImageFormat=\"jpg\"] The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"\n    * @arg {Number} [options.defaultImageSize=128] The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that\n    * @arg {Object} [options.ws] An object of WebSocket options to pass to the shard WebSocket constructors\n    * @arg {Object} [options.agent] A HTTP Agent used to proxy requests\n    * @arg {Number} [options.maxReconnectAttempts=Infinity] The maximum amount of times that the client is allowed to try to reconnect to Discord.\n    * @arg {Function} [options.reconnectDelay] A function which returns how long the bot should wait until reconnecting to Discord.\n    */",
      "meta": {
        "range": [
          7174,
          10419
        ],
        "filename": "Client.js",
        "lineno": 102,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000198",
          "name": "Client",
          "type": "MethodDefinition",
          "paramnames": [
            "token",
            "options"
          ]
        }
      },
      "name": "Client",
      "longname": "Client",
      "kind": "class",
      "description": "Create a Client",
      "scope": "global",
      "classdesc": "Represents the main Eris client",
      "augments": [
        "EventEmitter"
      ],
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "bot token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Eris options (all options are optional)",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Have Eris autoreconnect when connection is lost",
          "name": "options.autoreconnect"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to request WebSocket data to be compressed or not",
          "name": "options.compress"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 30000,
          "description": "How long in milliseconds to wait for the connection to handshake with the server",
          "name": "options.connectionTimeout"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)",
          "name": "options.disableEvents"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "When true, filter out @everyone/@here by default in createMessage/editMessage",
          "name": "options.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The ID of the first shard to run for this client",
          "name": "options.firstShardID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Get all the users in every guild. Ready time will be severely delayed",
          "name": "options.getAllUsers"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2000,
          "description": "How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds",
          "name": "options.guildCreateTimeout"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching",
          "name": "options.guildSubscriptions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 250,
          "description": "The maximum number of offline users per guild during initial guild data transmission",
          "name": "options.largeThreshold"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 30000,
          "description": "The average request latency at which Eris will start emitting latency errors",
          "name": "options.latencyThreshold"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "options.maxShards - 1",
          "description": "The ID of the last shard to run for this client",
          "name": "options.lastShardID"
        },
        {
          "type": {
            "names": [
              "Number",
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.",
          "name": "options.maxShards"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum size of a channel message cache",
          "name": "options.messageLimit"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to suppress the node-opus not found error or not",
          "name": "options.opusOnly"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "A number of milliseconds to offset the ratelimit timing calculations by",
          "name": "options.ratelimiterOffset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 15000,
          "description": "A number of milliseconds before requests are considered timed out",
          "name": "options.requestTimeout"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode",
          "name": "options.restMode"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions",
          "name": "options.seedVoiceConnections"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"jpg\"",
          "description": "The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"",
          "name": "options.defaultImageFormat"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 128,
          "description": "The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that",
          "name": "options.defaultImageSize"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object of WebSocket options to pass to the shard WebSocket constructors",
          "name": "options.ws"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A HTTP Agent used to proxy requests",
          "name": "options.agent"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "Infinity",
          "description": "The maximum amount of times that the client is allowed to try to reconnect to Discord.",
          "name": "options.maxReconnectAttempts"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function which returns how long the bot should wait until reconnecting to Discord.",
          "name": "options.reconnectDelay"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The bot user token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "nullable": true,
          "description": "Whether the bot user belongs to an OAuth2 application",
          "name": "bot"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Eris options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping channel IDs to guild IDs",
          "name": "channelGuildMap"
        },
        {
          "type": {
            "names": [
              "Collection.<Shard>"
            ]
          },
          "description": "Collection of shards Eris is using",
          "name": "shards"
        },
        {
          "type": {
            "names": [
              "Collection.<Guild>"
            ]
          },
          "description": "Collection of guilds the bot is in",
          "name": "guilds"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping user IDs to private channel IDs",
          "name": "privateChannelMap"
        },
        {
          "type": {
            "names": [
              "Collection.<PrivateChannel>"
            ]
          },
          "description": "Collection of private channels the bot is in",
          "name": "privateChannels"
        },
        {
          "type": {
            "names": [
              "Collection.<GroupChannel>"
            ]
          },
          "description": "Collection of group channels the bot is in (user accounts only)",
          "name": "groupChannels"
        },
        {
          "type": {
            "names": [
              "Collection.<VoiceConnection>"
            ]
          },
          "description": "Extended collection of active VoiceConnections the bot has",
          "name": "voiceConnections"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping guild IDs to shard IDs",
          "name": "guildShardMap"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of bot ready event",
          "name": "startTime"
        },
        {
          "type": {
            "names": [
              "Collection.<UnavailableGuild>"
            ]
          },
          "description": "Collection of unavailable guilds the bot is in",
          "name": "unavailableGuilds"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How long in milliseconds the bot has been up for",
          "name": "uptime"
        },
        {
          "type": {
            "names": [
              "ExtendedUser"
            ]
          },
          "description": "The bot user",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Collection.<User>"
            ]
          },
          "description": "Collection of users the bot sees",
          "name": "users"
        },
        {
          "type": {
            "names": [
              "Collection.<Relationship>"
            ]
          },
          "description": "Collection of relationships the bot user has (user accounts only)",
          "name": "relationships"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping guild IDs to individual guild settings for the bot user (user accounts only)",
          "name": "userGuildSettings"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object containing the user account settings (user accounts only)",
          "name": "userSettings"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping user IDs to user notes (user accounts only)",
          "name": "notes"
        }
      ],
      "___id": "T000002R000034",
      "___s": true
    },
    {
      "comment": "/**\n    * Tells all shards to connect.\n    * @returns {Promise} Resolves when all shards are initialized\n    */",
      "meta": {
        "range": [
          10632,
          12379
        ],
        "filename": "Client.js",
        "lineno": 194,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000644",
          "name": "Client#connect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Tells all shards to connect.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Resolves when all shards are initialized"
        }
      ],
      "name": "connect",
      "longname": "Client#connect",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000092",
      "___s": true
    },
    {
      "comment": "/**\n    * Get info on connecting to the Discord gateway\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
      "meta": {
        "range": [
          12544,
          12634
        ],
        "filename": "Client.js",
        "lineno": 241,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000899",
          "name": "Client#getGateway",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get info on connecting to the Discord gateway",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an object containing gateway connection info"
        }
      ],
      "name": "getGateway",
      "longname": "Client#getGateway",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000104",
      "___s": true
    },
    {
      "comment": "/**\n    * Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
      "meta": {
        "range": [
          12852,
          13056
        ],
        "filename": "Client.js",
        "lineno": 249,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000914",
          "name": "Client#getBotGateway",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an object containing gateway connection info"
        }
      ],
      "name": "getBotGateway",
      "longname": "Client#getBotGateway",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000105",
      "___s": true
    },
    {
      "comment": "/**\n    * Disconnects all shards\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
      "meta": {
        "range": [
          13318,
          13504
        ],
        "filename": "Client.js",
        "lineno": 261,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000950",
          "name": "Client#disconnect",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Disconnects all shards",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "Shard disconnect options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String",
              "Boolean"
            ]
          },
          "optional": true,
          "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
          "name": "options.reconnect"
        }
      ],
      "name": "disconnect",
      "longname": "Client#disconnect",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000107",
      "___s": true
    },
    {
      "comment": "/**\n    * Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID\n    * @arg {String} channelID The ID of the voice channel\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
      "meta": {
        "range": [
          14119,
          15072
        ],
        "filename": "Client.js",
        "lineno": 277,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000985",
          "name": "Client#joinVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "VoiceConnection constructor options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Whether the VoiceConnection will be part of a SharedStream or not",
          "name": "options.shared"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
          "name": "options.opusOnly"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<VoiceConnection>"
            ]
          },
          "description": "Resolves with a VoiceConnection"
        }
      ],
      "name": "joinVoiceChannel",
      "longname": "Client#joinVoiceChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000110",
      "___s": true
    },
    {
      "comment": "/**\n    * Leaves a voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
      "meta": {
        "range": [
          15180,
          15375
        ],
        "filename": "Client.js",
        "lineno": 301,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001121",
          "name": "Client#leaveVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Leaves a voice channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        }
      ],
      "name": "leaveVoiceChannel",
      "longname": "Client#leaveVoiceChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000117",
      "___s": true
    },
    {
      "comment": "/**\n    * Closes a voice connection with a guild ID\n    * @arg {String} guildID The ID of the guild\n    */",
      "meta": {
        "range": [
          15492,
          15837
        ],
        "filename": "Client.js",
        "lineno": 312,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001148",
          "name": "Client#closeVoiceConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Closes a voice connection with a guild ID",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "name": "closeVoiceConnection",
      "longname": "Client#closeVoiceConnection",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000118",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
      "meta": {
        "range": [
          16019,
          16160
        ],
        "filename": "Client.js",
        "lineno": 326,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001196",
          "name": "Client#editAFK",
          "type": "MethodDefinition",
          "paramnames": [
            "afk"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the bot user is AFK or not",
          "name": "afk"
        }
      ],
      "name": "editAFK",
      "longname": "Client#editAFK",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000123",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's status on all guilds\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
      "meta": {
        "range": [
          16657,
          17075
        ],
        "filename": "Client.js",
        "lineno": 342,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001227",
          "name": "Client#editStatus",
          "type": "MethodDefinition",
          "paramnames": [
            "status",
            "game"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update the bot's status on all guilds",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Sets the bot's active game, null to clear",
          "name": "game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Sets the name of the bot's active game",
          "name": "game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching",
          "name": "game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the url of the shard's active game",
          "name": "game.url"
        }
      ],
      "name": "editStatus",
      "longname": "Client#editStatus",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000125",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a Channel object from a channel ID\n    * @arg {String} channelID The ID of the channel\n    * @returns {CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel}\n    */",
      "meta": {
        "range": [
          17301,
          17721
        ],
        "filename": "Client.js",
        "lineno": 364,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001292",
          "name": "Client#getChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a Channel object from a channel ID",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "CategoryChannel",
              "GroupChannel",
              "PrivateChannel",
              "TextChannel",
              "VoiceChannel",
              "NewsChannel"
            ]
          }
        }
      ],
      "name": "getChannel",
      "longname": "Client#getChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000130",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel in a guild\n    * @arg {String} guildID The ID of the guild to create the channel in\n    * @arg {String} name The name of the channel\n    * @arg {String} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
      "meta": {
        "range": [
          19112,
          20405
        ],
        "filename": "Client.js",
        "lineno": 391,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001361",
          "name": "Client#createChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "name",
            "type",
            "reason",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the channel in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object",
              "String"
            ]
          },
          "optional": true,
          "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent category channel for this channel",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing permission overwrite objects",
          "name": "options.permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "options.reason"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (voice channels only)",
          "name": "options.userLimit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
            ]
          }
        }
      ],
      "name": "createChannel",
      "longname": "Client#createChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000131",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a channel's properties\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel (guild channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {String?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | GroupChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          21753,
          22326
        ],
        "filename": "Client.js",
        "lineno": 436,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001494",
          "name": "Client#editChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a channel's properties",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the channel owner (group channels only)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel (guild channels only)",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|GroupChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "name": "editChannel",
      "longname": "Client#editChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000148",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          22604,
          23744
        ],
        "filename": "Client.js",
        "lineno": 457,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001565",
          "name": "Client#editChannelPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editChannelPosition",
      "longname": "Client#editChannelPosition",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000159",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild channel, or leave a private or group channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          23978,
          24140
        ],
        "filename": "Client.js",
        "lineno": 491,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001747",
          "name": "Client#deleteChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild channel, or leave a private or group channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteChannel",
      "longname": "Client#deleteChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000167",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24276,
          24407
        ],
        "filename": "Client.js",
        "lineno": 502,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001770",
          "name": "Client#sendChannelTyping",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Send typing status in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "sendChannelTyping",
      "longname": "Client#sendChannelTyping",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000169",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} channelID The ID of channel\n    * @arg {String} overwriteID The ID of the overwritten user or role (everyone role ID = guild ID)\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24945,
          25223
        ],
        "filename": "Client.js",
        "lineno": 516,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001789",
          "name": "Client#editChannelPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel permission overwrite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role (everyone role ID = guild ID)",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editChannelPermission",
      "longname": "Client#editChannelPermission",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000170",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          25506,
          25715
        ],
        "filename": "Client.js",
        "lineno": 532,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001823",
          "name": "Client#deleteChannelPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a channel permission overwrite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteChannelPermission",
      "longname": "Client#deleteChannelPermission",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000175",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          25858,
          26058
        ],
        "filename": "Client.js",
        "lineno": 543,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001848",
          "name": "Client#getChannelInvites",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getChannelInvites",
      "longname": "Client#getChannelInvites",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000177",
      "___s": true
    },
    {
      "comment": "/**\n    * Create an invite for a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          26640,
          27033
        ],
        "filename": "Client.js",
        "lineno": 558,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001882",
          "name": "Client#createChannelInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create an invite for a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Invite generation options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How long the invite should last in seconds",
          "name": "options.maxAge"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How many uses the invite should last for",
          "name": "options.maxUses"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is temporary or not",
          "name": "options.temporary"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is unique or not",
          "name": "options.unique"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "createChannelInvite",
      "longname": "Client#createChannelInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000178",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in a channel\n    * @arg {String} channelID The ID of the channel to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          27243,
          27376
        ],
        "filename": "Client.js",
        "lineno": 573,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001933",
          "name": "Client#getChannelWebhooks",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the webhooks in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel to get webhooks for",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "name": "getChannelWebhooks",
      "longname": "Client#getChannelWebhooks",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000184",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          27631,
          27808
        ],
        "filename": "Client.js",
        "lineno": 583,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001952",
          "name": "Client#getWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "getWebhook",
      "longname": "Client#getWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000185",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel webhook\n    * @arg {String} channelID The ID of the channel to create the webhook in\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          28300,
          28495
        ],
        "filename": "Client.js",
        "lineno": 596,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001981",
          "name": "Client#createChannelWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel to create the webhook in",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "createChannelWebhook",
      "longname": "Client#createChannelWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000186",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} [options.name] The new default name\n    * @arg {String} [options.avatar] The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          29062,
          29301
        ],
        "filename": "Client.js",
        "lineno": 611,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002009",
          "name": "Client#editWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "options",
            "token",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "editWebhook",
      "longname": "Client#editWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000188",
      "___s": true
    },
    {
      "comment": "/**\n    * Execute a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Webhook execution options\n    * @arg {String} [options.content=\"\"] A content string\n    * @arg {Object | Object[]} [options.file] A file object (or an Array of them)\n    * @arg {Buffer} options.file.file A buffer containing file data\n    * @arg {String} options.file.name What to name the file\n    * @arg {Object[]} [options.embeds] An array of Discord embeds\n    * @arg {String} [options.username] A custom username, defaults to webhook default username if not specified\n    * @arg {String} [options.avatarURL] A URL for a custom avatar, defaults to webhook default avatar if not specified\n    * @arg {Boolean} [options.tts=false] Whether the message should be a TTS message or not\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Boolean} [options.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @returns {Promise<Message?>}\n    */",
      "meta": {
        "range": [
          30413,
          31346
        ],
        "filename": "Client.js",
        "lineno": 633,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002047",
          "name": "Client#executeWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Execute a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The token of the webhook",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook execution options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"\"",
          "description": "A content string",
          "name": "options.content"
        },
        {
          "type": {
            "names": [
              "Object",
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "A file object (or an Array of them)",
          "name": "options.file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "options.file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "options.file.name"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "An array of Discord embeds",
          "name": "options.embeds"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "A custom username, defaults to webhook default username if not specified",
          "name": "options.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "A URL for a custom avatar, defaults to webhook default avatar if not specified",
          "name": "options.avatarURL"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether the message should be a TTS message or not",
          "name": "options.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to wait for the server to confirm the message create or not",
          "name": "options.wait"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "options.disableEveryone"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<?Message>"
            ]
          }
        }
      ],
      "name": "executeWebhook",
      "longname": "Client#executeWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000190",
      "___s": true
    },
    {
      "comment": "/**\n    * Execute a slack-style webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Slack webhook options\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          31691,
          32010
        ],
        "filename": "Client.js",
        "lineno": 657,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002184",
          "name": "Client#executeSlackWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Execute a slack-style webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The token of the webhook",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Slack webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to wait for the server to confirm the message create or not",
          "name": "options.wait"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "executeSlackWebhook",
      "longname": "Client#executeSlackWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000197",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          32299,
          32522
        ],
        "filename": "Client.js",
        "lineno": 670,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002234",
          "name": "Client#deleteWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteWebhook",
      "longname": "Client#deleteWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000200",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in a guild\n    * @arg {String} guildID The ID of the guild to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          32726,
          32851
        ],
        "filename": "Client.js",
        "lineno": 681,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002267",
          "name": "Client#getGuildWebhooks",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the webhooks in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to get webhooks for",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "name": "getGuildWebhooks",
      "longname": "Client#getGuildWebhooks",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000202",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {String} guildID The ID of the guild to get audit logs for\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with {users: Users[], entries: GuildAuditLogEntry[]}\n    */",
      "meta": {
        "range": [
          33270,
          33828
        ],
        "filename": "Client.js",
        "lineno": 693,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002286",
          "name": "Client#getGuildAuditLogs",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "limit",
            "before",
            "actionType"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the audit logs for a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to get audit logs for",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The maximum number of entries to return",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get entries before this entry ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Filter entries by action type",
          "name": "actionType"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {users: Users[], entries: GuildAuditLogEntry[]}"
        }
      ],
      "name": "getGuildAuditLogs",
      "longname": "Client#getGuildAuditLogs",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000203",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild emoji object\n    * @arg {String} guildID The ID of the guild to create the emoji in\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          34307,
          34490
        ],
        "filename": "Client.js",
        "lineno": 717,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002365",
          "name": "Client#createGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild emoji object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The base 64 encoded string",
          "name": "options.image"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "name": "createGuildEmoji",
      "longname": "Client#createGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000210",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild emoji object\n    * @arg {String} guildID The ID of the guild to edit the emoji in\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          34973,
          35172
        ],
        "filename": "Client.js",
        "lineno": 732,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002393",
          "name": "Client#editGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild emoji object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to edit the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji you want to modify",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "name": "editGuildEmoji",
      "longname": "Client#editGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000212",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild emoji object\n    * @arg {String} guildID The ID of the guild to delete the emoji in\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          35441,
          35624
        ],
        "filename": "Client.js",
        "lineno": 744,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002423",
          "name": "Client#deleteGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild emoji object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to delete the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteGuildEmoji",
      "longname": "Client#deleteGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000214",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {Object} [options] The properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          36293,
          36700
        ],
        "filename": "Client.js",
        "lineno": 762,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002448",
          "name": "Client#createRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the role in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The properties to set",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "createRole",
      "longname": "Client#createRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000216",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild role\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          37405,
          37652
        ],
        "filename": "Client.js",
        "lineno": 787,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002509",
          "name": "Client#editRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild the role is in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "editRole",
      "longname": "Client#editRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000219",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          37978,
          39011
        ],
        "filename": "Client.js",
        "lineno": 799,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002554",
          "name": "Client#editRolePosition",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild the role is in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the role",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editRolePosition",
      "longname": "Client#editRolePosition",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000221",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          39269,
          39443
        ],
        "filename": "Client.js",
        "lineno": 832,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002732",
          "name": "Client#deleteRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the role in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteRole",
      "longname": "Client#deleteRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000229",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the prune count for a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @returns {Promise<Number>} Resolves with the number of users that would be pruned\n    */",
      "meta": {
        "range": [
          39709,
          39892
        ],
        "filename": "Client.js",
        "lineno": 844,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002757",
          "name": "Client#getPruneCount",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "days"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the prune count for a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of users that would be pruned"
        }
      ],
      "name": "getPruneCount",
      "longname": "Client#getPruneCount",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000231",
      "___s": true
    },
    {
      "comment": "/**\n    * Begin pruning a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of pruned users\n    */",
      "meta": {
        "range": [
          40204,
          40415
        ],
        "filename": "Client.js",
        "lineno": 857,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002788",
          "name": "Client#pruneMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "days",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Begin pruning a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of pruned users"
        }
      ],
      "name": "pruneMembers",
      "longname": "Client#pruneMembers",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000233",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of general/guild-specific voice regions\n    * @arg {String} [guildID] The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
      "meta": {
        "range": [
          40625,
          40832
        ],
        "filename": "Client.js",
        "lineno": 869,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002822",
          "name": "Client#getVoiceRegions",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of general/guild-specific voice regions",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of voice region objects"
        }
      ],
      "name": "getVoiceRegions",
      "longname": "Client#getVoiceRegions",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000236",
      "___s": true
    },
    {
      "comment": "/**\n    * Get info on an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {Boolean} [withCounts] Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          41118,
          41334
        ],
        "filename": "Client.js",
        "lineno": 879,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002854",
          "name": "Client#getInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID",
            "withCounts"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get info on an invite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)",
          "name": "withCounts"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "getInvite",
      "longname": "Client#getInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000237",
      "___s": true
    },
    {
      "comment": "/**\n    * Accept an invite (not for bot accounts)\n    * @arg {String} inviteID The ID of the invite\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          41484,
          41643
        ],
        "filename": "Client.js",
        "lineno": 890,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002886",
          "name": "Client#acceptInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Accept an invite (not for bot accounts)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "acceptInvite",
      "longname": "Client#acceptInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000239",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          41832,
          41990
        ],
        "filename": "Client.js",
        "lineno": 900,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002914",
          "name": "Client#deleteInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete an invite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteInvite",
      "longname": "Client#deleteInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000240",
      "___s": true
    },
    {
      "comment": "/**\n    * Get properties of the bot user\n    * @returns {Promise<ExtendedUser>}\n    */",
      "meta": {
        "range": [
          42087,
          42229
        ],
        "filename": "Client.js",
        "lineno": 910,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002937",
          "name": "Client#getSelf",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get properties of the bot user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<ExtendedUser>"
            ]
          }
        }
      ],
      "name": "getSelf",
      "longname": "Client#getSelf",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000242",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit properties of the bot user\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.username] The new username\n    * @arg {String} [options.avatar] The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<ExtendedUser>}\n    */",
      "meta": {
        "range": [
          42567,
          42728
        ],
        "filename": "Client.js",
        "lineno": 921,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002964",
          "name": "Client#editSelf",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit properties of the bot user",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new username",
          "name": "options.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<ExtendedUser>"
            ]
          }
        }
      ],
      "name": "editSelf",
      "longname": "Client#editSelf",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000243",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a DM channel with a user, or create one if it does not exist\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          42907,
          43308
        ],
        "filename": "Client.js",
        "lineno": 930,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002993",
          "name": "Client#getDMChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a DM channel with a user, or create one if it does not exist",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "name": "getDMChannel",
      "longname": "Client#getDMChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000244",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a group channel with other users\n    * @arg {String[]} userIDs The IDs of the other users\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          43473,
          43729
        ],
        "filename": "Client.js",
        "lineno": 945,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003050",
          "name": "Client#createGroupChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "userIDs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a group channel with other users",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the other users",
          "name": "userIDs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "name": "createGroupChannel",
      "longname": "Client#createGroupChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000247",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          43930,
          44122
        ],
        "filename": "Client.js",
        "lineno": 958,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003083",
          "name": "Client#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a previous message in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "getMessage",
      "longname": "Client#getMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000250",
      "___s": true
    },
    {
      "comment": "/**\n    * Get previous messages in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          44563,
          46462
        ],
        "filename": "Client.js",
        "lineno": 971,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003113",
          "name": "Client#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get previous messages in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getMessages",
      "longname": "Client#getMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000251",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          46607,
          46799
        ],
        "filename": "Client.js",
        "lineno": 1014,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003381",
          "name": "Client#getPins",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the pins in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getPins",
      "longname": "Client#getPins",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000265",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in a channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user\n    * @arg {String} channelID The ID of the channel\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object | Object[]} [file] A file object (or an Array of them)\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          47793,
          48901
        ],
        "filename": "Client.js",
        "lineno": 1032,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003415",
          "name": "Client#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a message in a channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object",
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "A file object (or an Array of them)",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "createMessage",
      "longname": "Client#createMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000266",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          49797,
          50832
        ],
        "filename": "Client.js",
        "lineno": 1063,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003567",
          "name": "Client#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "editMessage",
      "longname": "Client#editMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000271",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          51002,
          51144
        ],
        "filename": "Client.js",
        "lineno": 1087,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003710",
          "name": "Client#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Pin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "pinMessage",
      "longname": "Client#pinMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000276",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          51316,
          51463
        ],
        "filename": "Client.js",
        "lineno": 1097,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003731",
          "name": "Client#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unpin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unpinMessage",
      "longname": "Client#unpinMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000277",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          51980,
          52453
        ],
        "filename": "Client.js",
        "lineno": 1111,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003752",
          "name": "Client#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of users who reacted with a specific reaction",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "name": "getMessageReaction",
      "longname": "Client#getMessageReaction",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000278",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          52816,
          53139
        ],
        "filename": "Client.js",
        "lineno": 1130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003815",
          "name": "Client#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a reaction to a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addMessageReaction",
      "longname": "Client#addMessageReaction",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000283",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          53522,
          53851
        ],
        "filename": "Client.js",
        "lineno": 1145,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003855",
          "name": "Client#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a reaction from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReaction",
      "longname": "Client#removeMessageReaction",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000285",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54043,
          54214
        ],
        "filename": "Client.js",
        "lineno": 1158,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003895",
          "name": "Client#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove all reactions from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReactions",
      "longname": "Client#removeMessageReactions",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000287",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54457,
          54649
        ],
        "filename": "Client.js",
        "lineno": 1169,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003916",
          "name": "Client#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessage",
      "longname": "Client#deleteMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000288",
      "___s": true
    },
    {
      "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54928,
          55982
        ],
        "filename": "Client.js",
        "lineno": 1182,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003941",
          "name": "Client#deleteMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageIDs",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Bulk delete messages (bot accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of message IDs to delete",
          "name": "messageIDs"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessages",
      "longname": "Client#deleteMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000290",
      "___s": true
    },
    {
      "comment": "/**\n    * Purge previous messages in a channel with an optional filter (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
      "meta": {
        "range": [
          56544,
          58602
        ],
        "filename": "Client.js",
        "lineno": 1217,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004073",
          "name": "Client#purgeChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "limit",
            "filter",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Purge previous messages in a channel with an optional filter (bot accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of messages to search through, -1 for no limit",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional filter function that returns a boolean when passed a Message object",
          "name": "filter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of messages deleted"
        }
      ],
      "name": "purgeChannel",
      "longname": "Client#purgeChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000297",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's embed object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild embed object\n    */",
      "meta": {
        "range": [
          58758,
          58877
        ],
        "filename": "Client.js",
        "lineno": 1280,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004340",
          "name": "Client#getGuildEmbed",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's embed object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild embed object"
        }
      ],
      "name": "getGuildEmbed",
      "longname": "Client#getGuildEmbed",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000311",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of integrations for a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
      "meta": {
        "range": [
          59036,
          59317
        ],
        "filename": "Client.js",
        "lineno": 1289,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004359",
          "name": "Client#getGuildIntegrations",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of integrations for a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<GuildIntegration>>"
            ]
          }
        }
      ],
      "name": "getGuildIntegrations",
      "longname": "Client#getGuildIntegrations",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000312",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          59862,
          60215
        ],
        "filename": "Client.js",
        "lineno": 1304,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004403",
          "name": "Client#editGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild integration",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "What to do when a user's subscription runs out",
          "name": "options.expireBehavior"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "How long before the integration's role is removed from an unsubscribed user",
          "name": "options.expireGracePeriod"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Whether to enable integration emoticons or not",
          "name": "options.enableEmoticons"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editGuildIntegration",
      "longname": "Client#editGuildIntegration",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000314",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          60402,
          60569
        ],
        "filename": "Client.js",
        "lineno": 1318,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004438",
          "name": "Client#deleteGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild integration",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteGuildIntegration",
      "longname": "Client#deleteGuildIntegration",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000318",
      "___s": true
    },
    {
      "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          60763,
          60931
        ],
        "filename": "Client.js",
        "lineno": 1328,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004459",
          "name": "Client#syncGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Force a guild integration to sync",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "syncGuildIntegration",
      "longname": "Client#syncGuildIntegration",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000319",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          61068,
          61260
        ],
        "filename": "Client.js",
        "lineno": 1337,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004480",
          "name": "Client#getGuildInvites",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getGuildInvites",
      "longname": "Client#getGuildInvites",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000320",
      "___s": true
    },
    {
      "comment": "/**\n    * Returns the vanity url of the guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          61396,
          61521
        ],
        "filename": "Client.js",
        "lineno": 1346,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004514",
          "name": "Client#getGuildVanity",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the vanity url of the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "getGuildVanity",
      "longname": "Client#getGuildVanity",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000321",
      "___s": true
    },
    {
      "comment": "/**\n    * Ban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for, between 0-7 inclusive\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          61864,
          62377
        ],
        "filename": "Client.js",
        "lineno": 1358,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004533",
          "name": "Client#banGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "deleteMessageDays",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Ban a user from a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of days to delete messages for, between 0-7 inclusive",
          "name": "deleteMessageDays"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "banGuildMember",
      "longname": "Client#banGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000322",
      "___s": true
    },
    {
      "comment": "/**\n    * Unban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          62619,
          62798
        ],
        "filename": "Client.js",
        "lineno": 1375,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004588",
          "name": "Client#unbanGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unban a user from a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unbanGuildMember",
      "longname": "Client#unbanGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000325",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild\n    * @arg {String} name The name of the guild\n    * @arg {String} region The region of the guild\n    * @arg {String} [icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          63093,
          63323
        ],
        "filename": "Client.js",
        "lineno": 1388,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004613",
          "name": "Client#createGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "name",
            "region",
            "icon"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the guild",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The region of the guild",
          "name": "region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "icon",
          "defaultvalue": null
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "createGuild",
      "longname": "Client#createGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000327",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the user to transfer server ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.description] The description for the guild (VIP only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          65002,
          65818
        ],
        "filename": "Client.js",
        "lineno": 1416,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004650",
          "name": "Client#editGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The region of the guild",
          "name": "options.region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The guild verification level",
          "name": "options.verificationLevel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
          "name": "options.defaultNotifications"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
          "name": "options.explicitContentFilter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the system channel",
          "name": "options.systemChannelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the AFK voice channel",
          "name": "options.afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The AFK timeout in seconds",
          "name": "options.afkTimeout"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the user to transfer server ownership to (bot user must be owner)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.banner"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The description for the guild (VIP only)",
          "name": "options.description"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "editGuild",
      "longname": "Client#editGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000331",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          66011,
          66286
        ],
        "filename": "Client.js",
        "lineno": 1440,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004735",
          "name": "Client#getGuildBans",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the ban list of a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of {reason: String, user: User}"
        }
      ],
      "name": "getGuildBans",
      "longname": "Client#getGuildBans",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000346",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          66529,
          66760
        ],
        "filename": "Client.js",
        "lineno": 1455,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004781",
          "name": "Client#getGuildBan",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a ban from the ban list of a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the banned user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {reason: String, user: User}"
        }
      ],
      "name": "getGuildBan",
      "longname": "Client#getGuildBan",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000348",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          67445,
          67903
        ],
        "filename": "Client.js",
        "lineno": 1475,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004821",
          "name": "Client#editGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "The array of role IDs the member should have",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Set the member's server nickname, \"\" to remove",
          "name": "options.nick"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server mute the member",
          "name": "options.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server deafen the member",
          "name": "options.deaf"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the voice channel to move the member to (must be in voice)",
          "name": "options.channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editGuildMember",
      "longname": "Client#editGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000350",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          68198,
          68404
        ],
        "filename": "Client.js",
        "lineno": 1494,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004886",
          "name": "Client#addGuildMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a role to a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addGuildMemberRole",
      "longname": "Client#addGuildMemberRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000357",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          68704,
          68916
        ],
        "filename": "Client.js",
        "lineno": 1508,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004913",
          "name": "Client#removeGuildMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a role from a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeGuildMemberRole",
      "longname": "Client#removeGuildMemberRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000359",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the bot's nickname in a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} nick The nickname\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69159,
          69356
        ],
        "filename": "Client.js",
        "lineno": 1521,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004940",
          "name": "Client#editNickname",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "nick",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the bot's nickname in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The nickname",
          "name": "nick"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editNickname",
      "longname": "Client#editNickname",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000361",
      "___s": true
    },
    {
      "comment": "/**\n    * Kick a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69597,
          69778
        ],
        "filename": "Client.js",
        "lineno": 1535,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004967",
          "name": "Client#kickGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Kick a user from a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "kickGuildMember",
      "longname": "Client#kickGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000364",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild (bot user must be owner)\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69918,
          70032
        ],
        "filename": "Client.js",
        "lineno": 1546,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004992",
          "name": "Client#deleteGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild (bot user must be owner)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteGuild",
      "longname": "Client#deleteGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000366",
      "___s": true
    },
    {
      "comment": "/**\n    * Leave a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          70146,
          70271
        ],
        "filename": "Client.js",
        "lineno": 1555,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005011",
          "name": "Client#leaveGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Leave a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "leaveGuild",
      "longname": "Client#leaveGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000367",
      "___s": true
    },
    {
      "comment": "/**\n    * Get data on an OAuth2 application\n    * @arg {String} [appID=\"@me\"] The client ID of the application to get data for. \"@me\" refers to the logged in user's own application\n    * @returns {Promise<Object>} The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure\n    */",
      "meta": {
        "range": [
          70697,
          70834
        ],
        "filename": "Client.js",
        "lineno": 1564,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005031",
          "name": "Client#getOAuthApplication",
          "type": "MethodDefinition",
          "paramnames": [
            "appID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get data on an OAuth2 application",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The client ID of the application to get data for. \"@me\" refers to the logged in user's own application",
          "name": "appID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure"
        }
      ],
      "name": "getOAuthApplication",
      "longname": "Client#getOAuthApplication",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000368",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71069,
          71261
        ],
        "filename": "Client.js",
        "lineno": 1574,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005052",
          "name": "Client#addRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "block"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a relationship with a user",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If true, block the user. Otherwise, add the user as a friend",
          "name": "block"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addRelationship",
      "longname": "Client#addRelationship",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000369",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71400,
          71538
        ],
        "filename": "Client.js",
        "lineno": 1585,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005079",
          "name": "Client#removeRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a relationship with a user",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeRelationship",
      "longname": "Client#removeRelationship",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000371",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a user to a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71720,
          71865
        ],
        "filename": "Client.js",
        "lineno": 1595,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005099",
          "name": "Client#addGroupRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "groupID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a user to a group",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target group",
          "name": "groupID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addGroupRecipient",
      "longname": "Client#addGroupRecipient",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000372",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a user from a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72052,
          72203
        ],
        "filename": "Client.js",
        "lineno": 1605,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005120",
          "name": "Client#removeGroupRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "groupID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a user from a group",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target group",
          "name": "groupID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeGroupRecipient",
      "longname": "Client#removeGroupRecipient",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000373",
      "___s": true
    },
    {
      "comment": "/**\n    * Get profile data for a user (user accounts only)\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
      "meta": {
        "range": [
          72390,
          72509
        ],
        "filename": "Client.js",
        "lineno": 1614,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005141",
          "name": "Client#getUserProfile",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get profile data for a user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's profile data."
        }
      ],
      "name": "getUserProfile",
      "longname": "Client#getUserProfile",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000374",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the current user's note for another user (user accounts only)\n    * @arg {String} userID The ID of the target user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72715,
          72872
        ],
        "filename": "Client.js",
        "lineno": 1624,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005160",
          "name": "Client#editUserNote",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "note"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the current user's note for another user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The note",
          "name": "note"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editUserNote",
      "longname": "Client#editUserNote",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000375",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the current user's note for another user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72993,
          73119
        ],
        "filename": "Client.js",
        "lineno": 1634,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005184",
          "name": "Client#deleteUserNote",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the current user's note for another user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteUserNote",
      "longname": "Client#deleteUserNote",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000377",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the connections for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's connections\n    */",
      "meta": {
        "range": [
          73264,
          73384
        ],
        "filename": "Client.js",
        "lineno": 1642,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005204",
          "name": "Client#getSelfConnections",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the connections for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's connections"
        }
      ],
      "name": "getSelfConnections",
      "longname": "Client#getSelfConnections",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000378",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a connection for the current user (user accounts only)\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @arg {Object} data The connection data\n    * @arg {Boolean} [data.friendSync] Whether to sync friends from the connection or not\n    * @arg {Number} [data.visibility] The visibility level for the connection. 0 = hidden, 1 = shown on profile\n    * @returns {Promise<Object>} The updated connection data\n    */",
      "meta": {
        "range": [
          73899,
          74156
        ],
        "filename": "Client.js",
        "lineno": 1655,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005222",
          "name": "Client#editSelfConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "platform",
            "id",
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a connection for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
          "name": "platform"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection ID",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The connection data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to sync friends from the connection or not",
          "name": "data.friendSync"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The visibility level for the connection. 0 = hidden, 1 = shown on profile",
          "name": "data.visibility"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The updated connection data"
        }
      ],
      "name": "editSelfConnection",
      "longname": "Client#editSelfConnection",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000379",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a connection for the current user (user accounts only)\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          74390,
          74549
        ],
        "filename": "Client.js",
        "lineno": 1668,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005254",
          "name": "Client#deleteSelfConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "platform",
            "id"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a connection for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
          "name": "platform"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection ID",
          "name": "id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteSelfConnection",
      "longname": "Client#deleteSelfConnection",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000382",
      "___s": true
    },
    {
      "comment": "/**\n    * Get settings for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's settings data.\n    */",
      "meta": {
        "range": [
          74690,
          74804
        ],
        "filename": "Client.js",
        "lineno": 1676,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005276",
          "name": "Client#getSelfSettings",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get settings for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's settings data."
        }
      ],
      "name": "getSelfSettings",
      "longname": "Client#getSelfSettings",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000383",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit settings for the current user (user accounts only)\n    * @arg {Object} data The user settings data\n    * @arg {Boolean} [data.convertEmoticons] Whether to convert emoticons or not (e.g. :D => 😄)\n    * @arg {Boolean} [data.detectPlatformAccounts] Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)\n    * @arg {Boolean} [data.developerMode] Whether to enable developer mode or not\n    * @arg {Boolean} [data.enableTTSCommand] Whether to respect usage of the TTS command or not\n    * @arg {Object} [data.friendSourceFlags] An object representing allowed friend request sources\n    * @arg {Boolean} [data.friendSourceFlags.all] Whether to allow friends requests from anywhere or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualFriends] Whether to allow friend requests from people with mutual friends or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualGuilds] Whether to allow friend requests from people in mutual guilds or not\n    * @arg {Array<String>} [data.guildPositions] An ordered array of guild IDs representing the guild list order in the Discord client\n    * @arg {Boolean} [data.inlineAttachmentMedia] Whether to show attachment previews or not\n    * @arg {Boolean} [data.inlineEmbedMedia] Whether to show embed images or not\n    * @arg {String} [data.locale] The locale to use for the Discord UI\n    * @arg {Boolean} [data.messageDisplayCompact] Whether to use compact mode or not\n    * @arg {Boolean} [data.renderEmbeds] Whether to show embeds or not\n    * @arg {Boolean} [data.renderReactions] Whether to show reactions or not\n    * @arg {Array<String>} [data.restrictedGuilds] An array of guild IDs where direct messages from guild members are disallowed\n    * @arg {Boolean} [data.showCurrentGame] Whether to set the user's status to the current game or not\n    * @arg {String} [data.status] The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"\n    * @arg {String} [data.theme] The theme to use for the Discord UI, either \"dark\" or \"light\"\n    * @returns {Promise<Object>} The user's settings data.\n    */",
      "meta": {
        "range": [
          76923,
          78350
        ],
        "filename": "Client.js",
        "lineno": 1704,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005294",
          "name": "Client#editSelfSettings",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit settings for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The user settings data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to convert emoticons or not (e.g. :D => 😄)",
          "name": "data.convertEmoticons"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)",
          "name": "data.detectPlatformAccounts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to enable developer mode or not",
          "name": "data.developerMode"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to respect usage of the TTS command or not",
          "name": "data.enableTTSCommand"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object representing allowed friend request sources",
          "name": "data.friendSourceFlags"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friends requests from anywhere or not",
          "name": "data.friendSourceFlags.all"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friend requests from people with mutual friends or not",
          "name": "data.friendSourceFlags.mutualFriends"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friend requests from people in mutual guilds or not",
          "name": "data.friendSourceFlags.mutualGuilds"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An ordered array of guild IDs representing the guild list order in the Discord client",
          "name": "data.guildPositions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show attachment previews or not",
          "name": "data.inlineAttachmentMedia"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show embed images or not",
          "name": "data.inlineEmbedMedia"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The locale to use for the Discord UI",
          "name": "data.locale"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to use compact mode or not",
          "name": "data.messageDisplayCompact"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show embeds or not",
          "name": "data.renderEmbeds"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show reactions or not",
          "name": "data.renderReactions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of guild IDs where direct messages from guild members are disallowed",
          "name": "data.restrictedGuilds"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to set the user's status to the current game or not",
          "name": "data.showCurrentGame"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"",
          "name": "data.status"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The theme to use for the Discord UI, either \"dark\" or \"light\"",
          "name": "data.theme"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's settings data."
        }
      ],
      "name": "editSelfSettings",
      "longname": "Client#editSelfSettings",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000384",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the MFA backup codes for the current user (user accounts only)\n    * @arg {String} password The password for the current user\n    * @arg {Boolean} [regenerate] Whether to regenerate the MFA backup codes or not\n    * @returns {Promise<Object>} The user's MFA codes\n    */",
      "meta": {
        "range": [
          78645,
          78863
        ],
        "filename": "Client.js",
        "lineno": 1744,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005428",
          "name": "Client#getSelfMFACodes",
          "type": "MethodDefinition",
          "paramnames": [
            "password",
            "regenerate"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the MFA backup codes for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The password for the current user",
          "name": "password"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to regenerate the MFA backup codes or not",
          "name": "regenerate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's MFA codes"
        }
      ],
      "name": "getSelfMFACodes",
      "longname": "Client#getSelfMFACodes",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000406",
      "___s": true
    },
    {
      "comment": "/**\n    * Enable TOTP authentication for the current user (user accounts only)\n    * @arg {String} secret The TOTP secret used to generate the auth code\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token and backup codes\n    */",
      "meta": {
        "range": [
          79205,
          79503
        ],
        "filename": "Client.js",
        "lineno": 1757,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005455",
          "name": "Client#enableSelfMFATOTP",
          "type": "MethodDefinition",
          "paramnames": [
            "secret",
            "code"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Enable TOTP authentication for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The TOTP secret used to generate the auth code",
          "name": "secret"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The timed auth code for the current user",
          "name": "code"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An object containing the user's new authorization token and backup codes"
        }
      ],
      "name": "enableSelfMFATOTP",
      "longname": "Client#enableSelfMFATOTP",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000409",
      "___s": true
    },
    {
      "comment": "/**\n    * Disable TOTP authentication for the current user (user accounts only)\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token\n    */",
      "meta": {
        "range": [
          79755,
          80027
        ],
        "filename": "Client.js",
        "lineno": 1773,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005499",
          "name": "Client#disableSelfMFATOTP",
          "type": "MethodDefinition",
          "paramnames": [
            "code"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Disable TOTP authentication for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The timed auth code for the current user",
          "name": "code"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An object containing the user's new authorization token"
        }
      ],
      "name": "disableSelfMFATOTP",
      "longname": "Client#disableSelfMFATOTP",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000413",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the billing info for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's billing info\n    */",
      "meta": {
        "range": [
          80174,
          80286
        ],
        "filename": "Client.js",
        "lineno": 1787,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005540",
          "name": "Client#getSelfBilling",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the billing info for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's billing info"
        }
      ],
      "name": "getSelfBilling",
      "longname": "Client#getSelfBilling",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000416",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the payment history for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's payment history\n    */",
      "meta": {
        "range": [
          80439,
          80561
        ],
        "filename": "Client.js",
        "lineno": 1795,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005558",
          "name": "Client#getSelfPayments",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the payment history for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's payment history"
        }
      ],
      "name": "getSelfPayments",
      "longname": "Client#getSelfPayments",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000417",
      "___s": true
    },
    {
      "comment": "/**\n    * Purchase a premium subscription (Nitro) for the current user (user accounts only)\n    * You must get a Stripe card token from the Stripe API for this to work\n    * @arg {String} token The Stripe credit card token\n    * @arg {String} plan The plan to purchase, either \"premium_month\" or \"premium_year\"\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          80914,
          81171
        ],
        "filename": "Client.js",
        "lineno": 1806,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005576",
          "name": "Client#addSelfPremiumSubscription",
          "type": "MethodDefinition",
          "paramnames": [
            "token",
            "plan"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Purchase a premium subscription (Nitro) for the current user (user accounts only)\nYou must get a Stripe card token from the Stripe API for this to work",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The Stripe credit card token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The plan to purchase, either \"premium_month\" or \"premium_year\"",
          "name": "plan"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addSelfPremiumSubscription",
      "longname": "Client#addSelfPremiumSubscription",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000418",
      "___s": true
    },
    {
      "comment": "/**\n    * Cancel the premium subscription (Nitro) for the current user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          81305,
          81456
        ],
        "filename": "Client.js",
        "lineno": 1818,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005603",
          "name": "Client#deleteSelfPremiumSubscription",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Cancel the premium subscription (Nitro) for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteSelfPremiumSubscription",
      "longname": "Client#deleteSelfPremiumSubscription",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000422",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a channel's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          81735,
          82041
        ],
        "filename": "Client.js",
        "lineno": 1827,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005621",
          "name": "Client#getRESTChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a channel's data via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|GroupChannel|PrivateChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "name": "getRESTChannel",
      "longname": "Client#getRESTChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000423",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          82229,
          82507
        ],
        "filename": "Client.js",
        "lineno": 1840,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005667",
          "name": "Client#getRESTGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's data via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "getRESTGuild",
      "longname": "Client#getRESTGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000424",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=100] The max number of guilds to get (1 to 1000)\n    * @arg {String} [before] The lowest guild ID of the next page\n    * @arg {String} [after] The highest guild ID of the previous page\n    * @returns {Promise<Guild[]>}\n    */",
      "meta": {
        "range": [
          82874,
          83264
        ],
        "filename": "Client.js",
        "lineno": 1854,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005711",
          "name": "Client#getRESTGuilds",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The max number of guilds to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The lowest guild ID of the next page",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest guild ID of the previous page",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Guild>>"
            ]
          }
        }
      ],
      "name": "getRESTGuilds",
      "longname": "Client#getRESTGuilds",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000425",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[] | NewsChannel[])>}\n    */",
      "meta": {
        "range": [
          83519,
          83862
        ],
        "filename": "Client.js",
        "lineno": 1870,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005770",
          "name": "Client#getRESTGuildChannels",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>|Array.<NewsChannel>)>"
            ]
          }
        }
      ],
      "name": "getRESTGuildChannels",
      "longname": "Client#getRESTGuildChannels",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000429",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
      "meta": {
        "range": [
          84087,
          84338
        ],
        "filename": "Client.js",
        "lineno": 1883,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005822",
          "name": "Client#getRESTGuildEmojis",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "An array of guild emoji objects"
        }
      ],
      "name": "getRESTGuildEmojis",
      "longname": "Client#getRESTGuildEmojis",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000430",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
      "meta": {
        "range": [
          84590,
          84857
        ],
        "filename": "Client.js",
        "lineno": 1896,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005857",
          "name": "Client#getRESTGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An emoji object"
        }
      ],
      "name": "getRESTGuildEmoji",
      "longname": "Client#getRESTGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000431",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
      "meta": {
        "range": [
          85195,
          85607
        ],
        "filename": "Client.js",
        "lineno": 1910,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005894",
          "name": "Client#getRESTGuildMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "limit",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The max number of members to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest user ID of the previous page",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Member>>"
            ]
          }
        }
      ],
      "name": "getRESTGuildMembers",
      "longname": "Client#getRESTGuildMembers",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000432",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
      "meta": {
        "range": [
          85849,
          86189
        ],
        "filename": "Client.js",
        "lineno": 1926,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005958",
          "name": "Client#getRESTGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Member>"
            ]
          }
        }
      ],
      "name": "getRESTGuildMember",
      "longname": "Client#getRESTGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000435",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Role[]>}\n    */",
      "meta": {
        "range": [
          86379,
          86687
        ],
        "filename": "Client.js",
        "lineno": 1938,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006011",
          "name": "Client#getRESTGuildRoles",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Role>>"
            ]
          }
        }
      ],
      "name": "getRESTGuildRoles",
      "longname": "Client#getRESTGuildRoles",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000436",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a user's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<User>}\n    */",
      "meta": {
        "range": [
          86871,
          87142
        ],
        "filename": "Client.js",
        "lineno": 1950,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006061",
          "name": "Client#getRESTUser",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a user's data via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<User>"
            ]
          }
        }
      ],
      "name": "getRESTUser",
      "longname": "Client#getRESTUser",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000437",
      "___s": true
    },
    {
      "comment": "/**\n    * Search a channel's messages\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
      "meta": {
        "range": [
          89168,
          90111
        ],
        "filename": "Client.js",
        "lineno": 1989,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006105",
          "name": "Client#searchChannelMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "query"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Search a channel's messages",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Search parameters",
          "name": "query"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"timestamp\"",
          "description": "What to sort by, either \"timestamp\" or \"relevance\"",
          "name": "query.sortBy"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"desc\"",
          "description": "What order to sort by, either \"asc\" or \"desc\"",
          "name": "query.sortOrder"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by a content string",
          "name": "query.content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by an author ID",
          "name": "query.authorID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The minimum message ID to return results for",
          "name": "query.minID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The maximum message ID to return results for",
          "name": "query.maxID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 25,
          "description": "How many messages to return, 1 <= limit <= 25",
          "name": "query.limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
          "name": "query.offset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
          "name": "query.contextSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
          "name": "query.has"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed provider",
          "name": "query.embedProviders"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed type",
          "name": "query.embedTypes"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment extension",
          "name": "query.attachmentExtensions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment filename",
          "name": "query.attachmentFilename"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
        }
      ],
      "name": "searchChannelMessages",
      "longname": "Client#searchChannelMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000438",
      "___s": true
    },
    {
      "comment": "/**\n    * Search a guild's messages\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @arg {String[]} [query.channelIDs] Filter results by channel ID\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
      "meta": {
        "range": [
          92201,
          93178
        ],
        "filename": "Client.js",
        "lineno": 2044,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006215",
          "name": "Client#searchGuildMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "query"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Search a guild's messages",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Search parameters",
          "name": "query"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"timestamp\"",
          "description": "What to sort by, either \"timestamp\" or \"relevance\"",
          "name": "query.sortBy"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"desc\"",
          "description": "What order to sort by, either \"asc\" or \"desc\"",
          "name": "query.sortOrder"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by a content string",
          "name": "query.content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by an author ID",
          "name": "query.authorID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The minimum message ID to return results for",
          "name": "query.minID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The maximum message ID to return results for",
          "name": "query.maxID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 25,
          "description": "How many messages to return, 1 <= limit <= 25",
          "name": "query.limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
          "name": "query.offset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
          "name": "query.contextSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
          "name": "query.has"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed provider",
          "name": "query.embedProviders"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed type",
          "name": "query.embedTypes"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment extension",
          "name": "query.attachmentExtensions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment filename",
          "name": "query.attachmentFilename"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Filter results by channel ID",
          "name": "query.channelIDs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
        }
      ],
      "name": "searchGuildMessages",
      "longname": "Client#searchGuildMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000455",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/home/runner/work/eris-docs/eris-docs/eris/lib/Client.js"
      ],
      "___id": "T000002R000476",
      "___s": true
    }
  ]
}