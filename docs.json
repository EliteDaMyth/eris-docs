{
  "docs": [
    {
      "comment": "/**\n    * Create a Client\n    * @arg {String} token bot token\n    * @arg {Object} [options] Eris options (all options are optional)\n    * @arg {Boolean} [options.autoreconnect=true] Have Eris autoreconnect when connection is lost\n    * @arg {Boolean} [options.compress=false] Whether to request WebSocket data to be compressed or not\n    * @arg {Number} [options.connectionTimeout=30000] How long in milliseconds to wait for the connection to handshake with the server\n    * @arg {Object} [options.disableEvents] If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)\n    * @arg {Boolean} [options.disableEveryone=true] When true, filter out @everyone/@here by default in createMessage/editMessage\n    * @arg {Number} [options.firstShardID=0] The ID of the first shard to run for this client\n    * @arg {Boolean} [options.getAllUsers=false] Get all the users in every guild. Ready time will be severely delayed\n    * @arg {Number} [options.guildCreateTimeout=2000] How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds\n    * @arg {Boolean} [options.guildSubscriptions=true] If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching\n    * @arg {Number} [options.largeThreshold=250] The maximum number of offline users per guild during initial guild data transmission\n    * @arg {Number} [options.latencyThreshold=30000] The average request latency at which Eris will start emitting latency errors\n    * @arg {Number} [options.lastShardID=options.maxShards - 1] The ID of the last shard to run for this client\n    * @arg {Number | String} [options.maxShards=1] The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.\n    * @arg {Number} [options.messageLimit=100] The maximum size of a channel message cache\n    * @arg {Boolean} [options.opusOnly=false] Whether to suppress the node-opus not found error or not\n    * @arg {Number} [options.ratelimiterOffset=0] A number of milliseconds to offset the ratelimit timing calculations by\n    * @arg {Number} [options.requestTimeout=15000] A number of milliseconds before requests are considered timed out\n    * @arg {Boolean} [options.restMode=false] Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode\n    * @arg {Boolean} [options.seedVoiceConnections=false] Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions\n    * @arg {String} [options.defaultImageFormat=\"jpg\"] The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"\n    * @arg {Number} [options.defaultImageSize=128] The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that\n    * @arg {Object} [options.ws] An object of WebSocket options to pass to the shard WebSocket constructors\n    * @arg {Object} [options.agent] A HTTP Agent used to proxy requests\n    * @arg {Number} [options.maxReconnectAttempts=Infinity] The maximum amount of times that the client is allowed to try to reconnect to Discord.\n    * @arg {Function} [options.reconnectDelay] A function which returns how long the bot should wait until reconnecting to Discord.\n    */",
      "meta": {
        "range": [
          7174,
          10419
        ],
        "filename": "Client.js",
        "lineno": 102,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000198",
          "name": "Client",
          "type": "MethodDefinition",
          "paramnames": [
            "token",
            "options"
          ]
        }
      },
      "name": "Client",
      "longname": "Client",
      "kind": "class",
      "description": "Create a Client",
      "scope": "global",
      "classdesc": "Represents the main Eris client",
      "augments": [
        "EventEmitter"
      ],
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "bot token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Eris options (all options are optional)",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Have Eris autoreconnect when connection is lost",
          "name": "options.autoreconnect"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to request WebSocket data to be compressed or not",
          "name": "options.compress"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 30000,
          "description": "How long in milliseconds to wait for the connection to handshake with the server",
          "name": "options.connectionTimeout"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)",
          "name": "options.disableEvents"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "When true, filter out @everyone/@here by default in createMessage/editMessage",
          "name": "options.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The ID of the first shard to run for this client",
          "name": "options.firstShardID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Get all the users in every guild. Ready time will be severely delayed",
          "name": "options.getAllUsers"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2000,
          "description": "How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds",
          "name": "options.guildCreateTimeout"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching",
          "name": "options.guildSubscriptions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 250,
          "description": "The maximum number of offline users per guild during initial guild data transmission",
          "name": "options.largeThreshold"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 30000,
          "description": "The average request latency at which Eris will start emitting latency errors",
          "name": "options.latencyThreshold"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "options.maxShards - 1",
          "description": "The ID of the last shard to run for this client",
          "name": "options.lastShardID"
        },
        {
          "type": {
            "names": [
              "Number",
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.",
          "name": "options.maxShards"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum size of a channel message cache",
          "name": "options.messageLimit"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to suppress the node-opus not found error or not",
          "name": "options.opusOnly"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "A number of milliseconds to offset the ratelimit timing calculations by",
          "name": "options.ratelimiterOffset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 15000,
          "description": "A number of milliseconds before requests are considered timed out",
          "name": "options.requestTimeout"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode",
          "name": "options.restMode"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions",
          "name": "options.seedVoiceConnections"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"jpg\"",
          "description": "The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"",
          "name": "options.defaultImageFormat"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 128,
          "description": "The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that",
          "name": "options.defaultImageSize"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object of WebSocket options to pass to the shard WebSocket constructors",
          "name": "options.ws"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A HTTP Agent used to proxy requests",
          "name": "options.agent"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "Infinity",
          "description": "The maximum amount of times that the client is allowed to try to reconnect to Discord.",
          "name": "options.maxReconnectAttempts"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function which returns how long the bot should wait until reconnecting to Discord.",
          "name": "options.reconnectDelay"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The bot user token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "nullable": true,
          "description": "Whether the bot user belongs to an OAuth2 application",
          "name": "bot"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Eris options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping channel IDs to guild IDs",
          "name": "channelGuildMap"
        },
        {
          "type": {
            "names": [
              "Collection.<Shard>"
            ]
          },
          "description": "Collection of shards Eris is using",
          "name": "shards"
        },
        {
          "type": {
            "names": [
              "Collection.<Guild>"
            ]
          },
          "description": "Collection of guilds the bot is in",
          "name": "guilds"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping user IDs to private channel IDs",
          "name": "privateChannelMap"
        },
        {
          "type": {
            "names": [
              "Collection.<PrivateChannel>"
            ]
          },
          "description": "Collection of private channels the bot is in",
          "name": "privateChannels"
        },
        {
          "type": {
            "names": [
              "Collection.<GroupChannel>"
            ]
          },
          "description": "Collection of group channels the bot is in (user accounts only)",
          "name": "groupChannels"
        },
        {
          "type": {
            "names": [
              "Collection.<VoiceConnection>"
            ]
          },
          "description": "Extended collection of active VoiceConnections the bot has",
          "name": "voiceConnections"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping guild IDs to shard IDs",
          "name": "guildShardMap"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of bot ready event",
          "name": "startTime"
        },
        {
          "type": {
            "names": [
              "Collection.<UnavailableGuild>"
            ]
          },
          "description": "Collection of unavailable guilds the bot is in",
          "name": "unavailableGuilds"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How long in milliseconds the bot has been up for",
          "name": "uptime"
        },
        {
          "type": {
            "names": [
              "ExtendedUser"
            ]
          },
          "description": "The bot user",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Collection.<User>"
            ]
          },
          "description": "Collection of users the bot sees",
          "name": "users"
        },
        {
          "type": {
            "names": [
              "Collection.<Relationship>"
            ]
          },
          "description": "Collection of relationships the bot user has (user accounts only)",
          "name": "relationships"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping guild IDs to individual guild settings for the bot user (user accounts only)",
          "name": "userGuildSettings"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object containing the user account settings (user accounts only)",
          "name": "userSettings"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping user IDs to user notes (user accounts only)",
          "name": "notes"
        }
      ],
      "___id": "T000002R000034",
      "___s": true
    },
    {
      "comment": "/**\n    * Tells all shards to connect.\n    * @returns {Promise} Resolves when all shards are initialized\n    */",
      "meta": {
        "range": [
          10632,
          12379
        ],
        "filename": "Client.js",
        "lineno": 194,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000644",
          "name": "Client#connect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Tells all shards to connect.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Resolves when all shards are initialized"
        }
      ],
      "name": "connect",
      "longname": "Client#connect",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000092",
      "___s": true
    },
    {
      "comment": "/**\n    * Get info on connecting to the Discord gateway\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
      "meta": {
        "range": [
          12544,
          12634
        ],
        "filename": "Client.js",
        "lineno": 241,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000899",
          "name": "Client#getGateway",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get info on connecting to the Discord gateway",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an object containing gateway connection info"
        }
      ],
      "name": "getGateway",
      "longname": "Client#getGateway",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000104",
      "___s": true
    },
    {
      "comment": "/**\n    * Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
      "meta": {
        "range": [
          12852,
          13056
        ],
        "filename": "Client.js",
        "lineno": 249,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000914",
          "name": "Client#getBotGateway",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an object containing gateway connection info"
        }
      ],
      "name": "getBotGateway",
      "longname": "Client#getBotGateway",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000105",
      "___s": true
    },
    {
      "comment": "/**\n    * Disconnects all shards\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
      "meta": {
        "range": [
          13318,
          13504
        ],
        "filename": "Client.js",
        "lineno": 261,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000950",
          "name": "Client#disconnect",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Disconnects all shards",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "Shard disconnect options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String",
              "Boolean"
            ]
          },
          "optional": true,
          "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
          "name": "options.reconnect"
        }
      ],
      "name": "disconnect",
      "longname": "Client#disconnect",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000107",
      "___s": true
    },
    {
      "comment": "/**\n    * Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID\n    * @arg {String} channelID The ID of the voice channel\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
      "meta": {
        "range": [
          14119,
          15072
        ],
        "filename": "Client.js",
        "lineno": 277,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000985",
          "name": "Client#joinVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "VoiceConnection constructor options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Whether the VoiceConnection will be part of a SharedStream or not",
          "name": "options.shared"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
          "name": "options.opusOnly"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<VoiceConnection>"
            ]
          },
          "description": "Resolves with a VoiceConnection"
        }
      ],
      "name": "joinVoiceChannel",
      "longname": "Client#joinVoiceChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000110",
      "___s": true
    },
    {
      "comment": "/**\n    * Leaves a voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
      "meta": {
        "range": [
          15180,
          15375
        ],
        "filename": "Client.js",
        "lineno": 301,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001121",
          "name": "Client#leaveVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Leaves a voice channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        }
      ],
      "name": "leaveVoiceChannel",
      "longname": "Client#leaveVoiceChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000117",
      "___s": true
    },
    {
      "comment": "/**\n    * Closes a voice connection with a guild ID\n    * @arg {String} guildID The ID of the guild\n    */",
      "meta": {
        "range": [
          15492,
          15837
        ],
        "filename": "Client.js",
        "lineno": 312,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001148",
          "name": "Client#closeVoiceConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Closes a voice connection with a guild ID",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "name": "closeVoiceConnection",
      "longname": "Client#closeVoiceConnection",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000118",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
      "meta": {
        "range": [
          16019,
          16160
        ],
        "filename": "Client.js",
        "lineno": 326,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001196",
          "name": "Client#editAFK",
          "type": "MethodDefinition",
          "paramnames": [
            "afk"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the bot user is AFK or not",
          "name": "afk"
        }
      ],
      "name": "editAFK",
      "longname": "Client#editAFK",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000123",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's status on all guilds\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
      "meta": {
        "range": [
          16657,
          17075
        ],
        "filename": "Client.js",
        "lineno": 342,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001227",
          "name": "Client#editStatus",
          "type": "MethodDefinition",
          "paramnames": [
            "status",
            "game"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update the bot's status on all guilds",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Sets the bot's active game, null to clear",
          "name": "game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Sets the name of the bot's active game",
          "name": "game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching",
          "name": "game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the url of the shard's active game",
          "name": "game.url"
        }
      ],
      "name": "editStatus",
      "longname": "Client#editStatus",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000125",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a Channel object from a channel ID\n    * @arg {String} channelID The ID of the channel\n    * @returns {CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel}\n    */",
      "meta": {
        "range": [
          17301,
          17721
        ],
        "filename": "Client.js",
        "lineno": 364,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001292",
          "name": "Client#getChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a Channel object from a channel ID",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "CategoryChannel",
              "GroupChannel",
              "PrivateChannel",
              "TextChannel",
              "VoiceChannel",
              "NewsChannel"
            ]
          }
        }
      ],
      "name": "getChannel",
      "longname": "Client#getChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000130",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel in a guild\n    * @arg {String} guildID The ID of the guild to create the channel in\n    * @arg {String} name The name of the channel\n    * @arg {String} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
      "meta": {
        "range": [
          19112,
          20405
        ],
        "filename": "Client.js",
        "lineno": 391,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001361",
          "name": "Client#createChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "name",
            "type",
            "reason",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the channel in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object",
              "String"
            ]
          },
          "optional": true,
          "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent category channel for this channel",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing permission overwrite objects",
          "name": "options.permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "options.reason"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (voice channels only)",
          "name": "options.userLimit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
            ]
          }
        }
      ],
      "name": "createChannel",
      "longname": "Client#createChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000131",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a channel's properties\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel (guild channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {String?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | GroupChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          21753,
          22326
        ],
        "filename": "Client.js",
        "lineno": 436,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001494",
          "name": "Client#editChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a channel's properties",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the channel owner (group channels only)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel (guild channels only)",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|GroupChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "name": "editChannel",
      "longname": "Client#editChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000148",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          22604,
          23744
        ],
        "filename": "Client.js",
        "lineno": 457,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001565",
          "name": "Client#editChannelPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editChannelPosition",
      "longname": "Client#editChannelPosition",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000159",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild channel, or leave a private or group channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          23978,
          24140
        ],
        "filename": "Client.js",
        "lineno": 491,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001747",
          "name": "Client#deleteChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild channel, or leave a private or group channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteChannel",
      "longname": "Client#deleteChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000167",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24276,
          24407
        ],
        "filename": "Client.js",
        "lineno": 502,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001770",
          "name": "Client#sendChannelTyping",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Send typing status in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "sendChannelTyping",
      "longname": "Client#sendChannelTyping",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000169",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} channelID The ID of channel\n    * @arg {String} overwriteID The ID of the overwritten user or role (everyone role ID = guild ID)\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24945,
          25223
        ],
        "filename": "Client.js",
        "lineno": 516,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001789",
          "name": "Client#editChannelPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel permission overwrite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role (everyone role ID = guild ID)",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editChannelPermission",
      "longname": "Client#editChannelPermission",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000170",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          25506,
          25715
        ],
        "filename": "Client.js",
        "lineno": 532,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001823",
          "name": "Client#deleteChannelPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a channel permission overwrite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteChannelPermission",
      "longname": "Client#deleteChannelPermission",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000175",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          25858,
          26058
        ],
        "filename": "Client.js",
        "lineno": 543,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001848",
          "name": "Client#getChannelInvites",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getChannelInvites",
      "longname": "Client#getChannelInvites",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000177",
      "___s": true
    },
    {
      "comment": "/**\n    * Create an invite for a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          26640,
          27033
        ],
        "filename": "Client.js",
        "lineno": 558,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001882",
          "name": "Client#createChannelInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create an invite for a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Invite generation options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How long the invite should last in seconds",
          "name": "options.maxAge"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How many uses the invite should last for",
          "name": "options.maxUses"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is temporary or not",
          "name": "options.temporary"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is unique or not",
          "name": "options.unique"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "createChannelInvite",
      "longname": "Client#createChannelInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000178",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in a channel\n    * @arg {String} channelID The ID of the channel to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          27243,
          27376
        ],
        "filename": "Client.js",
        "lineno": 573,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001933",
          "name": "Client#getChannelWebhooks",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the webhooks in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel to get webhooks for",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "name": "getChannelWebhooks",
      "longname": "Client#getChannelWebhooks",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000184",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          27631,
          27808
        ],
        "filename": "Client.js",
        "lineno": 583,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001952",
          "name": "Client#getWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "getWebhook",
      "longname": "Client#getWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000185",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel webhook\n    * @arg {String} channelID The ID of the channel to create the webhook in\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          28300,
          28495
        ],
        "filename": "Client.js",
        "lineno": 596,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001981",
          "name": "Client#createChannelWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel to create the webhook in",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "createChannelWebhook",
      "longname": "Client#createChannelWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000186",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} [options.name] The new default name\n    * @arg {String} [options.avatar] The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          29062,
          29301
        ],
        "filename": "Client.js",
        "lineno": 611,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002009",
          "name": "Client#editWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "options",
            "token",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "editWebhook",
      "longname": "Client#editWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000188",
      "___s": true
    },
    {
      "comment": "/**\n    * Execute a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Webhook execution options\n    * @arg {String} [options.content=\"\"] A content string\n    * @arg {Object | Object[]} [options.file] A file object (or an Array of them)\n    * @arg {Buffer} options.file.file A buffer containing file data\n    * @arg {String} options.file.name What to name the file\n    * @arg {Object[]} [options.embeds] An array of Discord embeds\n    * @arg {String} [options.username] A custom username, defaults to webhook default username if not specified\n    * @arg {String} [options.avatarURL] A URL for a custom avatar, defaults to webhook default avatar if not specified\n    * @arg {Boolean} [options.tts=false] Whether the message should be a TTS message or not\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Boolean} [options.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @returns {Promise<Message?>}\n    */",
      "meta": {
        "range": [
          30413,
          31346
        ],
        "filename": "Client.js",
        "lineno": 633,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002047",
          "name": "Client#executeWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Execute a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The token of the webhook",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook execution options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"\"",
          "description": "A content string",
          "name": "options.content"
        },
        {
          "type": {
            "names": [
              "Object",
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "A file object (or an Array of them)",
          "name": "options.file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "options.file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "options.file.name"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "An array of Discord embeds",
          "name": "options.embeds"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "A custom username, defaults to webhook default username if not specified",
          "name": "options.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "A URL for a custom avatar, defaults to webhook default avatar if not specified",
          "name": "options.avatarURL"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether the message should be a TTS message or not",
          "name": "options.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to wait for the server to confirm the message create or not",
          "name": "options.wait"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "options.disableEveryone"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<?Message>"
            ]
          }
        }
      ],
      "name": "executeWebhook",
      "longname": "Client#executeWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000190",
      "___s": true
    },
    {
      "comment": "/**\n    * Execute a slack-style webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Slack webhook options\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          31691,
          32010
        ],
        "filename": "Client.js",
        "lineno": 657,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002184",
          "name": "Client#executeSlackWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Execute a slack-style webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The token of the webhook",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Slack webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to wait for the server to confirm the message create or not",
          "name": "options.wait"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "executeSlackWebhook",
      "longname": "Client#executeSlackWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000197",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          32299,
          32522
        ],
        "filename": "Client.js",
        "lineno": 670,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002234",
          "name": "Client#deleteWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a webhook",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteWebhook",
      "longname": "Client#deleteWebhook",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000200",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in a guild\n    * @arg {String} guildID The ID of the guild to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          32726,
          32851
        ],
        "filename": "Client.js",
        "lineno": 681,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002267",
          "name": "Client#getGuildWebhooks",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the webhooks in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to get webhooks for",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "name": "getGuildWebhooks",
      "longname": "Client#getGuildWebhooks",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000202",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {String} guildID The ID of the guild to get audit logs for\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with {users: Users[], entries: GuildAuditLogEntry[]}\n    */",
      "meta": {
        "range": [
          33270,
          33828
        ],
        "filename": "Client.js",
        "lineno": 693,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002286",
          "name": "Client#getGuildAuditLogs",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "limit",
            "before",
            "actionType"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the audit logs for a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to get audit logs for",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The maximum number of entries to return",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get entries before this entry ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Filter entries by action type",
          "name": "actionType"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {users: Users[], entries: GuildAuditLogEntry[]}"
        }
      ],
      "name": "getGuildAuditLogs",
      "longname": "Client#getGuildAuditLogs",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000203",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild emoji object\n    * @arg {String} guildID The ID of the guild to create the emoji in\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          34307,
          34490
        ],
        "filename": "Client.js",
        "lineno": 717,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002365",
          "name": "Client#createGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild emoji object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The base 64 encoded string",
          "name": "options.image"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "name": "createGuildEmoji",
      "longname": "Client#createGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000210",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild emoji object\n    * @arg {String} guildID The ID of the guild to edit the emoji in\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          34973,
          35172
        ],
        "filename": "Client.js",
        "lineno": 732,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002393",
          "name": "Client#editGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild emoji object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to edit the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji you want to modify",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "name": "editGuildEmoji",
      "longname": "Client#editGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000212",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild emoji object\n    * @arg {String} guildID The ID of the guild to delete the emoji in\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          35441,
          35624
        ],
        "filename": "Client.js",
        "lineno": 744,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002423",
          "name": "Client#deleteGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild emoji object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to delete the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteGuildEmoji",
      "longname": "Client#deleteGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000214",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {Object} [options] The properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          36293,
          36700
        ],
        "filename": "Client.js",
        "lineno": 762,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002448",
          "name": "Client#createRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the role in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The properties to set",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "createRole",
      "longname": "Client#createRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000216",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild role\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          37405,
          37652
        ],
        "filename": "Client.js",
        "lineno": 787,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002509",
          "name": "Client#editRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild the role is in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "editRole",
      "longname": "Client#editRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000219",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          37978,
          39011
        ],
        "filename": "Client.js",
        "lineno": 799,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002554",
          "name": "Client#editRolePosition",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild the role is in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the role",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editRolePosition",
      "longname": "Client#editRolePosition",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000221",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          39269,
          39443
        ],
        "filename": "Client.js",
        "lineno": 832,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002732",
          "name": "Client#deleteRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the role in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteRole",
      "longname": "Client#deleteRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000229",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the prune count for a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @returns {Promise<Number>} Resolves with the number of users that would be pruned\n    */",
      "meta": {
        "range": [
          39709,
          39892
        ],
        "filename": "Client.js",
        "lineno": 844,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002757",
          "name": "Client#getPruneCount",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "days"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the prune count for a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of users that would be pruned"
        }
      ],
      "name": "getPruneCount",
      "longname": "Client#getPruneCount",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000231",
      "___s": true
    },
    {
      "comment": "/**\n    * Begin pruning a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of pruned users\n    */",
      "meta": {
        "range": [
          40204,
          40415
        ],
        "filename": "Client.js",
        "lineno": 857,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002788",
          "name": "Client#pruneMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "days",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Begin pruning a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of pruned users"
        }
      ],
      "name": "pruneMembers",
      "longname": "Client#pruneMembers",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000233",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of general/guild-specific voice regions\n    * @arg {String} [guildID] The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
      "meta": {
        "range": [
          40625,
          40832
        ],
        "filename": "Client.js",
        "lineno": 869,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002822",
          "name": "Client#getVoiceRegions",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of general/guild-specific voice regions",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of voice region objects"
        }
      ],
      "name": "getVoiceRegions",
      "longname": "Client#getVoiceRegions",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000236",
      "___s": true
    },
    {
      "comment": "/**\n    * Get info on an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {Boolean} [withCounts] Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          41118,
          41334
        ],
        "filename": "Client.js",
        "lineno": 879,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002854",
          "name": "Client#getInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID",
            "withCounts"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get info on an invite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)",
          "name": "withCounts"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "getInvite",
      "longname": "Client#getInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000237",
      "___s": true
    },
    {
      "comment": "/**\n    * Accept an invite (not for bot accounts)\n    * @arg {String} inviteID The ID of the invite\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          41484,
          41643
        ],
        "filename": "Client.js",
        "lineno": 890,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002886",
          "name": "Client#acceptInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Accept an invite (not for bot accounts)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "acceptInvite",
      "longname": "Client#acceptInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000239",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          41832,
          41990
        ],
        "filename": "Client.js",
        "lineno": 900,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002914",
          "name": "Client#deleteInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete an invite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteInvite",
      "longname": "Client#deleteInvite",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000240",
      "___s": true
    },
    {
      "comment": "/**\n    * Get properties of the bot user\n    * @returns {Promise<ExtendedUser>}\n    */",
      "meta": {
        "range": [
          42087,
          42229
        ],
        "filename": "Client.js",
        "lineno": 910,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002937",
          "name": "Client#getSelf",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get properties of the bot user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<ExtendedUser>"
            ]
          }
        }
      ],
      "name": "getSelf",
      "longname": "Client#getSelf",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000242",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit properties of the bot user\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.username] The new username\n    * @arg {String} [options.avatar] The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<ExtendedUser>}\n    */",
      "meta": {
        "range": [
          42567,
          42728
        ],
        "filename": "Client.js",
        "lineno": 921,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002964",
          "name": "Client#editSelf",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit properties of the bot user",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new username",
          "name": "options.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<ExtendedUser>"
            ]
          }
        }
      ],
      "name": "editSelf",
      "longname": "Client#editSelf",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000243",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a DM channel with a user, or create one if it does not exist\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          42907,
          43308
        ],
        "filename": "Client.js",
        "lineno": 930,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002993",
          "name": "Client#getDMChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a DM channel with a user, or create one if it does not exist",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "name": "getDMChannel",
      "longname": "Client#getDMChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000244",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a group channel with other users\n    * @arg {String[]} userIDs The IDs of the other users\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          43473,
          43729
        ],
        "filename": "Client.js",
        "lineno": 945,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003050",
          "name": "Client#createGroupChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "userIDs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a group channel with other users",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the other users",
          "name": "userIDs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "name": "createGroupChannel",
      "longname": "Client#createGroupChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000247",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          43930,
          44122
        ],
        "filename": "Client.js",
        "lineno": 958,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003083",
          "name": "Client#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a previous message in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "getMessage",
      "longname": "Client#getMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000250",
      "___s": true
    },
    {
      "comment": "/**\n    * Get previous messages in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          44563,
          46462
        ],
        "filename": "Client.js",
        "lineno": 971,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003113",
          "name": "Client#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get previous messages in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getMessages",
      "longname": "Client#getMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000251",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          46607,
          46799
        ],
        "filename": "Client.js",
        "lineno": 1014,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003381",
          "name": "Client#getPins",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the pins in a channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getPins",
      "longname": "Client#getPins",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000265",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in a channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user\n    * @arg {String} channelID The ID of the channel\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object | Object[]} [file] A file object (or an Array of them)\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          47793,
          48901
        ],
        "filename": "Client.js",
        "lineno": 1032,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003415",
          "name": "Client#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a message in a channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object",
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "A file object (or an Array of them)",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "createMessage",
      "longname": "Client#createMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000266",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          49797,
          50832
        ],
        "filename": "Client.js",
        "lineno": 1063,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003567",
          "name": "Client#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "editMessage",
      "longname": "Client#editMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000271",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          51002,
          51144
        ],
        "filename": "Client.js",
        "lineno": 1087,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003710",
          "name": "Client#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Pin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "pinMessage",
      "longname": "Client#pinMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000276",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          51316,
          51463
        ],
        "filename": "Client.js",
        "lineno": 1097,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003731",
          "name": "Client#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unpin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unpinMessage",
      "longname": "Client#unpinMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000277",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          51980,
          52453
        ],
        "filename": "Client.js",
        "lineno": 1111,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003752",
          "name": "Client#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of users who reacted with a specific reaction",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "name": "getMessageReaction",
      "longname": "Client#getMessageReaction",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000278",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          52816,
          53139
        ],
        "filename": "Client.js",
        "lineno": 1130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003815",
          "name": "Client#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a reaction to a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addMessageReaction",
      "longname": "Client#addMessageReaction",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000283",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          53522,
          53851
        ],
        "filename": "Client.js",
        "lineno": 1145,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003855",
          "name": "Client#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a reaction from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReaction",
      "longname": "Client#removeMessageReaction",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000285",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54043,
          54214
        ],
        "filename": "Client.js",
        "lineno": 1158,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003895",
          "name": "Client#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove all reactions from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReactions",
      "longname": "Client#removeMessageReactions",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000287",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54457,
          54649
        ],
        "filename": "Client.js",
        "lineno": 1169,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003916",
          "name": "Client#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessage",
      "longname": "Client#deleteMessage",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000288",
      "___s": true
    },
    {
      "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54928,
          55982
        ],
        "filename": "Client.js",
        "lineno": 1182,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003941",
          "name": "Client#deleteMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageIDs",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Bulk delete messages (bot accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of message IDs to delete",
          "name": "messageIDs"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessages",
      "longname": "Client#deleteMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000290",
      "___s": true
    },
    {
      "comment": "/**\n    * Purge previous messages in a channel with an optional filter (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
      "meta": {
        "range": [
          56544,
          58602
        ],
        "filename": "Client.js",
        "lineno": 1217,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004073",
          "name": "Client#purgeChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "limit",
            "filter",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Purge previous messages in a channel with an optional filter (bot accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of messages to search through, -1 for no limit",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional filter function that returns a boolean when passed a Message object",
          "name": "filter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of messages deleted"
        }
      ],
      "name": "purgeChannel",
      "longname": "Client#purgeChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000297",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's embed object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild embed object\n    */",
      "meta": {
        "range": [
          58758,
          58877
        ],
        "filename": "Client.js",
        "lineno": 1280,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004340",
          "name": "Client#getGuildEmbed",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's embed object",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild embed object"
        }
      ],
      "name": "getGuildEmbed",
      "longname": "Client#getGuildEmbed",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000311",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of integrations for a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
      "meta": {
        "range": [
          59036,
          59317
        ],
        "filename": "Client.js",
        "lineno": 1289,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004359",
          "name": "Client#getGuildIntegrations",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of integrations for a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<GuildIntegration>>"
            ]
          }
        }
      ],
      "name": "getGuildIntegrations",
      "longname": "Client#getGuildIntegrations",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000312",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          59862,
          60215
        ],
        "filename": "Client.js",
        "lineno": 1304,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004403",
          "name": "Client#editGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild integration",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "What to do when a user's subscription runs out",
          "name": "options.expireBehavior"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "How long before the integration's role is removed from an unsubscribed user",
          "name": "options.expireGracePeriod"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Whether to enable integration emoticons or not",
          "name": "options.enableEmoticons"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editGuildIntegration",
      "longname": "Client#editGuildIntegration",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000314",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          60402,
          60569
        ],
        "filename": "Client.js",
        "lineno": 1318,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004438",
          "name": "Client#deleteGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild integration",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteGuildIntegration",
      "longname": "Client#deleteGuildIntegration",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000318",
      "___s": true
    },
    {
      "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          60763,
          60931
        ],
        "filename": "Client.js",
        "lineno": 1328,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004459",
          "name": "Client#syncGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Force a guild integration to sync",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "syncGuildIntegration",
      "longname": "Client#syncGuildIntegration",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000319",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          61068,
          61260
        ],
        "filename": "Client.js",
        "lineno": 1337,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004480",
          "name": "Client#getGuildInvites",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getGuildInvites",
      "longname": "Client#getGuildInvites",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000320",
      "___s": true
    },
    {
      "comment": "/**\n    * Returns the vanity url of the guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          61396,
          61521
        ],
        "filename": "Client.js",
        "lineno": 1346,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004514",
          "name": "Client#getGuildVanity",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the vanity url of the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "getGuildVanity",
      "longname": "Client#getGuildVanity",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000321",
      "___s": true
    },
    {
      "comment": "/**\n    * Ban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for, between 0-7 inclusive\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          61864,
          62377
        ],
        "filename": "Client.js",
        "lineno": 1358,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004533",
          "name": "Client#banGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "deleteMessageDays",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Ban a user from a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of days to delete messages for, between 0-7 inclusive",
          "name": "deleteMessageDays"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "banGuildMember",
      "longname": "Client#banGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000322",
      "___s": true
    },
    {
      "comment": "/**\n    * Unban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          62619,
          62798
        ],
        "filename": "Client.js",
        "lineno": 1375,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004588",
          "name": "Client#unbanGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unban a user from a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unbanGuildMember",
      "longname": "Client#unbanGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000325",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild\n    * @arg {String} name The name of the guild\n    * @arg {String} region The region of the guild\n    * @arg {String} [icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          63093,
          63323
        ],
        "filename": "Client.js",
        "lineno": 1388,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004613",
          "name": "Client#createGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "name",
            "region",
            "icon"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the guild",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The region of the guild",
          "name": "region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "icon",
          "defaultvalue": null
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "createGuild",
      "longname": "Client#createGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000327",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the user to transfer server ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.description] The description for the guild (VIP only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          65002,
          65818
        ],
        "filename": "Client.js",
        "lineno": 1416,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004650",
          "name": "Client#editGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The region of the guild",
          "name": "options.region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The guild verification level",
          "name": "options.verificationLevel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
          "name": "options.defaultNotifications"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
          "name": "options.explicitContentFilter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the system channel",
          "name": "options.systemChannelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the AFK voice channel",
          "name": "options.afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The AFK timeout in seconds",
          "name": "options.afkTimeout"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the user to transfer server ownership to (bot user must be owner)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.banner"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The description for the guild (VIP only)",
          "name": "options.description"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "editGuild",
      "longname": "Client#editGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000331",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          66011,
          66286
        ],
        "filename": "Client.js",
        "lineno": 1440,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004735",
          "name": "Client#getGuildBans",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the ban list of a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of {reason: String, user: User}"
        }
      ],
      "name": "getGuildBans",
      "longname": "Client#getGuildBans",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000346",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          66529,
          66760
        ],
        "filename": "Client.js",
        "lineno": 1455,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004781",
          "name": "Client#getGuildBan",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a ban from the ban list of a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the banned user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {reason: String, user: User}"
        }
      ],
      "name": "getGuildBan",
      "longname": "Client#getGuildBan",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000348",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          67445,
          67903
        ],
        "filename": "Client.js",
        "lineno": 1475,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004821",
          "name": "Client#editGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "The array of role IDs the member should have",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Set the member's server nickname, \"\" to remove",
          "name": "options.nick"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server mute the member",
          "name": "options.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server deafen the member",
          "name": "options.deaf"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the voice channel to move the member to (must be in voice)",
          "name": "options.channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editGuildMember",
      "longname": "Client#editGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000350",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          68198,
          68404
        ],
        "filename": "Client.js",
        "lineno": 1494,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004886",
          "name": "Client#addGuildMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a role to a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addGuildMemberRole",
      "longname": "Client#addGuildMemberRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000357",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          68704,
          68916
        ],
        "filename": "Client.js",
        "lineno": 1508,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004913",
          "name": "Client#removeGuildMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a role from a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeGuildMemberRole",
      "longname": "Client#removeGuildMemberRole",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000359",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the bot's nickname in a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} nick The nickname\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69159,
          69356
        ],
        "filename": "Client.js",
        "lineno": 1521,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004940",
          "name": "Client#editNickname",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "nick",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the bot's nickname in a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The nickname",
          "name": "nick"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editNickname",
      "longname": "Client#editNickname",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000361",
      "___s": true
    },
    {
      "comment": "/**\n    * Kick a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69597,
          69778
        ],
        "filename": "Client.js",
        "lineno": 1535,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004967",
          "name": "Client#kickGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Kick a user from a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "kickGuildMember",
      "longname": "Client#kickGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000364",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild (bot user must be owner)\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69918,
          70032
        ],
        "filename": "Client.js",
        "lineno": 1546,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004992",
          "name": "Client#deleteGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild (bot user must be owner)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteGuild",
      "longname": "Client#deleteGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000366",
      "___s": true
    },
    {
      "comment": "/**\n    * Leave a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          70146,
          70271
        ],
        "filename": "Client.js",
        "lineno": 1555,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005011",
          "name": "Client#leaveGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Leave a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "leaveGuild",
      "longname": "Client#leaveGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000367",
      "___s": true
    },
    {
      "comment": "/**\n    * Get data on an OAuth2 application\n    * @arg {String} [appID=\"@me\"] The client ID of the application to get data for. \"@me\" refers to the logged in user's own application\n    * @returns {Promise<Object>} The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure\n    */",
      "meta": {
        "range": [
          70697,
          70834
        ],
        "filename": "Client.js",
        "lineno": 1564,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005031",
          "name": "Client#getOAuthApplication",
          "type": "MethodDefinition",
          "paramnames": [
            "appID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get data on an OAuth2 application",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The client ID of the application to get data for. \"@me\" refers to the logged in user's own application",
          "name": "appID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure"
        }
      ],
      "name": "getOAuthApplication",
      "longname": "Client#getOAuthApplication",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000368",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71069,
          71261
        ],
        "filename": "Client.js",
        "lineno": 1574,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005052",
          "name": "Client#addRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "block"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a relationship with a user",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If true, block the user. Otherwise, add the user as a friend",
          "name": "block"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addRelationship",
      "longname": "Client#addRelationship",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000369",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71400,
          71538
        ],
        "filename": "Client.js",
        "lineno": 1585,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005079",
          "name": "Client#removeRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a relationship with a user",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeRelationship",
      "longname": "Client#removeRelationship",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000371",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a user to a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71720,
          71865
        ],
        "filename": "Client.js",
        "lineno": 1595,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005099",
          "name": "Client#addGroupRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "groupID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a user to a group",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target group",
          "name": "groupID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addGroupRecipient",
      "longname": "Client#addGroupRecipient",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000372",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a user from a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72052,
          72203
        ],
        "filename": "Client.js",
        "lineno": 1605,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005120",
          "name": "Client#removeGroupRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "groupID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a user from a group",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target group",
          "name": "groupID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeGroupRecipient",
      "longname": "Client#removeGroupRecipient",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000373",
      "___s": true
    },
    {
      "comment": "/**\n    * Get profile data for a user (user accounts only)\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
      "meta": {
        "range": [
          72390,
          72509
        ],
        "filename": "Client.js",
        "lineno": 1614,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005141",
          "name": "Client#getUserProfile",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get profile data for a user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's profile data."
        }
      ],
      "name": "getUserProfile",
      "longname": "Client#getUserProfile",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000374",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the current user's note for another user (user accounts only)\n    * @arg {String} userID The ID of the target user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72715,
          72872
        ],
        "filename": "Client.js",
        "lineno": 1624,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005160",
          "name": "Client#editUserNote",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "note"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the current user's note for another user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The note",
          "name": "note"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editUserNote",
      "longname": "Client#editUserNote",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000375",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the current user's note for another user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72993,
          73119
        ],
        "filename": "Client.js",
        "lineno": 1634,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005184",
          "name": "Client#deleteUserNote",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the current user's note for another user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteUserNote",
      "longname": "Client#deleteUserNote",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000377",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the connections for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's connections\n    */",
      "meta": {
        "range": [
          73264,
          73384
        ],
        "filename": "Client.js",
        "lineno": 1642,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005204",
          "name": "Client#getSelfConnections",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the connections for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's connections"
        }
      ],
      "name": "getSelfConnections",
      "longname": "Client#getSelfConnections",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000378",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a connection for the current user (user accounts only)\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @arg {Object} data The connection data\n    * @arg {Boolean} [data.friendSync] Whether to sync friends from the connection or not\n    * @arg {Number} [data.visibility] The visibility level for the connection. 0 = hidden, 1 = shown on profile\n    * @returns {Promise<Object>} The updated connection data\n    */",
      "meta": {
        "range": [
          73899,
          74156
        ],
        "filename": "Client.js",
        "lineno": 1655,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005222",
          "name": "Client#editSelfConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "platform",
            "id",
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a connection for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
          "name": "platform"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection ID",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The connection data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to sync friends from the connection or not",
          "name": "data.friendSync"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The visibility level for the connection. 0 = hidden, 1 = shown on profile",
          "name": "data.visibility"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The updated connection data"
        }
      ],
      "name": "editSelfConnection",
      "longname": "Client#editSelfConnection",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000379",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a connection for the current user (user accounts only)\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          74390,
          74549
        ],
        "filename": "Client.js",
        "lineno": 1668,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005254",
          "name": "Client#deleteSelfConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "platform",
            "id"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a connection for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
          "name": "platform"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection ID",
          "name": "id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteSelfConnection",
      "longname": "Client#deleteSelfConnection",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000382",
      "___s": true
    },
    {
      "comment": "/**\n    * Get settings for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's settings data.\n    */",
      "meta": {
        "range": [
          74690,
          74804
        ],
        "filename": "Client.js",
        "lineno": 1676,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005276",
          "name": "Client#getSelfSettings",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get settings for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's settings data."
        }
      ],
      "name": "getSelfSettings",
      "longname": "Client#getSelfSettings",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000383",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit settings for the current user (user accounts only)\n    * @arg {Object} data The user settings data\n    * @arg {Boolean} [data.convertEmoticons] Whether to convert emoticons or not (e.g. :D => 😄)\n    * @arg {Boolean} [data.detectPlatformAccounts] Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)\n    * @arg {Boolean} [data.developerMode] Whether to enable developer mode or not\n    * @arg {Boolean} [data.enableTTSCommand] Whether to respect usage of the TTS command or not\n    * @arg {Object} [data.friendSourceFlags] An object representing allowed friend request sources\n    * @arg {Boolean} [data.friendSourceFlags.all] Whether to allow friends requests from anywhere or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualFriends] Whether to allow friend requests from people with mutual friends or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualGuilds] Whether to allow friend requests from people in mutual guilds or not\n    * @arg {Array<String>} [data.guildPositions] An ordered array of guild IDs representing the guild list order in the Discord client\n    * @arg {Boolean} [data.inlineAttachmentMedia] Whether to show attachment previews or not\n    * @arg {Boolean} [data.inlineEmbedMedia] Whether to show embed images or not\n    * @arg {String} [data.locale] The locale to use for the Discord UI\n    * @arg {Boolean} [data.messageDisplayCompact] Whether to use compact mode or not\n    * @arg {Boolean} [data.renderEmbeds] Whether to show embeds or not\n    * @arg {Boolean} [data.renderReactions] Whether to show reactions or not\n    * @arg {Array<String>} [data.restrictedGuilds] An array of guild IDs where direct messages from guild members are disallowed\n    * @arg {Boolean} [data.showCurrentGame] Whether to set the user's status to the current game or not\n    * @arg {String} [data.status] The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"\n    * @arg {String} [data.theme] The theme to use for the Discord UI, either \"dark\" or \"light\"\n    * @returns {Promise<Object>} The user's settings data.\n    */",
      "meta": {
        "range": [
          76923,
          78350
        ],
        "filename": "Client.js",
        "lineno": 1704,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005294",
          "name": "Client#editSelfSettings",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit settings for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The user settings data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to convert emoticons or not (e.g. :D => 😄)",
          "name": "data.convertEmoticons"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)",
          "name": "data.detectPlatformAccounts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to enable developer mode or not",
          "name": "data.developerMode"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to respect usage of the TTS command or not",
          "name": "data.enableTTSCommand"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object representing allowed friend request sources",
          "name": "data.friendSourceFlags"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friends requests from anywhere or not",
          "name": "data.friendSourceFlags.all"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friend requests from people with mutual friends or not",
          "name": "data.friendSourceFlags.mutualFriends"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friend requests from people in mutual guilds or not",
          "name": "data.friendSourceFlags.mutualGuilds"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An ordered array of guild IDs representing the guild list order in the Discord client",
          "name": "data.guildPositions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show attachment previews or not",
          "name": "data.inlineAttachmentMedia"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show embed images or not",
          "name": "data.inlineEmbedMedia"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The locale to use for the Discord UI",
          "name": "data.locale"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to use compact mode or not",
          "name": "data.messageDisplayCompact"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show embeds or not",
          "name": "data.renderEmbeds"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show reactions or not",
          "name": "data.renderReactions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of guild IDs where direct messages from guild members are disallowed",
          "name": "data.restrictedGuilds"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to set the user's status to the current game or not",
          "name": "data.showCurrentGame"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"",
          "name": "data.status"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The theme to use for the Discord UI, either \"dark\" or \"light\"",
          "name": "data.theme"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's settings data."
        }
      ],
      "name": "editSelfSettings",
      "longname": "Client#editSelfSettings",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000384",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the MFA backup codes for the current user (user accounts only)\n    * @arg {String} password The password for the current user\n    * @arg {Boolean} [regenerate] Whether to regenerate the MFA backup codes or not\n    * @returns {Promise<Object>} The user's MFA codes\n    */",
      "meta": {
        "range": [
          78645,
          78863
        ],
        "filename": "Client.js",
        "lineno": 1744,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005428",
          "name": "Client#getSelfMFACodes",
          "type": "MethodDefinition",
          "paramnames": [
            "password",
            "regenerate"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the MFA backup codes for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The password for the current user",
          "name": "password"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to regenerate the MFA backup codes or not",
          "name": "regenerate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's MFA codes"
        }
      ],
      "name": "getSelfMFACodes",
      "longname": "Client#getSelfMFACodes",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000406",
      "___s": true
    },
    {
      "comment": "/**\n    * Enable TOTP authentication for the current user (user accounts only)\n    * @arg {String} secret The TOTP secret used to generate the auth code\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token and backup codes\n    */",
      "meta": {
        "range": [
          79205,
          79503
        ],
        "filename": "Client.js",
        "lineno": 1757,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005455",
          "name": "Client#enableSelfMFATOTP",
          "type": "MethodDefinition",
          "paramnames": [
            "secret",
            "code"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Enable TOTP authentication for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The TOTP secret used to generate the auth code",
          "name": "secret"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The timed auth code for the current user",
          "name": "code"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An object containing the user's new authorization token and backup codes"
        }
      ],
      "name": "enableSelfMFATOTP",
      "longname": "Client#enableSelfMFATOTP",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000409",
      "___s": true
    },
    {
      "comment": "/**\n    * Disable TOTP authentication for the current user (user accounts only)\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token\n    */",
      "meta": {
        "range": [
          79755,
          80027
        ],
        "filename": "Client.js",
        "lineno": 1773,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005499",
          "name": "Client#disableSelfMFATOTP",
          "type": "MethodDefinition",
          "paramnames": [
            "code"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Disable TOTP authentication for the current user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The timed auth code for the current user",
          "name": "code"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An object containing the user's new authorization token"
        }
      ],
      "name": "disableSelfMFATOTP",
      "longname": "Client#disableSelfMFATOTP",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000413",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the billing info for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's billing info\n    */",
      "meta": {
        "range": [
          80174,
          80286
        ],
        "filename": "Client.js",
        "lineno": 1787,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005540",
          "name": "Client#getSelfBilling",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the billing info for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's billing info"
        }
      ],
      "name": "getSelfBilling",
      "longname": "Client#getSelfBilling",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000416",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the payment history for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's payment history\n    */",
      "meta": {
        "range": [
          80439,
          80561
        ],
        "filename": "Client.js",
        "lineno": 1795,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005558",
          "name": "Client#getSelfPayments",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the payment history for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's payment history"
        }
      ],
      "name": "getSelfPayments",
      "longname": "Client#getSelfPayments",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000417",
      "___s": true
    },
    {
      "comment": "/**\n    * Purchase a premium subscription (Nitro) for the current user (user accounts only)\n    * You must get a Stripe card token from the Stripe API for this to work\n    * @arg {String} token The Stripe credit card token\n    * @arg {String} plan The plan to purchase, either \"premium_month\" or \"premium_year\"\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          80914,
          81171
        ],
        "filename": "Client.js",
        "lineno": 1806,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005576",
          "name": "Client#addSelfPremiumSubscription",
          "type": "MethodDefinition",
          "paramnames": [
            "token",
            "plan"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Purchase a premium subscription (Nitro) for the current user (user accounts only)\nYou must get a Stripe card token from the Stripe API for this to work",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The Stripe credit card token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The plan to purchase, either \"premium_month\" or \"premium_year\"",
          "name": "plan"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addSelfPremiumSubscription",
      "longname": "Client#addSelfPremiumSubscription",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000418",
      "___s": true
    },
    {
      "comment": "/**\n    * Cancel the premium subscription (Nitro) for the current user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          81305,
          81456
        ],
        "filename": "Client.js",
        "lineno": 1818,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005603",
          "name": "Client#deleteSelfPremiumSubscription",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Cancel the premium subscription (Nitro) for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteSelfPremiumSubscription",
      "longname": "Client#deleteSelfPremiumSubscription",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000422",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a channel's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          81735,
          82041
        ],
        "filename": "Client.js",
        "lineno": 1827,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005621",
          "name": "Client#getRESTChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a channel's data via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|GroupChannel|PrivateChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "name": "getRESTChannel",
      "longname": "Client#getRESTChannel",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000423",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          82229,
          82507
        ],
        "filename": "Client.js",
        "lineno": 1840,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005667",
          "name": "Client#getRESTGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's data via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "getRESTGuild",
      "longname": "Client#getRESTGuild",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000424",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=100] The max number of guilds to get (1 to 1000)\n    * @arg {String} [before] The lowest guild ID of the next page\n    * @arg {String} [after] The highest guild ID of the previous page\n    * @returns {Promise<Guild[]>}\n    */",
      "meta": {
        "range": [
          82874,
          83264
        ],
        "filename": "Client.js",
        "lineno": 1854,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005711",
          "name": "Client#getRESTGuilds",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The max number of guilds to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The lowest guild ID of the next page",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest guild ID of the previous page",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Guild>>"
            ]
          }
        }
      ],
      "name": "getRESTGuilds",
      "longname": "Client#getRESTGuilds",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000425",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[] | NewsChannel[])>}\n    */",
      "meta": {
        "range": [
          83519,
          83862
        ],
        "filename": "Client.js",
        "lineno": 1870,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005770",
          "name": "Client#getRESTGuildChannels",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>|Array.<NewsChannel>)>"
            ]
          }
        }
      ],
      "name": "getRESTGuildChannels",
      "longname": "Client#getRESTGuildChannels",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000429",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
      "meta": {
        "range": [
          84087,
          84338
        ],
        "filename": "Client.js",
        "lineno": 1883,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005822",
          "name": "Client#getRESTGuildEmojis",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "An array of guild emoji objects"
        }
      ],
      "name": "getRESTGuildEmojis",
      "longname": "Client#getRESTGuildEmojis",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000430",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
      "meta": {
        "range": [
          84590,
          84857
        ],
        "filename": "Client.js",
        "lineno": 1896,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005857",
          "name": "Client#getRESTGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An emoji object"
        }
      ],
      "name": "getRESTGuildEmoji",
      "longname": "Client#getRESTGuildEmoji",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000431",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
      "meta": {
        "range": [
          85195,
          85607
        ],
        "filename": "Client.js",
        "lineno": 1910,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005894",
          "name": "Client#getRESTGuildMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "limit",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The max number of members to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest user ID of the previous page",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Member>>"
            ]
          }
        }
      ],
      "name": "getRESTGuildMembers",
      "longname": "Client#getRESTGuildMembers",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000432",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
      "meta": {
        "range": [
          85849,
          86189
        ],
        "filename": "Client.js",
        "lineno": 1926,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005958",
          "name": "Client#getRESTGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Member>"
            ]
          }
        }
      ],
      "name": "getRESTGuildMember",
      "longname": "Client#getRESTGuildMember",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000435",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Role[]>}\n    */",
      "meta": {
        "range": [
          86379,
          86687
        ],
        "filename": "Client.js",
        "lineno": 1938,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006011",
          "name": "Client#getRESTGuildRoles",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Role>>"
            ]
          }
        }
      ],
      "name": "getRESTGuildRoles",
      "longname": "Client#getRESTGuildRoles",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000436",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a user's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<User>}\n    */",
      "meta": {
        "range": [
          86871,
          87142
        ],
        "filename": "Client.js",
        "lineno": 1950,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006061",
          "name": "Client#getRESTUser",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a user's data via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<User>"
            ]
          }
        }
      ],
      "name": "getRESTUser",
      "longname": "Client#getRESTUser",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000437",
      "___s": true
    },
    {
      "comment": "/**\n    * Search a channel's messages\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
      "meta": {
        "range": [
          89168,
          90111
        ],
        "filename": "Client.js",
        "lineno": 1989,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006105",
          "name": "Client#searchChannelMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "query"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Search a channel's messages",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Search parameters",
          "name": "query"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"timestamp\"",
          "description": "What to sort by, either \"timestamp\" or \"relevance\"",
          "name": "query.sortBy"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"desc\"",
          "description": "What order to sort by, either \"asc\" or \"desc\"",
          "name": "query.sortOrder"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by a content string",
          "name": "query.content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by an author ID",
          "name": "query.authorID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The minimum message ID to return results for",
          "name": "query.minID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The maximum message ID to return results for",
          "name": "query.maxID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 25,
          "description": "How many messages to return, 1 <= limit <= 25",
          "name": "query.limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
          "name": "query.offset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
          "name": "query.contextSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
          "name": "query.has"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed provider",
          "name": "query.embedProviders"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed type",
          "name": "query.embedTypes"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment extension",
          "name": "query.attachmentExtensions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment filename",
          "name": "query.attachmentFilename"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
        }
      ],
      "name": "searchChannelMessages",
      "longname": "Client#searchChannelMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000438",
      "___s": true
    },
    {
      "comment": "/**\n    * Search a guild's messages\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @arg {String[]} [query.channelIDs] Filter results by channel ID\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
      "meta": {
        "range": [
          92201,
          93178
        ],
        "filename": "Client.js",
        "lineno": 2044,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006215",
          "name": "Client#searchGuildMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "query"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Search a guild's messages",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Search parameters",
          "name": "query"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"timestamp\"",
          "description": "What to sort by, either \"timestamp\" or \"relevance\"",
          "name": "query.sortBy"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"desc\"",
          "description": "What order to sort by, either \"asc\" or \"desc\"",
          "name": "query.sortOrder"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by a content string",
          "name": "query.content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by an author ID",
          "name": "query.authorID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The minimum message ID to return results for",
          "name": "query.minID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The maximum message ID to return results for",
          "name": "query.maxID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 25,
          "description": "How many messages to return, 1 <= limit <= 25",
          "name": "query.limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
          "name": "query.offset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
          "name": "query.contextSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
          "name": "query.has"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed provider",
          "name": "query.embedProviders"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed type",
          "name": "query.embedTypes"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment extension",
          "name": "query.attachmentExtensions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment filename",
          "name": "query.attachmentFilename"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Filter results by channel ID",
          "name": "query.channelIDs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
        }
      ],
      "name": "searchGuildMessages",
      "longname": "Client#searchGuildMessages",
      "kind": "function",
      "memberof": "Client",
      "scope": "instance",
      "___id": "T000002R000455",
      "___s": true
    },
    {
      "comment": "/**\n    * Register a command\n    * @arg {String} label The command label\n    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.\n    * If a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n    * `generator(msg, args)`\n    * @arg {Object} [options] Command options\n    * @arg {Array<String>} [options.aliases] An array of command aliases\n    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not\n    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not\n    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds\n    * @arg {Object} [options.cooldownExclusions={}] A set of factors that limit where cooldowns are active\n    * @arg {Array<String>} [options.cooldownExclusions.userIDs] An array of user IDs representing users that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.guildIDs] An array of guild IDs representing guilds that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.channelIDs] An array of channel IDs representing channels that are not affected by cooldowns.\n    * @arg {Function | String} [options.cooldownMessage] A string or a function that returns a string to show when the command is on cooldown.  The function is passed the Message object as a parameter.\n    * @arg {Number} [option.cooldownReturns=0] Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.\n    * @arg {Object} [options.defaultSubcommandOptions={}] Default subcommand options. This object takes the same options as a normal Command\n    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not\n    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command\n    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not\n    * @arg {Function | String} [options.errorMessage] A string or a function that returns a string to show if the execution of the command handler somehow fails.  The function is passed the Message object as a parameter.\n    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command\n    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not\n    * @arg {Boolean} [options.hidden=false] Whether or not the command should be hidden from the default help command list.\n    * @arg {Object} [options.hooks] A set of functions to be executed at different times throughout the command's processing\n    * @arg {Function} [options.hooks.preCommand] A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.\n    * @arg {Function} [options.hooks.postCheck] A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.\n    * @arg {Function} [options.hooks.postExecution] A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.\n    * @arg {Function} [options.hooks.postCommand] A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.\n    * @arg {Function | String} [options.invalidUsageMessage] A string or a function that returns a string to show when a command was improperly used.  The function is passed the Message object as a parameter.\n    * @arg {Function | String} [options.permissionMessage] A string or a function that returns a string to show when the user doesn't have permissions to use the command.  The function is passed the Message object as a parameter.\n    * @arg {Array<{emoji: String, type: String, response: (Function | String | Array<Function | String>)}>} [options.reactionButtons] An array of objects specifying reaction buttons\n    * `emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n    * `type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n    * `response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n    * `filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response\n    * @arg {Number} [options.reactionButtonTimeout=60000] Time (in milliseconds) to wait before invalidating the command's reaction buttons\n    * @arg {Object} [options.requirements] A set of factors that limit who can call the command\n    * @arg {Function | Array<String>} [options.requirements.userIDs] An array or a function that returns an array of user IDs representing users that can call the command.  The function is passed the Message object as a parameter.\n    * @arg {Function | Object} [options.requirements.permissions] An object or a function that returns an object containing permission keys the user must match to use the command.  The function is passed the Message object as a parameter.\n    * i.e.:\n    * ```\n    * {\n    *   \"administrator\": false,\n    *   \"manageMessages\": true\n    * }\n    * ```\n    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleIDs] An array or a function that returns an array of role IDs that would allow a user to use the command.  The function is passed the Message object as a parameter.\n    * @arg {Function | Array<String>} [options.requirements.roleNames] An array or a function that returns an array of role names that would allow a user to use the command.  The function is passed the Message object as a parameter.\n    * @arg {Function} [options.requirements.custom] A function that accepts a message and returns true if the command should be run\n    * @arg {Boolean} [option.restartCooldown=false] Whether or not to restart a command's cooldown every time it's used.\n    * @arg {String} [options.usage] Details on how to call the command to show in the default help command\n    */",
      "meta": {
        "range": [
          7456,
          11879
        ],
        "filename": "Command.js",
        "lineno": 66,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100006853",
          "name": "Command",
          "type": "MethodDefinition",
          "paramnames": [
            "label",
            "generator",
            "options",
            "parentCommand"
          ]
        }
      },
      "name": "Command",
      "longname": "Command",
      "kind": "class",
      "description": "Register a command",
      "scope": "global",
      "classdesc": "Represents an command framework command",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The command label",
          "name": "label"
        },
        {
          "type": {
            "names": [
              "function",
              "String",
              "Array.<(function()|String)>"
            ]
          },
          "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n`generator(msg, args)`",
          "name": "generator"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Command options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of command aliases",
          "name": "options.aliases"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If arguments are required or not",
          "name": "options.argsRequired"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether the command label (and aliases) is case insensitive or not",
          "name": "options.caseInsensitive"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The cooldown between command usage in milliseconds",
          "name": "options.cooldown"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "A set of factors that limit where cooldowns are active",
          "name": "options.cooldownExclusions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of user IDs representing users that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.userIDs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.guildIDs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.channelIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when the command is on cooldown.  The function is passed the Message object as a parameter.",
          "name": "options.cooldownMessage"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
          "name": "option.cooldownReturns"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "Default subcommand options. This object takes the same options as a normal Command",
          "name": "options.defaultSubcommandOptions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to delete the user command message or not",
          "name": "options.deleteCommand"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"No description\"",
          "description": "A short description of the command to show in the default help command",
          "name": "options.description"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to prevent the command from being used in guilds or not",
          "name": "options.dmOnly"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.  The function is passed the Message object as a parameter.",
          "name": "options.errorMessage"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"No full description\"",
          "description": "A detailed description of the command to show in the default help command",
          "name": "options.fullDescription"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to prevent the command from being used in Direct Messages or not",
          "name": "options.guildOnly"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether or not the command should be hidden from the default help command list.",
          "name": "options.hidden"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A set of functions to be executed at different times throughout the command's processing",
          "name": "options.hooks"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
          "name": "options.hooks.preCommand"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
          "name": "options.hooks.postCheck"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
          "name": "options.hooks.postExecution"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
          "name": "options.hooks.postCommand"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when a command was improperly used.  The function is passed the Message object as a parameter.",
          "name": "options.invalidUsageMessage"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command.  The function is passed the Message object as a parameter.",
          "name": "options.permissionMessage"
        },
        {
          "type": {
            "names": [
              "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
            ]
          },
          "optional": true,
          "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
          "name": "options.reactionButtons"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 60000,
          "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
          "name": "options.reactionButtonTimeout"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A set of factors that limit who can call the command",
          "name": "options.requirements"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of user IDs representing users that can call the command.  The function is passed the Message object as a parameter.",
          "name": "options.requirements.userIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "Object"
            ]
          },
          "optional": true,
          "description": "An object or a function that returns an object containing permission keys the user must match to use the command.  The function is passed the Message object as a parameter.\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
          "name": "options.requirements.permissions"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of role IDs that would allow a user to use the command.  The function is passed the Message object as a parameter.",
          "name": "options.requirements.roleIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of role names that would allow a user to use the command.  The function is passed the Message object as a parameter.",
          "name": "options.requirements.roleNames"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that accepts a message and returns true if the command should be run",
          "name": "options.requirements.custom"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether or not to restart a command's cooldown every time it's used.",
          "name": "option.restartCooldown"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Details on how to call the command to show in the default help command",
          "name": "options.usage"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping subcommand labels to Command objects",
          "name": "subcommands"
        },
        {
          "type": {
            "names": [
              "Command"
            ]
          },
          "nullable": true,
          "description": "If this command is also a subcommand, this will refer to its parent Command",
          "name": "parentCommand"
        }
      ],
      "___id": "T000002R000608",
      "___s": true
    },
    {
      "comment": "/**\n    * Register an alias for a subcommand\n    * @arg {String} alias The alias\n    * @arg {String} label The original subcommand label\n    */",
      "meta": {
        "range": [
          21081,
          21465
        ],
        "filename": "Command.js",
        "lineno": 390,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100008726",
          "name": "Command#registerSubcommandAlias",
          "type": "MethodDefinition",
          "paramnames": [
            "alias",
            "label"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Register an alias for a subcommand",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The alias",
          "name": "alias"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The original subcommand label",
          "name": "label"
        }
      ],
      "name": "registerSubcommandAlias",
      "longname": "Command#registerSubcommandAlias",
      "kind": "function",
      "memberof": "Command",
      "scope": "instance",
      "___id": "T000002R000702",
      "___s": true
    },
    {
      "comment": "/**\n    * Register a subcommand\n    * @arg {String} label The subcommand label\n    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.\n    * If a function is passed, the function will be passed a Message object and an array of subcommand arguments. The Message object will have an additional property `prefix`, which is the prefix used in the subcommand.\n    * `generator(msg, args)`\n    * @arg {Object} [options] Command options\n    * @arg {Array<String>} [options.aliases] An array of command aliases\n    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not\n    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not\n    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds\n    * @arg {Object} [options.cooldownExclusions={}] A set of factors that limit where cooldowns are active\n    * @arg {Array<String>} [options.cooldownExclusions.userIDs] An array of user IDs representing users that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.guildIDs] An array of guild IDs representing guilds that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.channelIDs] An array of channel IDs representing channels that are not affected by cooldowns.\n    * @arg {Function | String} [options.cooldownMessage] A string or a function that returns a string to show when the command is on cooldown\n    * @arg {Number} [option.cooldownReturns=0] Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.\n    * @arg {Object} [options.defaultSubcommandOptions={}] Default subcommand options. This object takes the same options as a normal Command\n    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not\n    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command\n    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not\n    * @arg {Function | String} [options.errorMessage] A string or a function that returns a string to show if the execution of the command handler somehow fails.\n    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command\n    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not\n    * @arg {Boolean} [options.hidden=false] Whether or not the command should be hidden from the default help command list\n    * @arg {Object} [options.hooks] A set of functions to be executed at different times throughout the command's processing\n    * @arg {Function} [options.hooks.preCommand] A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.\n    * @arg {Function} [options.hooks.postCheck] A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.\n    * @arg {Function} [options.hooks.postExecution] A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.\n    * @arg {Function} [options.hooks.postCommand] A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.\n    * @arg {Function | String} [options.invalidUsageMessage] A string or a function that returns a string to show when a command was improperly used\n    * @arg {Function | String} [options.permissionMessage] A string or a function that returns a string to show when the user doesn't have permissions to use the command\n    * @arg {Array<{emoji: String, type: String, response: (Function | String | Array<Function | String>)}>} [options.reactionButtons] An array of objects specifying reaction buttons\n    * `emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n    * `type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n    * `response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n    * `filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response\n    * @arg {Number} [options.reactionButtonTimeout=60000] Time (in milliseconds) to wait before invalidating the command's reaction buttons\n    * @arg {Object} [options.requirements] A set of factors that limit who can call the command\n    * @arg {Function | Array<String>} [options.requirements.userIDs] An array or a function that returns an array of user IDs representing users that can call the command\n    * @arg {Function | Object} [options.requirements.permissions] An object or a function that returns an object containing permission keys the user must match to use the command\n    * i.e.:\n    * ```\n    * {\n    *   \"administrator\": false,\n    *   \"manageMessages\": true\n    * }\n    * ```\n    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleIDs] An array or a function that returns an array of role IDs that would allow a user to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleNames] An array or a function that returns an array of role names that would allow a user to use the command\n    * @arg {Function} [options.requirements.custom] A function that accepts a message and returns true if the command should be run\n    * @arg {Boolean} [option.restartCooldown=false] Whether or not to restart a command's cooldown every time it's used.\n    * @arg {String} [options.usage] Details on how to call the command to show in the default help command\n    * @returns {Command}\n    */",
      "meta": {
        "range": [
          28165,
          29252
        ],
        "filename": "Command.js",
        "lineno": 457,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100008780",
          "name": "Command#registerSubcommand",
          "type": "MethodDefinition",
          "paramnames": [
            "label",
            "generator",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Register a subcommand",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The subcommand label",
          "name": "label"
        },
        {
          "type": {
            "names": [
              "function",
              "String",
              "Array.<(function()|String)>"
            ]
          },
          "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of subcommand arguments. The Message object will have an additional property `prefix`, which is the prefix used in the subcommand.\n`generator(msg, args)`",
          "name": "generator"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Command options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of command aliases",
          "name": "options.aliases"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If arguments are required or not",
          "name": "options.argsRequired"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether the command label (and aliases) is case insensitive or not",
          "name": "options.caseInsensitive"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The cooldown between command usage in milliseconds",
          "name": "options.cooldown"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "A set of factors that limit where cooldowns are active",
          "name": "options.cooldownExclusions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of user IDs representing users that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.userIDs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.guildIDs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.channelIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when the command is on cooldown",
          "name": "options.cooldownMessage"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
          "name": "option.cooldownReturns"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "Default subcommand options. This object takes the same options as a normal Command",
          "name": "options.defaultSubcommandOptions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to delete the user command message or not",
          "name": "options.deleteCommand"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"No description\"",
          "description": "A short description of the command to show in the default help command",
          "name": "options.description"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to prevent the command from being used in guilds or not",
          "name": "options.dmOnly"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.",
          "name": "options.errorMessage"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"No full description\"",
          "description": "A detailed description of the command to show in the default help command",
          "name": "options.fullDescription"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to prevent the command from being used in Direct Messages or not",
          "name": "options.guildOnly"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether or not the command should be hidden from the default help command list",
          "name": "options.hidden"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A set of functions to be executed at different times throughout the command's processing",
          "name": "options.hooks"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
          "name": "options.hooks.preCommand"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
          "name": "options.hooks.postCheck"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
          "name": "options.hooks.postExecution"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
          "name": "options.hooks.postCommand"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when a command was improperly used",
          "name": "options.invalidUsageMessage"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command",
          "name": "options.permissionMessage"
        },
        {
          "type": {
            "names": [
              "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
            ]
          },
          "optional": true,
          "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
          "name": "options.reactionButtons"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 60000,
          "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
          "name": "options.reactionButtonTimeout"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A set of factors that limit who can call the command",
          "name": "options.requirements"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of user IDs representing users that can call the command",
          "name": "options.requirements.userIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "Object"
            ]
          },
          "optional": true,
          "description": "An object or a function that returns an object containing permission keys the user must match to use the command\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
          "name": "options.requirements.permissions"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of role IDs that would allow a user to use the command",
          "name": "options.requirements.roleIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of role names that would allow a user to use the command",
          "name": "options.requirements.roleNames"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that accepts a message and returns true if the command should be run",
          "name": "options.requirements.custom"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether or not to restart a command's cooldown every time it's used.",
          "name": "option.restartCooldown"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Details on how to call the command to show in the default help command",
          "name": "options.usage"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Command"
            ]
          }
        }
      ],
      "name": "registerSubcommand",
      "longname": "Command#registerSubcommand",
      "kind": "function",
      "memberof": "Command",
      "scope": "instance",
      "___id": "T000002R000704",
      "___s": true
    },
    {
      "comment": "/**\n    * Unregister a subcommand\n    * @arg {String} label The subcommand label\n    */",
      "meta": {
        "range": [
          29350,
          29694
        ],
        "filename": "Command.js",
        "lineno": 485,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100008924",
          "name": "Command#unregisterSubcommand",
          "type": "MethodDefinition",
          "paramnames": [
            "label"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unregister a subcommand",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The subcommand label",
          "name": "label"
        }
      ],
      "name": "unregisterSubcommand",
      "longname": "Command#unregisterSubcommand",
      "kind": "function",
      "memberof": "Command",
      "scope": "instance",
      "___id": "T000002R000712",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a CommandClient\n    * @arg {String} token bot token\n    * @arg {Object} [options] Eris options (same as Client)\n    * @arg {Object} [commandOptions] Command options\n    * @arg {Boolean} [commandOptions.defaultHelpCommand=true] Whether to register the default help command or not\n    * @arg {String} [commandOptions.description=\"An Eris-based Discord bot\"] The description to show in the default help command\n    * @arg {Boolean} [commandOptions.ignoreBots=true] Whether to ignore bot accounts or not\n    * @arg {Boolean} [commandOptions.ignoreSelf=true] Whether to ignore the bot's own account or not\n    * @arg {String} [commandOptions.name=\"<Bot username>\"] The bot name to show in the default help command\n    * @arg {String} [commandOptions.owner=\"an unknown user\"] The owner to show in the default help command\n    * @arg {String | Array<String>} [commandOptions.prefix=\"@mention \"] The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention\n    * @arg {Object} [commandOptions.defaultCommandOptions={}] Default command options. This object takes the same options as a normal Command\n    */",
      "meta": {
        "range": [
          1718,
          6670
        ],
        "filename": "CommandClient.js",
        "lineno": 29,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100009069",
          "name": "CommandClient",
          "type": "MethodDefinition",
          "paramnames": [
            "token",
            "options",
            "commandOptions"
          ]
        }
      },
      "name": "CommandClient",
      "longname": "CommandClient",
      "kind": "class",
      "description": "Create a CommandClient",
      "scope": "global",
      "classdesc": "Represents an Eris client with the command framework",
      "augments": [
        "Client"
      ],
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "bot token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Eris options (same as Client)",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Command options",
          "name": "commandOptions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Whether to register the default help command or not",
          "name": "commandOptions.defaultHelpCommand"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"An Eris-based Discord bot\"",
          "description": "The description to show in the default help command",
          "name": "commandOptions.description"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Whether to ignore bot accounts or not",
          "name": "commandOptions.ignoreBots"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Whether to ignore the bot's own account or not",
          "name": "commandOptions.ignoreSelf"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"<Bot username>\"",
          "description": "The bot name to show in the default help command",
          "name": "commandOptions.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"an unknown user\"",
          "description": "The owner to show in the default help command",
          "name": "commandOptions.owner"
        },
        {
          "type": {
            "names": [
              "String",
              "Array.<String>"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@mention \"",
          "description": "The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention",
          "name": "commandOptions.prefix"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "Default command options. This object takes the same options as a normal Command",
          "name": "commandOptions.defaultCommandOptions"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping command label aliases to command labels",
          "name": "commandAliases"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping command labels to Command objects",
          "name": "commands"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object mapping guild IDs to arrays of guild-specific prefixes",
          "name": "guildPrefixes"
        }
      ],
      "___id": "T000002R000722",
      "___s": true
    },
    {
      "comment": "/**\n    * Checks the command client for a command based on the provided message\n    * @arg {Message} msg The message object from the message create event\n    */",
      "meta": {
        "range": [
          6841,
          9735
        ],
        "filename": "CommandClient.js",
        "lineno": 133,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100009721",
          "name": "CommandClient#onMessageCreate",
          "type": "MethodDefinition",
          "paramnames": [
            "msg"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Checks the command client for a command based on the provided message",
      "params": [
        {
          "type": {
            "names": [
              "Message"
            ]
          },
          "description": "The message object from the message create event",
          "name": "msg"
        }
      ],
      "name": "onMessageCreate",
      "longname": "CommandClient#onMessageCreate",
      "kind": "function",
      "memberof": "CommandClient",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000767",
      "___s": true
    },
    {
      "comment": "/**\n    * Register a prefix override for a specific guild\n    * @arg {String} guildID The ID of the guild to override prefixes for\n    * @arg {String | Array} prefix The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention\n    */",
      "meta": {
        "range": [
          12143,
          12622
        ],
        "filename": "CommandClient.js",
        "lineno": 255,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100010388",
          "name": "CommandClient#registerGuildPrefix",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "prefix"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Register a prefix override for a specific guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to override prefixes for",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array"
            ]
          },
          "description": "The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention",
          "name": "prefix"
        }
      ],
      "name": "registerGuildPrefix",
      "longname": "CommandClient#registerGuildPrefix",
      "kind": "function",
      "memberof": "CommandClient",
      "scope": "instance",
      "___id": "T000002R000796",
      "___s": true
    },
    {
      "comment": "/**\n    * Register an alias for a command\n    * @arg {String} alias The alias\n    * @arg {String} label The original command label\n    */",
      "meta": {
        "range": [
          13383,
          13998
        ],
        "filename": "CommandClient.js",
        "lineno": 286,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100010575",
          "name": "CommandClient#registerCommandAlias",
          "type": "MethodDefinition",
          "paramnames": [
            "alias",
            "label"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Register an alias for a command",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The alias",
          "name": "alias"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The original command label",
          "name": "label"
        }
      ],
      "name": "registerCommandAlias",
      "longname": "CommandClient#registerCommandAlias",
      "kind": "function",
      "memberof": "CommandClient",
      "scope": "instance",
      "___id": "T000002R000805",
      "___s": true
    },
    {
      "comment": "/**\n    * Register a command\n    * @arg {String} label The command label\n    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.\n    * If a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n    * `generator(msg, args)`\n    * @arg {Object} [options] Command options\n    * @arg {Array<String>} [options.aliases] An array of command aliases\n    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not\n    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not\n    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds\n    * @arg {Object} [options.cooldownExclusions={}] A set of factors that limit where cooldowns are active\n    * @arg {Array<String>} [options.cooldownExclusions.userIDs] An array of user IDs representing users that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.guildIDs] An array of guild IDs representing guilds that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.channelIDs] An array of channel IDs representing channels that are not affected by cooldowns.\n    * @arg {Function | String} [options.cooldownMessage] A string or a function that returns a string to show when the command is on cooldown\n    * @arg {Number} [option.cooldownReturns=0] Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.\n    * @arg {Object} [options.defaultSubcommandOptions={}] Default subcommand options. This object takes the same options as a normal Command\n    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not\n    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command\n    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not\n    * @arg {Function | String} [options.errorMessage] A string or a function that returns a string to show if the execution of the command handler somehow fails.\n    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command\n    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not\n    * @arg {Boolean} [options.hidden=false] Whether or not the command should be hidden from the default help command list\n    * @arg {Object} [options.hooks] A set of functions to be executed at different times throughout the command's processing\n    * @arg {Function} [options.hooks.preCommand] A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.\n    * @arg {Function} [options.hooks.postCheck] A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.\n    * @arg {Function} [options.hooks.postExecution] A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.\n    * @arg {Function} [options.hooks.postCommand] A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.\n    * @arg {Function | String} [options.invalidUsageMessage] A string or a function that returns a string to show when a command was improperly used\n    * @arg {Function | String} [options.permissionMessage] A string or a function that returns a string to show when the user doesn't have permissions to use the command\n    * @arg {Array<{emoji: String, type: String, response: (Function | String | Array<Function | String>)}>} [options.reactionButtons] An array of objects specifying reaction buttons\n    * `emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n    * `type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n    * `response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n    * `filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response\n    * @arg {Number} [options.reactionButtonTimeout=60000] Time (in milliseconds) to wait before invalidating the command's reaction buttons\n    * @arg {Object} [options.requirements] A set of factors that limit who can call the command\n    * @arg {Function | Array<String>} [options.requirements.userIDs] An array or a function that returns an array of user IDs representing users that can call the command\n    * @arg {Function | Object} [options.requirements.permissions] An object or a function that returns an object containing permission keys the user must match to use the command\n    * i.e.:\n    * ```\n    * {\n    *   \"administrator\": false,\n    *   \"manageMessages\": true\n    * }\n    * ```\n    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleIDs] An array or a function that returns an array of role IDs that would allow a user to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleNames] An array or a function that returns an array of role names that would allow a user to use the command\n    * @arg {Function} [options.requirements.custom] A function that accepts a message and returns true if the command should be run\n    * @arg {Boolean} [option.restartCooldown=false] Whether or not to restart a command's cooldown every time it's used.\n    * @arg {String} [options.usage] Details on how to call the command to show in the default help command\n    * @returns {Command}\n    */",
      "meta": {
        "range": [
          20686,
          23750
        ],
        "filename": "CommandClient.js",
        "lineno": 355,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100010671",
          "name": "CommandClient#registerCommand",
          "type": "MethodDefinition",
          "paramnames": [
            "label",
            "generator",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Register a command",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The command label",
          "name": "label"
        },
        {
          "type": {
            "names": [
              "function",
              "String",
              "Array.<(function()|String)>"
            ]
          },
          "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n`generator(msg, args)`",
          "name": "generator"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Command options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of command aliases",
          "name": "options.aliases"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If arguments are required or not",
          "name": "options.argsRequired"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether the command label (and aliases) is case insensitive or not",
          "name": "options.caseInsensitive"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The cooldown between command usage in milliseconds",
          "name": "options.cooldown"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "A set of factors that limit where cooldowns are active",
          "name": "options.cooldownExclusions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of user IDs representing users that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.userIDs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.guildIDs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
          "name": "options.cooldownExclusions.channelIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when the command is on cooldown",
          "name": "options.cooldownMessage"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
          "name": "option.cooldownReturns"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "Default subcommand options. This object takes the same options as a normal Command",
          "name": "options.defaultSubcommandOptions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to delete the user command message or not",
          "name": "options.deleteCommand"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"No description\"",
          "description": "A short description of the command to show in the default help command",
          "name": "options.description"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to prevent the command from being used in guilds or not",
          "name": "options.dmOnly"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.",
          "name": "options.errorMessage"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"No full description\"",
          "description": "A detailed description of the command to show in the default help command",
          "name": "options.fullDescription"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to prevent the command from being used in Direct Messages or not",
          "name": "options.guildOnly"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether or not the command should be hidden from the default help command list",
          "name": "options.hidden"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A set of functions to be executed at different times throughout the command's processing",
          "name": "options.hooks"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
          "name": "options.hooks.preCommand"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
          "name": "options.hooks.postCheck"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
          "name": "options.hooks.postExecution"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
          "name": "options.hooks.postCommand"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when a command was improperly used",
          "name": "options.invalidUsageMessage"
        },
        {
          "type": {
            "names": [
              "function",
              "String"
            ]
          },
          "optional": true,
          "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command",
          "name": "options.permissionMessage"
        },
        {
          "type": {
            "names": [
              "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
            ]
          },
          "optional": true,
          "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
          "name": "options.reactionButtons"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 60000,
          "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
          "name": "options.reactionButtonTimeout"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A set of factors that limit who can call the command",
          "name": "options.requirements"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of user IDs representing users that can call the command",
          "name": "options.requirements.userIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "Object"
            ]
          },
          "optional": true,
          "description": "An object or a function that returns an object containing permission keys the user must match to use the command\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
          "name": "options.requirements.permissions"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of role IDs that would allow a user to use the command",
          "name": "options.requirements.roleIDs"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array or a function that returns an array of role names that would allow a user to use the command",
          "name": "options.requirements.roleNames"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "A function that accepts a message and returns true if the command should be run",
          "name": "options.requirements.custom"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether or not to restart a command's cooldown every time it's used.",
          "name": "option.restartCooldown"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Details on how to call the command to show in the default help command",
          "name": "options.usage"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Command"
            ]
          }
        }
      ],
      "name": "registerCommand",
      "longname": "CommandClient#registerCommand",
      "kind": "function",
      "memberof": "CommandClient",
      "scope": "instance",
      "___id": "T000002R000811",
      "___s": true
    },
    {
      "comment": "/**\n    * Unregister a command\n    * @arg {String} label The command label\n    */",
      "meta": {
        "range": [
          23842,
          24168
        ],
        "filename": "CommandClient.js",
        "lineno": 414,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/command",
        "code": {
          "id": "astnode100011059",
          "name": "CommandClient#unregisterCommand",
          "type": "MethodDefinition",
          "paramnames": [
            "label"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unregister a command",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The command label",
          "name": "label"
        }
      ],
      "name": "unregisterCommand",
      "longname": "CommandClient#unregisterCommand",
      "kind": "function",
      "memberof": "CommandClient",
      "scope": "instance",
      "___id": "T000002R000828",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1879,
          2064
        ],
        "filename": "Shard.js",
        "lineno": 53,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {
          "id": "astnode100011893",
          "name": "Shard",
          "type": "MethodDefinition",
          "paramnames": [
            "id",
            "client"
          ]
        }
      },
      "name": "Shard",
      "longname": "Shard",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a shard",
      "augments": [
        "EventEmitter"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the shard is connecting",
          "name": "connecting"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the shard is ready",
          "name": "ready"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "nullable": true,
          "description": "Debug trace of Discord servers",
          "name": "discordServerTrace"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The status of the shard. \"disconnected\"/\"connecting\"/\"handshaking\"/\"ready\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Last time Discord acknowledged a heartbeat, null if shard has not sent heartbeat yet",
          "name": "lastHeartbeatReceived"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Last time shard sent a heartbeat, null if shard has not sent heartbeat yet",
          "name": "lastHeartbeatSent"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The current latency between the shard and Discord, in milliseconds",
          "name": "latency"
        }
      ],
      "___id": "T000002R000905",
      "___s": true
    },
    {
      "comment": "/**\n    * Tells the shard to connect\n    */",
      "meta": {
        "range": [
          2279,
          2574
        ],
        "filename": "Shard.js",
        "lineno": 71,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {
          "id": "astnode100011952",
          "name": "Shard#connect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Tells the shard to connect",
      "name": "connect",
      "longname": "Shard#connect",
      "kind": "function",
      "memberof": "Shard",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000910",
      "___s": true
    },
    {
      "comment": "/**\n    * Disconnects the shard\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
      "meta": {
        "range": [
          2835,
          4842
        ],
        "filename": "Shard.js",
        "lineno": 86,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {
          "id": "astnode100012000",
          "name": "Shard#disconnect",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "error"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Disconnects the shard",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "Shard disconnect options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String",
              "Boolean"
            ]
          },
          "optional": true,
          "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
          "name": "options.reconnect"
        }
      ],
      "name": "disconnect",
      "longname": "Shard#disconnect",
      "kind": "function",
      "memberof": "Shard",
      "scope": "instance",
      "___id": "T000002R000912",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the shard encounters an error\n            * @event Client#error\n            * @prop {Error} err The error\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 103,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when the shard encounters an error",
      "kind": "event",
      "name": "error",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "The error",
          "name": "err"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:error",
      "scope": "instance",
      "___id": "T000002R000915",
      "___s": true
    },
    {
      "comment": "/**\n        * Fired when the shard disconnects\n        * @event Shard#disconnect\n        * @prop {Error?} err The error, if any\n        */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 112,
        "columnno": 8,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when the shard disconnects",
      "kind": "event",
      "name": "disconnect",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "nullable": true,
          "description": "The error, if any",
          "name": "err"
        }
      ],
      "memberof": "Shard",
      "longname": "Shard#event:disconnect",
      "scope": "instance",
      "___id": "T000002R000916",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when stuff happens and gives more info\n            * @event Client#debug\n            * @prop {String} message The debug message\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 122,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when stuff happens and gives more info",
      "kind": "event",
      "name": "debug",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The debug message",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:debug",
      "scope": "instance",
      "___id": "T000002R000918",
      "___s": true
    },
    {
      "comment": "/**\n                        * Fired when a user's username, avatar, or discriminator changes\n                        * @event Client#userUpdate\n                        * @prop {User} user The updated user\n                        * @prop {Object?} oldUser The old user data\n                        * @prop {String} oldUser.username The username of the user\n                        * @prop {String} oldUser.discriminator The discriminator of the user\n                        * @prop {String?} oldUser.avatar The hash of the user's avatar, or null if no avatar\n                        */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 233,
        "columnno": 24,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a user's username, avatar, or discriminator changes",
      "kind": "event",
      "name": "userUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The updated user",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old user data",
          "name": "oldUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The username of the user",
          "name": "oldUser.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The discriminator of the user",
          "name": "oldUser.discriminator"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the user's avatar, or null if no avatar",
          "name": "oldUser.avatar"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:userUpdate",
      "scope": "instance",
      "___id": "T000002R000973",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild member or relationship's status or game changes\n                    * @event Client#presenceUpdate\n                    * @prop {Member | Relationship} other The updated member or relationship\n                    * @prop {Object?} oldPresence The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null\n                    * @prop {String} oldPresence.status The other user's old status. Either \"online\", \"idle\", or \"offline\"\n                    * @prop {Object?} oldPresence.game The old game the other user was playing\n                    * @prop {String} oldPresence.game.name The name of the active game\n                    * @prop {Number} oldPresence.game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n                    * @prop {String} oldPresence.game.url The url of the active game\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 255,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild member or relationship's status or game changes",
      "kind": "event",
      "name": "presenceUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Member",
              "Relationship"
            ]
          },
          "description": "The updated member or relationship",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null",
          "name": "oldPresence"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The other user's old status. Either \"online\", \"idle\", or \"offline\"",
          "name": "oldPresence.status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old game the other user was playing",
          "name": "oldPresence.game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the active game",
          "name": "oldPresence.game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
          "name": "oldPresence.game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The url of the active game",
          "name": "oldPresence.game.url"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:presenceUpdate",
      "scope": "instance",
      "___id": "T000002R000979",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild member switches voice channels\n                            * @event Client#voiceChannelSwitch\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The new voice channel\n                            * @prop {VoiceChannel} oldChannel The old voice channel\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 369,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild member switches voice channels",
      "kind": "event",
      "name": "voiceChannelSwitch",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The new voice channel",
          "name": "newChannel"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The old voice channel",
          "name": "oldChannel"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:voiceChannelSwitch",
      "scope": "instance",
      "___id": "T000002R001015",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                            * @event Client#voiceChannelJoin\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The voice channel\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 379,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
      "kind": "event",
      "name": "voiceChannelJoin",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The voice channel",
          "name": "newChannel"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:voiceChannelJoin",
      "scope": "instance",
      "___id": "T000002R001016",
      "___s": true
    },
    {
      "comment": "/**\n                        * Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                        * @event Client#voiceChannelLeave\n                        * @prop {?Member} member The member\n                        * @prop {VoiceChannel} oldChannel The voice channel\n                        */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 389,
        "columnno": 24,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
      "kind": "event",
      "name": "voiceChannelLeave",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "nullable": true,
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The voice channel",
          "name": "oldChannel"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:voiceChannelLeave",
      "scope": "instance",
      "___id": "T000002R001017",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild member's voice state changes\n                    * @event Client#voiceStateUpdate\n                    * @prop {Member} member The member\n                    * @prop {Object} oldState The old voice state\n                    * @prop {Boolean} oldState.mute The previous server mute status\n                    * @prop {Boolean} oldState.deaf The previous server deaf status\n                    * @prop {Boolean} oldState.selfMute The previous self mute status\n                    * @prop {Boolean} oldState.selfDeaf The previous self deaf status\n                    * @prop {Boolean} oldState.selfStream The previous self stream status\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 399,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild member's voice state changes",
      "kind": "event",
      "name": "voiceStateUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old voice state",
          "name": "oldState"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous server mute status",
          "name": "oldState.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous server deaf status",
          "name": "oldState.deaf"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous self mute status",
          "name": "oldState.selfMute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous self deaf status",
          "name": "oldState.selfDeaf"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous self stream status",
          "name": "oldState.selfStream"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:voiceStateUpdate",
      "scope": "instance",
      "___id": "T000002R001018",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a user begins typing\n                    * @event Client#typingStart\n                    * @prop {PrivateChannel | TextChannel} channel The text channel the user is typing in\n                    * @prop {User} user The user\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 416,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a user begins typing",
      "kind": "event",
      "name": "typingStart",
      "properties": [
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel"
            ]
          },
          "description": "The text channel the user is typing in",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user",
          "name": "user"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:typingStart",
      "scope": "instance",
      "___id": "T000002R001019",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a message is created\n                    * @event Client#messageCreate\n                    * @prop {Message} message The message\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 430,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a message is created",
      "kind": "event",
      "name": "messageCreate",
      "properties": [
        {
          "type": {
            "names": [
              "Message"
            ]
          },
          "description": "The message",
          "name": "message"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageCreate",
      "scope": "instance",
      "___id": "T000002R001022",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a message is updated\n                * @event Client#messageUpdate\n                * @prop {Message} message The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)\n                * @prop {Object?} oldMessage The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null\n                * @prop {Object[]} oldMessage.attachments Array of attachments\n                * @prop {Object[]} oldMessage.embeds Array of embeds\n                * @prop {String} oldMessage.content Message content\n                * @prop {Number} oldMessage.editedTimestamp Timestamp of latest message edit\n                * @prop {Object} oldMessage.mentionedBy Object of if different things mention the bot user\n                * @prop {Boolean} oldMessage.pinned Whether the message was pinned or not\n                * @prop {Boolean} oldMessage.tts Whether to play the message using TTS or not\n                * @prop {String[]} oldMessage.mentions Array of mentioned users' ids\n                * @prop {String[]} oldMessage.roleMentions Array of mentioned roles' ids.\n                * @prop {String[]} oldMessage.channelMentions Array of mentions channels' ids.\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 466,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a message is updated",
      "kind": "event",
      "name": "messageUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Message"
            ]
          },
          "description": "The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null",
          "name": "oldMessage"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "Array of attachments",
          "name": "oldMessage.attachments"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "Array of embeds",
          "name": "oldMessage.embeds"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Message content",
          "name": "oldMessage.content"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of latest message edit",
          "name": "oldMessage.editedTimestamp"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object of if different things mention the bot user",
          "name": "oldMessage.mentionedBy"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the message was pinned or not",
          "name": "oldMessage.pinned"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether to play the message using TTS or not",
          "name": "oldMessage.tts"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentioned users' ids",
          "name": "oldMessage.mentions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentioned roles' ids.",
          "name": "oldMessage.roleMentions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentions channels' ids.",
          "name": "oldMessage.channelMentions"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageUpdate",
      "scope": "instance",
      "___id": "T000002R001038",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a cached message is deleted\n                * @event Client#messageDelete\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 490,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a cached message is deleted",
      "kind": "event",
      "name": "messageDelete",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageDelete",
      "scope": "instance",
      "___id": "T000002R001040",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a bulk delete occurs\n                * @event Client#messageDeleteBulk\n                * @prop {Message[] | Object[]} messages An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 507,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a bulk delete occurs",
      "kind": "event",
      "name": "messageDeleteBulk",
      "properties": [
        {
          "type": {
            "names": [
              "Array.<Message>",
              "Array.<Object>"
            ]
          },
          "description": "An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "messages"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageDeleteBulk",
      "scope": "instance",
      "___id": "T000002R001044",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when someone adds a reaction to a message\n                * @event Client#messageReactionAdd\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The emoji ID (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that added the reaction\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 540,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when someone adds a reaction to a message",
      "kind": "event",
      "name": "messageReactionAdd",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The reaction emoji object",
          "name": "emoji"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The emoji ID (null for non-custom emojis)",
          "name": "emoji.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The emoji name",
          "name": "emoji.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that added the reaction",
          "name": "userID"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageReactionAdd",
      "scope": "instance",
      "___id": "T000002R001055",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when someone removes a reaction from a message\n                * @event Client#messageReactionRemove\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The ID of the emoji (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that removed the reaction\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 570,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when someone removes a reaction from a message",
      "kind": "event",
      "name": "messageReactionRemove",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The reaction emoji object",
          "name": "emoji"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the emoji (null for non-custom emojis)",
          "name": "emoji.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The emoji name",
          "name": "emoji.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that removed the reaction",
          "name": "userID"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageReactionRemove",
      "scope": "instance",
      "___id": "T000002R001062",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when someone removes a reaction from a message\n                * @event Client#messageReactionRemoveAll\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 590,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when someone removes a reaction from a message",
      "kind": "event",
      "name": "messageReactionRemoveAll",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:messageReactionRemoveAll",
      "scope": "instance",
      "___id": "T000002R001066",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a member joins a server\n                * @event Client#guildMemberAdd\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The member\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 609,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a member joins a server",
      "kind": "event",
      "name": "guildMemberAdd",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildMemberAdd",
      "scope": "instance",
      "___id": "T000002R001071",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a member's roles or nickname are updated\n                * @event Client#guildMemberUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The updated member\n                * @prop {Object?} oldMember The old member data\n                * @prop {String[]} oldMember.roles An array of role IDs this member is a part of\n                * @prop {String?} oldMember.nick The server nickname of the member\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 633,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a member's roles or nickname are updated",
      "kind": "event",
      "name": "guildMemberUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The updated member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old member data",
          "name": "oldMember"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "An array of role IDs this member is a part of",
          "name": "oldMember.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The server nickname of the member",
          "name": "oldMember.nick"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildMemberUpdate",
      "scope": "instance",
      "___id": "T000002R001080",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a member leaves a server\n                * @event Client#guildMemberRemove\n                * @prop {Guild} guild The guild\n                * @prop {Member | Object} member The member. If the member is not cached, this will be an object with `id` and `user` key\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 655,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a member leaves a server",
      "kind": "event",
      "name": "guildMemberRemove",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Member",
              "Object"
            ]
          },
          "description": "The member. If the member is not cached, this will be an object with `id` and `user` key",
          "name": "member"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildMemberRemove",
      "scope": "instance",
      "___id": "T000002R001083",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild becomes available\n                            * @event Client#guildAvailable\n                            * @prop {Guild} guild The guild\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 672,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild becomes available",
      "kind": "event",
      "name": "guildAvailable",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildAvailable",
      "scope": "instance",
      "___id": "T000002R001087",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild is created. This happens when:\n                            * - the client creates a guild\n                            * - the client joins a guild\n                            * @event Client#guildCreate\n                            * @prop {Guild} guild The guild\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 679,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild is created. This happens when:\n- the client creates a guild\n- the client joins a guild",
      "kind": "event",
      "name": "guildCreate",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildCreate",
      "scope": "instance",
      "___id": "T000002R001088",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when an unavailable guild is created\n                    * @event Client#unavailableGuildCreate\n                    * @prop {UnavailableGuild} guild The unavailable guild\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 694,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when an unavailable guild is created",
      "kind": "event",
      "name": "unavailableGuildCreate",
      "properties": [
        {
          "type": {
            "names": [
              "UnavailableGuild"
            ]
          },
          "description": "The unavailable guild",
          "name": "guild"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:unavailableGuildCreate",
      "scope": "instance",
      "___id": "T000002R001089",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild is updated\n                * @event Client#guildUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Object} oldGuild The old guild data\n                * @prop {String} oldGuild.name The name of the guild\n                * @prop {Number} oldGuild.verificationLevel The guild verification level\n                * @prop {String} oldGuild.region The region of the guild\n                * @prop {String?} oldGuild.icon The hash of the guild icon, or null if no icon\n                * @prop {String} oldGuild.afkChannelID The ID of the AFK voice channel\n                * @prop {Number} oldGuild.afkTimeout The AFK timeout in seconds\n                * @prop {String} oldGuild.ownerID The ID of the user that is the guild owner\n                * @prop {String?} oldGuild.splash The hash of the guild splash image, or null if no splash (VIP only)\n                * @prop {String?} oldGuild.banner The hash of the guild banner image, or null if no splash (VIP only)\n                * @prop {Object[]} oldGuild.features An array of guild features\n                * @prop {Object[]} oldGuild.emojis An array of guild emojis\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 728,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild is updated",
      "kind": "event",
      "name": "guildUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old guild data",
          "name": "oldGuild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the guild",
          "name": "oldGuild.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The guild verification level",
          "name": "oldGuild.verificationLevel"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The region of the guild",
          "name": "oldGuild.region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild icon, or null if no icon",
          "name": "oldGuild.icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the AFK voice channel",
          "name": "oldGuild.afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The AFK timeout in seconds",
          "name": "oldGuild.afkTimeout"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that is the guild owner",
          "name": "oldGuild.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild splash image, or null if no splash (VIP only)",
          "name": "oldGuild.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild banner image, or null if no splash (VIP only)",
          "name": "oldGuild.banner"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "An array of guild features",
          "name": "oldGuild.features"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "An array of guild emojis",
          "name": "oldGuild.emojis"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildUpdate",
      "scope": "instance",
      "___id": "T000002R001109",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild becomes unavailable\n                    * @event Client#guildUnavailable\n                    * @prop {Guild} guild The guild\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 766,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild becomes unavailable",
      "kind": "event",
      "name": "guildUnavailable",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildUnavailable",
      "scope": "instance",
      "___id": "T000002R001112",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild is deleted. This happens when:\n                    * - the client left the guild\n                    * - the client was kicked/banned from the guild\n                    * - the guild was literally deleted\n                    * @event Client#guildDelete\n                    * @prop {Guild} guild The guild\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 773,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild is deleted. This happens when:\n- the client left the guild\n- the client was kicked/banned from the guild\n- the guild was literally deleted",
      "kind": "event",
      "name": "guildDelete",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildDelete",
      "scope": "instance",
      "___id": "T000002R001113",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user is banned from a guild\n                * @event Client#guildBanAdd\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 788,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a user is banned from a guild",
      "kind": "event",
      "name": "guildBanAdd",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The banned user",
          "name": "user"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildBanAdd",
      "scope": "instance",
      "___id": "T000002R001115",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user is unbanned from a guild\n                * @event Client#guildBanRemove\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 798,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a user is unbanned from a guild",
      "kind": "event",
      "name": "guildBanRemove",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The banned user",
          "name": "user"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildBanRemove",
      "scope": "instance",
      "___id": "T000002R001116",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild role is created\n                * @event Client#guildRoleCreate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 808,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild role is created",
      "kind": "event",
      "name": "guildRoleCreate",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Role"
            ]
          },
          "description": "The role",
          "name": "role"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildRoleCreate",
      "scope": "instance",
      "___id": "T000002R001117",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild role is updated\n                * @event Client#guildRoleUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The updated role\n                * @prop {Object} oldRole The old role data\n                * @prop {String} oldRole.name The name of the role\n                * @prop {Boolean} oldRole.mentionable Whether the role is mentionable or not\n                * @prop {Boolean} oldRole.managed Whether a guild integration manages this role or not\n                * @prop {Boolean} oldRole.hoist Whether users with this role are hoisted in the user list or not\n                * @prop {Number} oldRole.color The hex color of the role in base 10\n                * @prop {Number} oldRole.position The position of the role\n                * @prop {Permission} oldRole.permissions The permissions number of the role\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 845,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild role is updated",
      "kind": "event",
      "name": "guildRoleUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Role"
            ]
          },
          "description": "The updated role",
          "name": "role"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old role data",
          "name": "oldRole"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the role",
          "name": "oldRole.name"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the role is mentionable or not",
          "name": "oldRole.mentionable"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether a guild integration manages this role or not",
          "name": "oldRole.managed"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether users with this role are hoisted in the user list or not",
          "name": "oldRole.hoist"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The hex color of the role in base 10",
          "name": "oldRole.color"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the role",
          "name": "oldRole.position"
        },
        {
          "type": {
            "names": [
              "Permission"
            ]
          },
          "description": "The permissions number of the role",
          "name": "oldRole.permissions"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildRoleUpdate",
      "scope": "instance",
      "___id": "T000002R001130",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild role is deleted\n                * @event Client#guildRoleDelete\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 863,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild role is deleted",
      "kind": "event",
      "name": "guildRoleDelete",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Role"
            ]
          },
          "description": "The role",
          "name": "role"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildRoleDelete",
      "scope": "instance",
      "___id": "T000002R001131",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a channel is created\n                    * @event Client#channelCreate\n                    * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The channel\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 889,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a channel is created",
      "kind": "event",
      "name": "channelCreate",
      "properties": [
        {
          "type": {
            "names": [
              "TextChannel",
              "VoiceChannel",
              "CategoryChannel",
              "StoreChannel",
              "NewsChannel",
              "GuildChannel",
              "PrivateChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:channelCreate",
      "scope": "instance",
      "___id": "T000002R001137",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a channel is updated\n                * @event Client#channelUpdate\n                * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The updated channel\n                * @prop {Object} oldChannel The old channel data\n                * @prop {String} oldChannel.name The name of the channel\n                * @prop {Number} oldChannel.position The position of the channel\n                * @prop {Boolean} oldChannel.nsfw Whether the channel is NSFW or not\n                * @prop {String?} oldChannel.topic The topic of the channel (text channels only)\n                * @prop {Number} oldChannel.type The type of the old channel\n                * @prop {Number?} oldChannel.bitrate The bitrate of the channel (voice channels only)\n                * @prop {Collection} oldChannel.permissionOverwrites Collection of PermissionOverwrites in this channel\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 967,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a channel is updated",
      "kind": "event",
      "name": "channelUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "TextChannel",
              "VoiceChannel",
              "CategoryChannel",
              "StoreChannel",
              "NewsChannel",
              "GuildChannel",
              "PrivateChannel"
            ]
          },
          "description": "The updated channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old channel data",
          "name": "oldChannel"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "oldChannel.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "oldChannel.position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is NSFW or not",
          "name": "oldChannel.nsfw"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The topic of the channel (text channels only)",
          "name": "oldChannel.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the old channel",
          "name": "oldChannel.type"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The bitrate of the channel (voice channels only)",
          "name": "oldChannel.bitrate"
        },
        {
          "type": {
            "names": [
              "Collection"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "oldChannel.permissionOverwrites"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:channelUpdate",
      "scope": "instance",
      "___id": "T000002R001159",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a channel is deleted\n                            * @event Client#channelDelete\n                            * @prop {PrivateChannel | TextChannel | VoiceChannel | CategoryChannel} channel The channel\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 989,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a channel is deleted",
      "kind": "event",
      "name": "channelDelete",
      "properties": [
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel",
              "VoiceChannel",
              "CategoryChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:channelDelete",
      "scope": "instance",
      "___id": "T000002R001161",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a call is created\n                * @event Client#callCreate\n                * @prop {Call} call The call\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1050,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a call is created",
      "kind": "event",
      "name": "callCreate",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The call",
          "name": "call"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:callCreate",
      "scope": "instance",
      "___id": "T000002R001176",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a call is updated\n                * @event Client#callUpdate\n                * @prop {Call} call The updated call\n                * @prop {Object} oldCall The old call data\n                * @prop {String[]} oldCall.participants The IDs of the call participants\n                * @prop {Number?} oldCall.endedTimestamp The timestamp of the call end\n                * @prop {String[]?} oldCall.ringing The IDs of people that were being rung\n                * @prop {String?} oldCall.region The region of the call server\n                * @prop {Boolean} oldCall.unavailable Whether the call was unavailable or not\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1070,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a call is updated",
      "kind": "event",
      "name": "callUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The updated call",
          "name": "call"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old call data",
          "name": "oldCall"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the call participants",
          "name": "oldCall.participants"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The timestamp of the call end",
          "name": "oldCall.endedTimestamp"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "nullable": true,
          "description": "The IDs of people that were being rung",
          "name": "oldCall.ringing"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The region of the call server",
          "name": "oldCall.region"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the call was unavailable or not",
          "name": "oldCall.unavailable"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:callUpdate",
      "scope": "instance",
      "___id": "T000002R001184",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a call is deleted\n                * @event Client#callDelete\n                * @prop {Call} call The call\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1091,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a call is deleted",
      "kind": "event",
      "name": "callDelete",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The call",
          "name": "call"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:callDelete",
      "scope": "instance",
      "___id": "T000002R001188",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user joins a group channel\n                * @event Client#channelRecipientAdd\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1101,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a user joins a group channel",
      "kind": "event",
      "name": "channelRecipientAdd",
      "properties": [
        {
          "type": {
            "names": [
              "GroupChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user",
          "name": "user"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:channelRecipientAdd",
      "scope": "instance",
      "___id": "T000002R001190",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user leaves a group channel\n                * @event Client#channelRecipientRemove\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1112,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a user leaves a group channel",
      "kind": "event",
      "name": "channelRecipientRemove",
      "properties": [
        {
          "type": {
            "names": [
              "GroupChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user",
          "name": "user"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:channelRecipientRemove",
      "scope": "instance",
      "___id": "T000002R001192",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a client receives a friend suggestion\n                * @event Client#friendSuggestionCreate\n                * @prop {User} user The suggested user\n                * @prop {String[]} reasons Array of reasons why this suggestion was made\n                * @prop {Number} reasons.type Type of reason?\n                * @prop {String} reasons.platform_type Platform you share with the user\n                * @prop {String} reasons.name Username of suggested user on that platform\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1122,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a client receives a friend suggestion",
      "kind": "event",
      "name": "friendSuggestionCreate",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The suggested user",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of reasons why this suggestion was made",
          "name": "reasons"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Type of reason?",
          "name": "reasons.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Platform you share with the user",
          "name": "reasons.platform_type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Username of suggested user on that platform",
          "name": "reasons.name"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:friendSuggestionCreate",
      "scope": "instance",
      "___id": "T000002R001193",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a client's friend suggestion is removed for any reason\n                * @event Client#friendSuggestionDelete\n                * @prop {User} user The suggested user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1135,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a client's friend suggestion is removed for any reason",
      "kind": "event",
      "name": "friendSuggestionDelete",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The suggested user",
          "name": "user"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:friendSuggestionDelete",
      "scope": "instance",
      "___id": "T000002R001194",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when Discord sends member chunks\n                * @event Client#guildMemberChunk\n                * @prop {Guild} guild The guild the chunked members are in\n                * @prop {Array<Member>} members The members in the chunk\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1166,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when Discord sends member chunks",
      "kind": "event",
      "name": "guildMemberChunk",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild the chunked members are in",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Array.<Member>"
            ]
          },
          "description": "The members in the chunk",
          "name": "members"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildMemberChunk",
      "scope": "instance",
      "___id": "T000002R001197",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a shard finishes resuming\n                    * @event Shard#resume\n                    * @prop {Number} id The ID of the shard\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1235,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a shard finishes resuming",
      "kind": "event",
      "name": "resume",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Shard",
      "longname": "Shard#event:resume",
      "scope": "instance",
      "___id": "T000002R001218",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard finishes processing the ready packet\n                * @event Client#shardPreReady\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1305,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a shard finishes processing the ready packet",
      "kind": "event",
      "name": "shardPreReady",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:shardPreReady",
      "scope": "instance",
      "___id": "T000002R001232",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a relationship is updated\n                    * @event Client#relationshipUpdate\n                    * @prop {Relationship} relationship The relationship\n                    * @prop {Object} oldRelationship The old relationship data\n                    * @prop {Number} oldRelationship.type The old type of the relationship\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1346,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a relationship is updated",
      "kind": "event",
      "name": "relationshipUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Relationship"
            ]
          },
          "description": "The relationship",
          "name": "relationship"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old relationship data",
          "name": "oldRelationship"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The old type of the relationship",
          "name": "oldRelationship.type"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:relationshipUpdate",
      "scope": "instance",
      "___id": "T000002R001244",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a relationship is added\n                    * @event Client#relationshipAdd\n                    * @prop {Relationship} relationship The relationship\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1355,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a relationship is added",
      "kind": "event",
      "name": "relationshipAdd",
      "properties": [
        {
          "type": {
            "names": [
              "Relationship"
            ]
          },
          "description": "The relationship",
          "name": "relationship"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:relationshipAdd",
      "scope": "instance",
      "___id": "T000002R001245",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a relationship is removed\n                * @event Client#relationshipRemove\n                * @prop {Relationship} relationship The relationship\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1368,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a relationship is removed",
      "kind": "event",
      "name": "relationshipRemove",
      "properties": [
        {
          "type": {
            "names": [
              "Relationship"
            ]
          },
          "description": "The relationship",
          "name": "relationship"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:relationshipRemove",
      "scope": "instance",
      "___id": "T000002R001246",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild's emojis are updated\n                * @event Client#guildEmojisUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Array} emojis The updated emojis of the guild\n                * @prop {Array} oldEmojis The old emojis of the guild\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1380,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a guild's emojis are updated",
      "kind": "event",
      "name": "guildEmojisUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The updated emojis of the guild",
          "name": "emojis"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The old emojis of the guild",
          "name": "oldEmojis"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:guildEmojisUpdate",
      "scope": "instance",
      "___id": "T000002R001249",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a channel pin timestamp is updated\n                * @event Client#channelPinUpdate\n                * @prop {PrivateChannel | TextChannel} channel The channel\n                * @prop {Number} timestamp The new timestamp\n                * @prop {Number} oldTimestamp The old timestamp\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1398,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a channel pin timestamp is updated",
      "kind": "event",
      "name": "channelPinUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new timestamp",
          "name": "timestamp"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The old timestamp",
          "name": "oldTimestamp"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:channelPinUpdate",
      "scope": "instance",
      "___id": "T000002R001253",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a channel's webhooks are updated\n                * @event Client#webhooksUpdate\n                * @prop {Object} data The update data\n                * @prop {String} channelID The ID of the channel that webhooks were updated in\n                * @prop {String} guildID The ID of the guild that webhooks were updated in\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1409,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a channel's webhooks are updated",
      "kind": "event",
      "name": "webhooksUpdate",
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The update data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel that webhooks were updated in",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild that webhooks were updated in",
          "name": "guildID"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:webhooksUpdate",
      "scope": "instance",
      "___id": "T000002R001254",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when the shard encounters an unknown packet\n                * @event Client#unknown\n                * @prop {Object} packet The unknown packet\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1456,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when the shard encounters an unknown packet",
      "kind": "event",
      "name": "unknown",
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The unknown packet",
          "name": "packet"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:unknown",
      "scope": "instance",
      "___id": "T000002R001263",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when the shard turns ready\n                * @event Shard#ready\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1563,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when the shard turns ready",
      "kind": "event",
      "name": "ready",
      "memberof": "Shard",
      "longname": "Shard#event:ready",
      "scope": "instance",
      "___id": "T000002R001294",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the shard establishes a connection\n            * @event Client#connect\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1587,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when the shard establishes a connection",
      "kind": "event",
      "name": "connect",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:connect",
      "scope": "instance",
      "___id": "T000002R001302",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the shard receives a websocket packet\n            * @event Client#rawWS\n            * @prop {Object} packet The packet\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1693,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when the shard receives a websocket packet",
      "kind": "event",
      "name": "rawWS",
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The packet",
          "name": "packet"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:rawWS",
      "scope": "instance",
      "___id": "T000002R001337",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired to warn of something weird but non-breaking happening\n                * @event Client#warn\n                * @prop {String} message The warning message\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1704,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired to warn of something weird but non-breaking happening",
      "kind": "event",
      "name": "warn",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The warning message",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:warn",
      "scope": "instance",
      "___id": "T000002R001338",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard receives an OP:10/HELLO packet\n                * @event Client#hello\n                * @prop {String[]} trace The Discord server trace of the gateway and session servers\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1756,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a shard receives an OP:10/HELLO packet",
      "kind": "event",
      "name": "hello",
      "properties": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The Discord server trace of the gateway and session servers",
          "name": "trace"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:hello",
      "scope": "instance",
      "___id": "T000002R001346",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
      "meta": {
        "range": [
          84180,
          84269
        ],
        "filename": "Shard.js",
        "lineno": 1811,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {
          "id": "astnode100019744",
          "name": "Shard#editAFK",
          "type": "MethodDefinition",
          "paramnames": [
            "afk"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the bot user is AFK or not",
          "name": "afk"
        }
      ],
      "name": "editAFK",
      "longname": "Shard#editAFK",
      "kind": "function",
      "memberof": "Shard",
      "scope": "instance",
      "___id": "T000002R001364",
      "___s": true
    },
    {
      "comment": "/**\n    * Updates the bot's status on all guilds the shard is in\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is default, 1 is streaming (Twitch only)\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
      "meta": {
        "range": [
          84752,
          85452
        ],
        "filename": "Shard.js",
        "lineno": 1825,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {
          "id": "astnode100019764",
          "name": "Shard#editStatus",
          "type": "MethodDefinition",
          "paramnames": [
            "status",
            "game"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Updates the bot's status on all guilds the shard is in",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Sets the bot's active game, null to clear",
          "name": "game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Sets the name of the bot's active game",
          "name": "game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The type of game. 0 is default, 1 is streaming (Twitch only)",
          "name": "game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the url of the shard's active game",
          "name": "game.url"
        }
      ],
      "name": "editStatus",
      "longname": "Shard#editStatus",
      "kind": "function",
      "memberof": "Shard",
      "scope": "instance",
      "___id": "T000002R001366",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard turns ready\n                * @event Client#shardReady\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 51,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a shard turns ready",
      "kind": "event",
      "name": "shardReady",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:shardReady",
      "scope": "instance",
      "___id": "T000002R001401",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when all shards turn ready\n                * @event Client#ready\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 67,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when all shards turn ready",
      "kind": "event",
      "name": "ready",
      "memberof": "Client",
      "longname": "Client#event:ready",
      "scope": "instance",
      "___id": "T000002R001405",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard resumes\n                * @event Client#shardResume\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 73,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a shard resumes",
      "kind": "event",
      "name": "shardResume",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:shardResume",
      "scope": "instance",
      "___id": "T000002R001406",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard disconnects\n                * @event Client#shardDisconnect\n                * @prop {Error?} error The error, if any\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 91,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when a shard disconnects",
      "kind": "event",
      "name": "shardDisconnect",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "nullable": true,
          "description": "The error, if any",
          "name": "error"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:shardDisconnect",
      "scope": "instance",
      "___id": "T000002R001410",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when all shards disconnect\n                * @event Client#disconnect\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 105,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "description": "Fired when all shards disconnect",
      "kind": "event",
      "name": "disconnect",
      "memberof": "Client",
      "longname": "Client#event:disconnect",
      "scope": "instance",
      "___id": "T000002R001414",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          467,
          1322
        ],
        "filename": "RequestHandler.js",
        "lineno": 16,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/rest",
        "code": {
          "id": "astnode100021538",
          "name": "RequestHandler",
          "type": "MethodDefinition",
          "paramnames": [
            "client",
            "forceQueueing"
          ]
        }
      },
      "name": "RequestHandler",
      "longname": "RequestHandler",
      "kind": "class",
      "scope": "global",
      "classdesc": "Handles API requests",
      "___id": "T000002R001499",
      "___s": true
    },
    {
      "comment": "/**\n    * Make an API request\n    * @arg {String} method Uppercase HTTP method\n    * @arg {String} url URL of the endpoint\n    * @arg {Boolean} auth Whether to add the Authorization header and token or not\n    * @arg {Object} [body] Request payload\n    * @arg {Object} [file] File object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Object>} Resolves with the returned JSON data\n    */",
      "meta": {
        "range": [
          2504,
          16775
        ],
        "filename": "RequestHandler.js",
        "lineno": 67,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/rest",
        "code": {
          "id": "astnode100021757",
          "name": "RequestHandler#request",
          "type": "MethodDefinition",
          "paramnames": [
            "method",
            "url",
            "auth",
            "body",
            "file",
            "_route",
            "short"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Make an API request",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Uppercase HTTP method",
          "name": "method"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "URL of the endpoint",
          "name": "url"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether to add the Authorization header and token or not",
          "name": "auth"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Request payload",
          "name": "body"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "File object",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with the returned JSON data"
        }
      ],
      "name": "request",
      "longname": "RequestHandler#request",
      "kind": "function",
      "memberof": "RequestHandler",
      "scope": "instance",
      "___id": "T000002R001521",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          781,
          1109
        ],
        "filename": "Call.js",
        "lineno": 20,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100023715",
          "name": "Call",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "channel"
          ]
        }
      },
      "name": "Call",
      "longname": "Call",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a call",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the call",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of the call's creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "GroupChannel"
            ]
          },
          "description": "The call channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Collection.<VoiceState>"
            ]
          },
          "description": "The voice states of the call participants",
          "name": "voiceStates"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the call participants",
          "name": "participants"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The timestamp of the call end",
          "name": "endedTimestamp"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "nullable": true,
          "description": "The IDs of people that still have not responded to the call request",
          "name": "ringing"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The region of the call server",
          "name": "region"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the call is unavailable or not",
          "name": "unavailable"
        }
      ],
      "___id": "T000002R001618",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when the bot user is rung in a call\n                * @event Client#callRing\n                * @prop {Call} call The call\n                */",
      "meta": {
        "filename": "Call.js",
        "lineno": 38,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {}
      },
      "description": "Fired when the bot user is rung in a call",
      "kind": "event",
      "name": "callRing",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The call",
          "name": "call"
        }
      ],
      "memberof": "Client",
      "longname": "Client#event:callRing",
      "scope": "instance",
      "___id": "T000002R001629",
      "___s": true
    },
    {
      "comment": "/**\n* Represents a guild category channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Collection<GuildChannel>} channels A collection of guild channels that are part of this category\n*/",
      "meta": {
        "range": [
          848,
          1250
        ],
        "filename": "CategoryChannel.js",
        "lineno": 20,
        "columnno": 0,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100023976",
          "name": "CategoryChannel",
          "type": "ClassDeclaration",
          "paramnames": []
        }
      },
      "classdesc": "Represents a guild category channel",
      "augments": [
        "GuildChannel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the channel",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the category this channel belongs to",
          "name": "parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is an NSFW channel or not",
          "name": "nsfw"
        },
        {
          "type": {
            "names": [
              "Collection.<PermissionOverwrite>"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Collection.<GuildChannel>"
            ]
          },
          "description": "A collection of guild channels that are part of this category",
          "name": "channels"
        }
      ],
      "name": "CategoryChannel",
      "longname": "CategoryChannel",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R001638",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          496,
          576
        ],
        "filename": "Channel.js",
        "lineno": 14,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024059",
          "name": "Channel",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        }
      },
      "name": "Channel",
      "longname": "Channel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a channel. You also probably want to look at CategoryChannel, GroupChannel, NewsChannel, PrivateChannel, TextChannel, and VoiceChannel.",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of the channel's creation",
          "name": "createdAt"
        }
      ],
      "___id": "T000002R001647",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          339,
          428
        ],
        "filename": "ExtendedUser.js",
        "lineno": 13,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024339",
          "name": "ExtendedUser",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "ExtendedUser",
      "longname": "ExtendedUser",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents an extended user",
      "augments": [
        "User"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The email of the user",
          "name": "email"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the account email has been verified",
          "name": "verified"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the user has enabled two-factor authentication",
          "name": "mfaEnabled"
        }
      ],
      "___id": "T000002R001664",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          971,
          1295
        ],
        "filename": "GroupChannel.js",
        "lineno": 23,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024494",
          "name": "GroupChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "GroupChannel",
      "longname": "GroupChannel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a group channel. See PrivateChannel docs for additional properties.",
      "augments": [
        "PrivateChannel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "nullable": true,
          "description": "The current group call, if any",
          "name": "call"
        },
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "nullable": true,
          "description": "The previous group call, if any",
          "name": "lastCall"
        },
        {
          "type": {
            "names": [
              "Collection.<User>"
            ]
          },
          "description": "The recipients in this private channel",
          "name": "recipients"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the group channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the group channel icon",
          "name": "icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The URL of the group channel icon",
          "name": "iconURL"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that is the group owner",
          "name": "ownerID"
        }
      ],
      "___id": "T000002R001680",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @returns {Promise<GroupChannel>}\n    */",
      "meta": {
        "range": [
          2037,
          2136
        ],
        "filename": "GroupChannel.js",
        "lineno": 52,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024604",
          "name": "GroupChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the channel's properties",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the channel owner (group channels only)",
          "name": "options.ownerID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<GroupChannel>"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "GroupChannel#edit",
      "kind": "function",
      "memberof": "GroupChannel",
      "scope": "instance",
      "___id": "T000002R001686",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a user to the group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          2265,
          2376
        ],
        "filename": "GroupChannel.js",
        "lineno": 61,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024625",
          "name": "GroupChannel#addRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a user to the group",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addRecipient",
      "longname": "GroupChannel#addRecipient",
      "kind": "function",
      "memberof": "GroupChannel",
      "scope": "instance",
      "___id": "T000002R001687",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a user from the group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          2510,
          2627
        ],
        "filename": "GroupChannel.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024646",
          "name": "GroupChannel#removeRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a user from the group",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeRecipient",
      "longname": "GroupChannel#removeRecipient",
      "kind": "function",
      "memberof": "GroupChannel",
      "scope": "instance",
      "___id": "T000002R001688",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the group's icon with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the icon (any power of two between 16 and 2048)\n    */",
      "meta": {
        "range": [
          3092,
          3613
        ],
        "filename": "GroupChannel.js",
        "lineno": 83,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024707",
          "name": "GroupChannel#dynamicIconURL",
          "type": "MethodDefinition",
          "paramnames": [
            "format",
            "size"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the group's icon with the given format and size",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")",
          "name": "format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The size of the icon (any power of two between 16 and 2048)",
          "name": "size"
        }
      ],
      "name": "dynamicIconURL",
      "longname": "GroupChannel#dynamicIconURL",
      "kind": "function",
      "memberof": "GroupChannel",
      "scope": "instance",
      "___id": "T000002R001690",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          3022,
          5979
        ],
        "filename": "Guild.js",
        "lineno": 51,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100024883",
          "name": "Guild",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "Guild",
      "longname": "Guild",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of the guild's creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the guild",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The guild verification level",
          "name": "verificationLevel"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The region of the guild",
          "name": "region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild icon, or null if no icon",
          "name": "icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the AFK voice channel",
          "name": "afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The AFK timeout in seconds",
          "name": "afkTimeout"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\"",
          "name": "defaultNotifications"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The admin 2FA level for the guild. 0 is not required, 1 is required",
          "name": "mfaLevel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of when the bot account joined the guild",
          "name": "joinedAt"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that is the guild owner",
          "name": "ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the default channel for system messages (built-in join messages)",
          "name": "systemChannelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild splash image, or null if no splash (VIP only)",
          "name": "splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild banner image, or null if no banner (VIP only)",
          "name": "banner"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the guild is unavailable or not",
          "name": "unavailable"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the guild is \"large\" by \"some Discord standard\"",
          "name": "large"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The maximum number of people that can be online in a guild at once (returned from REST API only)",
          "name": "maxPresences"
        },
        {
          "type": {
            "names": [
              "Collection.<VoiceState>"
            ]
          },
          "description": "Collection of voice states in the guild",
          "name": "voiceStates"
        },
        {
          "type": {
            "names": [
              "Collection.<GuildChannel>"
            ]
          },
          "description": "Collection of Channels in the guild",
          "name": "channels"
        },
        {
          "type": {
            "names": [
              "Collection.<Member>"
            ]
          },
          "description": "Collection of Members in the guild",
          "name": "members"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Number of members in the guild",
          "name": "memberCount"
        },
        {
          "type": {
            "names": [
              "Collection.<Role>"
            ]
          },
          "description": "Collection of Roles in the guild",
          "name": "roles"
        },
        {
          "type": {
            "names": [
              "Shard"
            ]
          },
          "description": "The Shard that owns the guild",
          "name": "shard"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "An array of guild feature strings",
          "name": "features"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "An array of guild emoji objects",
          "name": "emojis"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The URL of the guild's icon",
          "name": "iconURL"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The explicit content filter level for the guild. 0 is off, 1 is on for people without roles, 2 is on for all",
          "name": "explicitContentFilter"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Nitro boost level of the guild",
          "name": "premiumTier"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The total number of users currently boosting this guild",
          "name": "premiumSubscriptionCount"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The vanity URL of the guild (VIP only)",
          "name": "vanityURL"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Preferred guild language",
          "name": "preferredLocale"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The description for the guild (VIP only)",
          "name": "description"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The maximum amount of members for the guild",
          "name": "maxMembers"
        }
      ],
      "___id": "T000002R001707",
      "___s": true
    },
    {
      "comment": "/**\n    * Request all guild members from Discord\n    * @arg {Number} [timeout] The number of milliseconds to wait before resolving early. Defaults to the `requestTimeout` client option\n    * @returns {Promise<Number>} Resolves with the total number of fetched members.\n    */",
      "meta": {
        "range": [
          8727,
          8856
        ],
        "filename": "Guild.js",
        "lineno": 202,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100025685",
          "name": "Guild#fetchAllMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "timeout"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Request all guild members from Discord",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The number of milliseconds to wait before resolving early. Defaults to the `requestTimeout` client option",
          "name": "timeout"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the total number of fetched members."
        }
      ],
      "name": "fetchAllMembers",
      "longname": "Guild#fetchAllMembers",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001756",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the guild's icon with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the icon (any power of two between 16 and 2048)\n    */",
      "meta": {
        "range": [
          9340,
          9843
        ],
        "filename": "Guild.js",
        "lineno": 215,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100025757",
          "name": "Guild#dynamicIconURL",
          "type": "MethodDefinition",
          "paramnames": [
            "format",
            "size"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the guild's icon with the given format and size",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")",
          "name": "format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The size of the icon (any power of two between 16 and 2048)",
          "name": "size"
        }
      ],
      "name": "dynamicIconURL",
      "longname": "Guild#dynamicIconURL",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001758",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the guild's splash with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")\n    * @param {Number} [size] The size of the icon (any power of two between 16 and 2048)\n    */",
      "meta": {
        "range": [
          10583,
          11092
        ],
        "filename": "Guild.js",
        "lineno": 242,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100025932",
          "name": "Guild#dynamicSplashURL",
          "type": "MethodDefinition",
          "paramnames": [
            "format",
            "size"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the guild's splash with the given format and size",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")",
          "name": "format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The size of the icon (any power of two between 16 and 2048)",
          "name": "size"
        }
      ],
      "name": "dynamicSplashURL",
      "longname": "Guild#dynamicSplashURL",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001763",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the guild's banner with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")\n    * @param {Number} [size] The size of the icon (any power of two between 16 and 2048)\n    */",
      "meta": {
        "range": [
          11349,
          11857
        ],
        "filename": "Guild.js",
        "lineno": 261,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026013",
          "name": "Guild#dynamicBannerURL",
          "type": "MethodDefinition",
          "paramnames": [
            "format",
            "size"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the guild's banner with the given format and size",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")",
          "name": "format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The size of the icon (any power of two between 16 and 2048)",
          "name": "size"
        }
      ],
      "name": "dynamicBannerURL",
      "longname": "Guild#dynamicBannerURL",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001766",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel in the guild\n    * @arg {String} name The name of the channel\n    * @arg {Number} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
      "meta": {
        "range": [
          13177,
          13327
        ],
        "filename": "Guild.js",
        "lineno": 290,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026094",
          "name": "Guild#createChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "name",
            "type",
            "reason",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel in the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object",
              "String"
            ]
          },
          "optional": true,
          "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent category channel for this channel",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing permission overwrite objects",
          "name": "options.permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "options.reason"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (voice channels only)",
          "name": "options.userLimit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
            ]
          }
        }
      ],
      "name": "createChannel",
      "longname": "Guild#createChannel",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001769",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a emoji in the guild\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          13735,
          13862
        ],
        "filename": "Guild.js",
        "lineno": 303,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026121",
          "name": "Guild#createEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a emoji in the guild",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The base 64 encoded string",
          "name": "options.image"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "name": "createEmoji",
      "longname": "Guild#createEmoji",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001770",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a emoji in the guild\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          14276,
          14417
        ],
        "filename": "Guild.js",
        "lineno": 316,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026144",
          "name": "Guild#editEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "emojiID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a emoji in the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji you want to modify",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "name": "editEmoji",
      "longname": "Guild#editEmoji",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001771",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a emoji in the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          14615,
          14742
        ],
        "filename": "Guild.js",
        "lineno": 326,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026169",
          "name": "Guild#deleteEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "emojiID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a emoji in the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteEmoji",
      "longname": "Guild#deleteEmoji",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001772",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild role\n    * @arg {Object} [options] The properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          15341,
          15461
        ],
        "filename": "Guild.js",
        "lineno": 341,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026192",
          "name": "Guild#createRole",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a guild role",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The properties to set",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "createRole",
      "longname": "Guild#createRole",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001773",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the prune count for the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @returns {Promise<Number>} Resolves with the number of users that would be pruned\n    */",
      "meta": {
        "range": [
          15681,
          15785
        ],
        "filename": "Guild.js",
        "lineno": 350,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026215",
          "name": "Guild#getPruneCount",
          "type": "MethodDefinition",
          "paramnames": [
            "days"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the prune count for the guild",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of users that would be pruned"
        }
      ],
      "name": "getPruneCount",
      "longname": "Guild#getPruneCount",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001774",
      "___s": true
    },
    {
      "comment": "/**\n    * Begin pruning the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of pruned users\n    */",
      "meta": {
        "range": [
          16051,
          16169
        ],
        "filename": "Guild.js",
        "lineno": 360,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026236",
          "name": "Guild#pruneMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "days",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Begin pruning the guild",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of pruned users"
        }
      ],
      "name": "pruneMembers",
      "longname": "Guild#pruneMembers",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001775",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[])>}\n    */",
      "meta": {
        "range": [
          16360,
          16463
        ],
        "filename": "Guild.js",
        "lineno": 368,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026259",
          "name": "Guild#getRESTChannels",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>)>"
            ]
          }
        }
      ],
      "name": "getRESTChannels",
      "longname": "Guild#getRESTChannels",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001776",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
      "meta": {
        "range": [
          16640,
          16739
        ],
        "filename": "Guild.js",
        "lineno": 376,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026278",
          "name": "Guild#getRESTEmojis",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "An array of guild emoji objects"
        }
      ],
      "name": "getRESTEmojis",
      "longname": "Guild#getRESTEmojis",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001777",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
      "meta": {
        "range": [
          16943,
          17056
        ],
        "filename": "Guild.js",
        "lineno": 385,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026297",
          "name": "Guild#getRESTEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "emojiID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An emoji object"
        }
      ],
      "name": "getRESTEmoji",
      "longname": "Guild#getRESTEmoji",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001778",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
      "meta": {
        "range": [
          17346,
          17473
        ],
        "filename": "Guild.js",
        "lineno": 395,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026318",
          "name": "Guild#getRESTMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The max number of members to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest user ID of the previous page",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Member>>"
            ]
          }
        }
      ],
      "name": "getRESTMembers",
      "longname": "Guild#getRESTMembers",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001779",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
      "meta": {
        "range": [
          17667,
          17784
        ],
        "filename": "Guild.js",
        "lineno": 404,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026341",
          "name": "Guild#getRESTMember",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Member>"
            ]
          }
        }
      ],
      "name": "getRESTMember",
      "longname": "Guild#getRESTMember",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001780",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @returns {Promise<Role[]>}\n    */",
      "meta": {
        "range": [
          17926,
          18023
        ],
        "filename": "Guild.js",
        "lineno": 412,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026362",
          "name": "Guild#getRESTRoles",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Role>>"
            ]
          }
        }
      ],
      "name": "getRESTRoles",
      "longname": "Guild#getRESTRoles",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001781",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's embed object\n    * @returns {Promise<Object>} A guild embed object\n    */",
      "meta": {
        "range": [
          18131,
          18220
        ],
        "filename": "Guild.js",
        "lineno": 420,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026381",
          "name": "Guild#getEmbed",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a guild's embed object",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild embed object"
        }
      ],
      "name": "getEmbed",
      "longname": "Guild#getEmbed",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001782",
      "___s": true
    },
    {
      "comment": "/**\n    * Get possible voice regions for a guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
      "meta": {
        "range": [
          18368,
          18466
        ],
        "filename": "Guild.js",
        "lineno": 428,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026400",
          "name": "Guild#getVoiceRegions",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get possible voice regions for a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of voice region objects"
        }
      ],
      "name": "getVoiceRegions",
      "longname": "Guild#getVoiceRegions",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001783",
      "___s": true
    },
    {
      "comment": "/**\n    * Leaves the voice channel in this guild\n    */",
      "meta": {
        "range": [
          18532,
          18630
        ],
        "filename": "Guild.js",
        "lineno": 435,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026419",
          "name": "Guild#leaveVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Leaves the voice channel in this guild",
      "name": "leaveVoiceChannel",
      "longname": "Guild#leaveVoiceChannel",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001784",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the guild role\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          19274,
          19406
        ],
        "filename": "Guild.js",
        "lineno": 451,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026438",
          "name": "Guild#editRole",
          "type": "MethodDefinition",
          "paramnames": [
            "roleID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the guild role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "editRole",
      "longname": "Guild#editRole",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001785",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a role\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          19588,
          19706
        ],
        "filename": "Guild.js",
        "lineno": 461,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026463",
          "name": "Guild#deleteRole",
          "type": "MethodDefinition",
          "paramnames": [
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteRole",
      "longname": "Guild#deleteRole",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001786",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with an Object containing `users` and `audit_log_entries` keys\n    */",
      "meta": {
        "range": [
          20065,
          20214
        ],
        "filename": "Guild.js",
        "lineno": 472,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026486",
          "name": "Guild#getAuditLogs",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "actionType"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the audit logs for a guild",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The maximum number of entries to return",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get entries before this entry ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Filter entries by action type",
          "name": "actionType"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an Object containing `users` and `audit_log_entries` keys"
        }
      ],
      "name": "getAuditLogs",
      "longname": "Guild#getAuditLogs",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001787",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of integrations for the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
      "meta": {
        "range": [
          20327,
          20430
        ],
        "filename": "Guild.js",
        "lineno": 480,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026511",
          "name": "Guild#getIntegrations",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of integrations for the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<GuildIntegration>>"
            ]
          }
        }
      ],
      "name": "getIntegrations",
      "longname": "Guild#getIntegrations",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001788",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild integration\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          20927,
          21076
        ],
        "filename": "Guild.js",
        "lineno": 493,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026530",
          "name": "Guild#editIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "integrationID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild integration",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "What to do when a user's subscription runs out",
          "name": "options.expireBehavior"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "How long before the integration's role is removed from an unsubscribed user",
          "name": "options.expireGracePeriod"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Whether to enable integration emoticons or not",
          "name": "options.enableEmoticons"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editIntegration",
      "longname": "Guild#editIntegration",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001789",
      "___s": true
    },
    {
      "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          21222,
          21353
        ],
        "filename": "Guild.js",
        "lineno": 502,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026553",
          "name": "Guild#syncIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Force a guild integration to sync",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "syncIntegration",
      "longname": "Guild#syncIntegration",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001790",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild integration\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          21492,
          21627
        ],
        "filename": "Guild.js",
        "lineno": 511,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026574",
          "name": "Guild#deleteIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a guild integration",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteIntegration",
      "longname": "Guild#deleteIntegration",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001791",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in the guild\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          21718,
          21811
        ],
        "filename": "Guild.js",
        "lineno": 519,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026595",
          "name": "Guild#getInvites",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getInvites",
      "longname": "Guild#getInvites",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001792",
      "___s": true
    },
    {
      "comment": "/**\n    * Returns the vanity url of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          21899,
          21990
        ],
        "filename": "Guild.js",
        "lineno": 527,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026614",
          "name": "Guild#getVanity",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the vanity url of the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "getVanity",
      "longname": "Guild#getVanity",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001793",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild member\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's guild nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          22626,
          22771
        ],
        "filename": "Guild.js",
        "lineno": 543,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026633",
          "name": "Guild#editMember",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "The array of role IDs the member should have",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Set the member's guild nickname, \"\" to remove",
          "name": "options.nick"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server mute the member",
          "name": "options.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server deafen the member",
          "name": "options.deaf"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the voice channel to move the member to (must be in voice)",
          "name": "options.channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editMember",
      "longname": "Guild#editMember",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001794",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          23018,
          23167
        ],
        "filename": "Guild.js",
        "lineno": 554,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026658",
          "name": "Guild#addMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a role to a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addMemberRole",
      "longname": "Guild#addMemberRole",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001795",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          23419,
          23574
        ],
        "filename": "Guild.js",
        "lineno": 565,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026683",
          "name": "Guild#removeMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a role from a guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMemberRole",
      "longname": "Guild#removeMemberRole",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001796",
      "___s": true
    },
    {
      "comment": "/**\n    * Kick a member from the guild\n    * @arg {String} userID The ID of the member\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          23773,
          23896
        ],
        "filename": "Guild.js",
        "lineno": 575,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026708",
          "name": "Guild#kickMember",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Kick a member from the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "kickMember",
      "longname": "Guild#kickMember",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001797",
      "___s": true
    },
    {
      "comment": "/**\n    * Ban a user from the guild\n    * @arg {String} userID The ID of the member\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for\n    * @arg {String} [reason] Reason for the ban\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24150,
          24309
        ],
        "filename": "Guild.js",
        "lineno": 586,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026731",
          "name": "Guild#banMember",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "deleteMessageDays",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Ban a user from the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of days to delete messages for",
          "name": "deleteMessageDays"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Reason for the ban",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "banMember",
      "longname": "Guild#banMember",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001798",
      "___s": true
    },
    {
      "comment": "/**\n    * Unban a user from the guild\n    * @arg {String} userID The ID of the member\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24507,
          24632
        ],
        "filename": "Guild.js",
        "lineno": 596,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026756",
          "name": "Guild#unbanMember",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unban a user from the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unbanMember",
      "longname": "Guild#unbanMember",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001799",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the member to transfer guild ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          26183,
          26296
        ],
        "filename": "Guild.js",
        "lineno": 618,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026779",
          "name": "Guild#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the guild",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The region of the guild",
          "name": "options.region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The guild verification level",
          "name": "options.verificationLevel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
          "name": "options.defaultNotifications"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
          "name": "options.explicitContentFilter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the system channel",
          "name": "options.systemChannelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the AFK voice channel",
          "name": "options.afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The AFK timeout in seconds",
          "name": "options.afkTimeout"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the member to transfer guild ownership to (bot user must be owner)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.banner"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "Guild#edit",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001800",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the guild (bot user must be owner)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          26390,
          26475
        ],
        "filename": "Guild.js",
        "lineno": 626,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026802",
          "name": "Guild#delete",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the guild (bot user must be owner)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "delete",
      "longname": "Guild#delete",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001801",
      "___s": true
    },
    {
      "comment": "/**\n    * Leave the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          26543,
          26626
        ],
        "filename": "Guild.js",
        "lineno": 634,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026821",
          "name": "Guild#leave",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Leave the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "leave",
      "longname": "Guild#leave",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001802",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the ban list of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          26773,
          26860
        ],
        "filename": "Guild.js",
        "lineno": 642,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026840",
          "name": "Guild#getBans",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the ban list of the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of {reason: String, user: User}"
        }
      ],
      "name": "getBans",
      "longname": "Guild#getBans",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001803",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          27055,
          27154
        ],
        "filename": "Guild.js",
        "lineno": 651,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026859",
          "name": "Guild#getBan",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a ban from the ban list of a guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the banned user",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {reason: String, user: User}"
        }
      ],
      "name": "getBan",
      "longname": "Guild#getBan",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001804",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the bot's nickname in the guild\n    * @arg {String} nick The nickname\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          27281,
          27383
        ],
        "filename": "Guild.js",
        "lineno": 660,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026880",
          "name": "Guild#editNickname",
          "type": "MethodDefinition",
          "paramnames": [
            "nick"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the bot's nickname in the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The nickname",
          "name": "nick"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editNickname",
      "longname": "Guild#editNickname",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "___id": "T000002R001805",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in the guild\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          27521,
          27616
        ],
        "filename": "Guild.js",
        "lineno": 668,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026901",
          "name": "Guild#getWebhooks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the webhooks in the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "name": "getWebhooks",
      "longname": "Guild#getWebhooks",
      "kind": "function",
      "memberof": "Guild",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001806",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          2624,
          4413
        ],
        "filename": "GuildAuditLogEntry.js",
        "lineno": 37,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100026997",
          "name": "GuildAuditLogEntry",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "guild"
          ]
        }
      },
      "name": "GuildAuditLogEntry",
      "longname": "GuildAuditLogEntry",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild audit log entry describing a moderation action",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the entry",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild containing the entry",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The action type of the entry. See Constants.AuditLogActions for more details",
          "name": "actionType"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The reason for the action",
          "name": "reason"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user that performed the action",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the action target",
          "name": "targetID"
        },
        {
          "type": {
            "names": [
              "CategoryChannel",
              "Guild",
              "Member",
              "Invite",
              "Role",
              "Object",
              "TextChannel",
              "VoiceChannel",
              "NewsChannel"
            ]
          },
          "nullable": true,
          "description": "The object of the action target\nIf the item is not cached, this property will be null\nIf the action targets a guild, this could be a Guild object\nIf the action targets a guild channel, this could be a CategoryChannel, TextChannel, or VoiceChannel object\nIf the action targets a member, this could be a Member object\nIf the action targets a role, this could be a Role object\nIf the action targets an invite, this is an Invite object\nIf the action targets a webhook, this is null\nIf the action targets a emoji, this could be an emoji Object\nIf the action targets a message, this is a User object",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The properties of the targeted object before the action was taken\nFor example, if a channel was renamed from #general to #potato, this would be `{name: \"general\"}``",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The properties of the targeted object after the action was taken\nFor example, if a channel was renamed from #general to #potato, this would be `{name: \"potato\"}``",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The number of messages deleted, action type 72 (MESSAGE_DELETE) only",
          "name": "count"
        },
        {
          "type": {
            "names": [
              "CategoryChannel",
              "TextChannel",
              "VoiceChannel"
            ]
          },
          "nullable": true,
          "description": "The channel containing the deleted messages, action type 72 (MESSAGE_DELETE) only",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The number of days of inactivity to prune for, action type 21 (MEMBER_PRUNE) only",
          "name": "deleteMemberDays"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The number of members pruned from the server, action type 21 (MEMBER_PRUNE) only",
          "name": "membersRemoved"
        },
        {
          "type": {
            "names": [
              "Member",
              "Object"
            ]
          },
          "nullable": true,
          "description": "The member described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the member is not cached, this could be {id: String}",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "Role",
              "Object"
            ]
          },
          "nullable": true,
          "description": "The role described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the role is not cached, this could be {id: String, name: String}",
          "name": "role"
        }
      ],
      "___id": "T000002R001814",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1022,
          1235
        ],
        "filename": "GuildChannel.js",
        "lineno": 23,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027619",
          "name": "GuildChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "GuildChannel",
      "longname": "GuildChannel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild channel. You also probably want to look at CategoryChannel, NewsChannel, StoreChannel, TextChannel, and VoiceChannel.",
      "augments": [
        "Channel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the channel",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the category this channel belongs to",
          "name": "parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is an NSFW channel or not",
          "name": "nsfw"
        },
        {
          "type": {
            "names": [
              "Collection.<PermissionOverwrite>"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "permissionOverwrites"
        }
      ],
      "___id": "T000002R001853",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
      "meta": {
        "range": [
          2153,
          3114
        ],
        "filename": "GuildChannel.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027786",
          "name": "GuildChannel#permissionsOf",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the channel-specific permissions of a member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Permission"
            ]
          }
        }
      ],
      "name": "permissionsOf",
      "longname": "GuildChannel#permissionsOf",
      "kind": "function",
      "memberof": "GuildChannel",
      "scope": "instance",
      "___id": "T000002R001864",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          4125,
          4240
        ],
        "filename": "GuildChannel.js",
        "lineno": 99,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027932",
          "name": "GuildChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the channel's properties",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "GuildChannel#edit",
      "kind": "function",
      "memberof": "GuildChannel",
      "scope": "instance",
      "___id": "T000002R001878",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4462,
          4579
        ],
        "filename": "GuildChannel.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027955",
          "name": "GuildChannel#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editPosition",
      "longname": "GuildChannel#editPosition",
      "kind": "function",
      "memberof": "GuildChannel",
      "scope": "instance",
      "___id": "T000002R001879",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4720,
          4821
        ],
        "filename": "GuildChannel.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027976",
          "name": "GuildChannel#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "delete",
      "longname": "GuildChannel#delete",
      "kind": "function",
      "memberof": "GuildChannel",
      "scope": "instance",
      "___id": "T000002R001880",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
      "meta": {
        "range": [
          5302,
          5483
        ],
        "filename": "GuildChannel.js",
        "lineno": 130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027997",
          "name": "GuildChannel#editPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel permission overwrite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PermissionOverwrite>"
            ]
          }
        }
      ],
      "name": "editPermission",
      "longname": "GuildChannel#editPermission",
      "kind": "function",
      "memberof": "GuildChannel",
      "scope": "instance",
      "___id": "T000002R001881",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5714,
          5861
        ],
        "filename": "GuildChannel.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028026",
          "name": "GuildChannel#deletePermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a channel permission overwrite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deletePermission",
      "longname": "GuildChannel#deletePermission",
      "kind": "function",
      "memberof": "GuildChannel",
      "scope": "instance",
      "___id": "T000002R001882",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1144,
          1503
        ],
        "filename": "GuildIntegration.js",
        "lineno": 25,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028089",
          "name": "GuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "guild"
          ]
        }
      },
      "name": "GuildIntegration",
      "longname": "GuildIntegration",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild integration",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of the guild integration's creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the integration",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of the integration",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role connected to the integration",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user connected to the integration",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Info on the integration account",
          "name": "account"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration account",
          "name": "account.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the integration account",
          "name": "account.name"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the integration is enabled or not",
          "name": "enabled"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the integration is syncing or not",
          "name": "syncing"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "behavior of expired subscriptions",
          "name": "expireBehavior"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "grace period for expired subscriptions",
          "name": "expireGracePeriod"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether integration emoticons are enabled or not",
          "name": "enableEmoticons"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "number of subscribers",
          "name": "subscriberCount"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Unix timestamp of last integration sync",
          "name": "syncedAt"
        }
      ],
      "___id": "T000002R001888",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the guild integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          2301,
          2446
        ],
        "filename": "GuildIntegration.js",
        "lineno": 54,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028229",
          "name": "GuildIntegration#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the guild integration",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "What to do when a user's subscription runs out",
          "name": "options.expireBehavior"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "How long before the integration's role is removed from an unsubscribed user",
          "name": "options.expireGracePeriod"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Whether to enable integration emoticons or not",
          "name": "options.enableEmoticons"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "GuildIntegration#edit",
      "kind": "function",
      "memberof": "GuildIntegration",
      "scope": "instance",
      "___id": "T000002R001903",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the guild integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          2527,
          2660
        ],
        "filename": "GuildIntegration.js",
        "lineno": 62,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028263",
          "name": "GuildIntegration#delete",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the guild integration",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "delete",
      "longname": "GuildIntegration#delete",
      "kind": "function",
      "memberof": "GuildIntegration",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001904",
      "___s": true
    },
    {
      "comment": "/**\n    * Force the guild integration to sync\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          2748,
          2877
        ],
        "filename": "GuildIntegration.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028295",
          "name": "GuildIntegration#sync",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Force the guild integration to sync",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "sync",
      "longname": "GuildIntegration#sync",
      "kind": "function",
      "memberof": "GuildIntegration",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001905",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1478,
          2875
        ],
        "filename": "Invite.js",
        "lineno": 29,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028374",
          "name": "Invite",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "Invite",
      "longname": "Invite",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents an invite. The nullable properties will be null if the bot user does not have manage channel or manage server permissions for the invite's channel/server.",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The invite code",
          "name": "code"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Info on the invite channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite's channel",
          "name": "channel.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the invite's channel",
          "name": "channel.name"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "Info on the invite guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite's guild",
          "name": "guild.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the invite's guild",
          "name": "guild.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the invite splash screen",
          "name": "guild.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild icon",
          "name": "guild.icon"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The number of text channels in the guild",
          "name": "guild.textChannelCount"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The number of voice channels in the guild",
          "name": "guild.voiceChannelCount"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "nullable": true,
          "description": "The invite creator",
          "name": "inviter"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The number of invite uses",
          "name": "uses"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The max number of invite uses",
          "name": "maxUses"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "How long the invite lasts in seconds",
          "name": "maxAge"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "nullable": true,
          "description": "Whether the invite is temporary or not",
          "name": "temporary"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "Timestamp of invite creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "nullable": true,
          "description": "Whether the invite was revoked or not",
          "name": "revoked"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The **approximate** presence count for the guild",
          "name": "presenceCount"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The **approximate** member count for the guild",
          "name": "memberCount"
        }
      ],
      "___id": "T000002R001911",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          3076,
          3178
        ],
        "filename": "Invite.js",
        "lineno": 66,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028618",
          "name": "Invite#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the invite",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "delete",
      "longname": "Invite#delete",
      "kind": "function",
      "memberof": "Invite",
      "scope": "instance",
      "___id": "T000002R001932",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          2435,
          3140
        ],
        "filename": "Member.js",
        "lineno": 42,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028722",
          "name": "Member",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "guild",
            "client"
          ]
        }
      },
      "name": "Member",
      "longname": "Member",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a server member",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the member",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild the member is in",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of when the member joined the guild",
          "name": "joinedAt"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The member's status. Either \"online\", \"idle\", \"dnd\", or \"offline\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The member's per-client status",
          "name": "clientStatus"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The member's status on web. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"online\" for bots",
          "name": "clientStatus.web"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The member's status on desktop. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots",
          "name": "clientStatus.desktop"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The member's status on mobile. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots",
          "name": "clientStatus.mobile"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "nullable": true,
          "description": "The member's current activities",
          "name": "activities"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The active game the member is playing",
          "name": "game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the active game",
          "name": "game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
          "name": "game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The url of the active game",
          "name": "game.url"
        },
        {
          "type": {
            "names": [
              "VoiceState"
            ]
          },
          "description": "The voice state of the member",
          "name": "voiceState"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The server nickname of the member",
          "name": "nick"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "An array of role IDs this member is a part of",
          "name": "roles"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user object of the member",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Permission"
            ]
          },
          "description": "The guild-wide permissions of the member",
          "name": "permission"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The hash for the default avatar of a user if there is no avatar set",
          "name": "defaultAvatar"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of user creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the user is an OAuth bot or not",
          "name": "bot"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The username of the user",
          "name": "username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The discriminator of the user",
          "name": "discriminator"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the user's avatar, or null if no avatar",
          "name": "avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The URL of the user's default avatar",
          "name": "defaultAvatarURL"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The URL of the user's avatar which can be either a JPG or GIF",
          "name": "avatarURL"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The URL of the user's avatar (always a JPG)",
          "name": "staticAvatarURL"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of when the member boosted the guild",
          "name": "premiumSince"
        }
      ],
      "___id": "T000002R001943",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the guild member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the user should have\n    * @arg {String} [options.nick] Set the user's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the user\n    * @arg {Boolean} [options.deaf] Server deafen the user\n    * @arg {String} [options.channelID] The ID of the voice channel to move the user to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          6611,
          6767
        ],
        "filename": "Member.js",
        "lineno": 180,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029314",
          "name": "Member#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the guild member",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "The array of role IDs the user should have",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Set the user's server nickname, \"\" to remove",
          "name": "options.nick"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server mute the user",
          "name": "options.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server deafen the user",
          "name": "options.deaf"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the voice channel to move the user to (must be in voice)",
          "name": "options.channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "Member#edit",
      "kind": "function",
      "memberof": "Member",
      "scope": "instance",
      "___id": "T000002R001984",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a role to the guild member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          6966,
          7126
        ],
        "filename": "Member.js",
        "lineno": 190,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029350",
          "name": "Member#addRole",
          "type": "MethodDefinition",
          "paramnames": [
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a role to the guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addRole",
      "longname": "Member#addRole",
      "kind": "function",
      "memberof": "Member",
      "scope": "instance",
      "___id": "T000002R001985",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a role from the guild member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          7330,
          7496
        ],
        "filename": "Member.js",
        "lineno": 200,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029386",
          "name": "Member#removeRole",
          "type": "MethodDefinition",
          "paramnames": [
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a role from the guild member",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeRole",
      "longname": "Member#removeRole",
      "kind": "function",
      "memberof": "Member",
      "scope": "instance",
      "___id": "T000002R001986",
      "___s": true
    },
    {
      "comment": "/**\n    * Kick the member from the guild\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          7649,
          7787
        ],
        "filename": "Member.js",
        "lineno": 209,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029422",
          "name": "Member#kick",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Kick the member from the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "kick",
      "longname": "Member#kick",
      "kind": "function",
      "memberof": "Member",
      "scope": "instance",
      "___id": "T000002R001987",
      "___s": true
    },
    {
      "comment": "/**\n    * Ban the user from the guild\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8017,
          8191
        ],
        "filename": "Member.js",
        "lineno": 219,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029456",
          "name": "Member#ban",
          "type": "MethodDefinition",
          "paramnames": [
            "deleteMessageDays",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Ban the user from the guild",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of days to delete messages for",
          "name": "deleteMessageDays"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "ban",
      "longname": "Member#ban",
      "kind": "function",
      "memberof": "Member",
      "scope": "instance",
      "___id": "T000002R001988",
      "___s": true
    },
    {
      "comment": "/**\n    * Unban the user from the guild\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8343,
          8483
        ],
        "filename": "Member.js",
        "lineno": 228,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029492",
          "name": "Member#unban",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unban the user from the guild",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unban",
      "longname": "Member#unban",
      "kind": "function",
      "memberof": "Member",
      "scope": "instance",
      "___id": "T000002R001989",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          2234,
          7367
        ],
        "filename": "Message.js",
        "lineno": 40,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100029591",
          "name": "Message",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "Message",
      "longname": "Message",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a message",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel",
              "NewsChannel"
            ]
          },
          "description": "The channel the message is in",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of message creation",
          "name": "timestamp"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the message",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The message author",
          "name": "author"
        },
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "nullable": true,
          "description": "The message author with server-specific data",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "Array.<User>"
            ]
          },
          "description": "Array of mentioned users",
          "name": "mentions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Message content",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "Message content with mentions replaced by names, and @everyone/@here escaped",
          "name": "cleanContent"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentioned roles' ids",
          "name": "roleMentions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentions channels' ids",
          "name": "channelMentions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "Timestamp of latest message edit",
          "name": "editedTimestamp"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether to play the message using TTS or not",
          "name": "tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the message mentions everyone/here or not",
          "name": "mentionEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "An object containing the reference to the original message if it is a crossposted message",
          "name": "messageReference"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The id of the original message this message was crossposted from",
          "name": "messageReference.messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The id of the channel this message was crossposted from",
          "name": "messageReference.channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The id of the guild this message was crossposted from",
          "name": "messageReference.guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Message flags (see constants)",
          "name": "flags"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "Array of attachments",
          "name": "attachments"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "Array of embeds",
          "name": "embeds"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The activity specified in the message",
          "name": "activity"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The application of the activity in the message",
          "name": "application"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "An object containing the reactions on the message",
          "name": "reactions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of times the reaction was used",
          "name": "reactions.count"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether or not the bot user did the reaction",
          "name": "reactions.me"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the message is pinned or not",
          "name": "pinned"
        },
        {
          "type": {
            "names": [
              "Command"
            ]
          },
          "nullable": true,
          "description": "The Command used in the Message, if any (CommandClient only)",
          "name": "command"
        }
      ],
      "___id": "T000002R001999",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          11995,
          12111
        ],
        "filename": "Message.js",
        "lineno": 272,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100030959",
          "name": "Message#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the message",
      "params": [
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "Message#edit",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "___id": "T000002R002072",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          12179,
          12277
        ],
        "filename": "Message.js",
        "lineno": 280,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100030985",
          "name": "Message#pin",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Pin the message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "pin",
      "longname": "Message#pin",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002073",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          12347,
          12449
        ],
        "filename": "Message.js",
        "lineno": 288,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031009",
          "name": "Message#unpin",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Unpin the message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unpin",
      "longname": "Message#unpin",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002074",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          12862,
          13038
        ],
        "filename": "Message.js",
        "lineno": 300,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031033",
          "name": "Message#getReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of users who reacted with a specific reaction",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "name": "getReaction",
      "longname": "Message#getReaction",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "___id": "T000002R002075",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          13297,
          13445
        ],
        "filename": "Message.js",
        "lineno": 310,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031065",
          "name": "Message#addReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a reaction to a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addReaction",
      "longname": "Message#addReaction",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "___id": "T000002R002076",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          13724,
          13878
        ],
        "filename": "Message.js",
        "lineno": 320,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031093",
          "name": "Message#removeReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a reaction from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeReaction",
      "longname": "Message#removeReaction",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "___id": "T000002R002077",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          13966,
          14088
        ],
        "filename": "Message.js",
        "lineno": 328,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031121",
          "name": "Message#removeReactions",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove all reactions from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeReactions",
      "longname": "Message#removeReactions",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002078",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          14229,
          14347
        ],
        "filename": "Message.js",
        "lineno": 337,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031145",
          "name": "Message#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "delete",
      "longname": "Message#delete",
      "kind": "function",
      "memberof": "Message",
      "scope": "instance",
      "___id": "T000002R002079",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1138,
          1288
        ],
        "filename": "NewsChannel.js",
        "lineno": 24,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031220",
          "name": "NewsChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "guild",
            "messageLimit"
          ]
        }
      },
      "name": "NewsChannel",
      "longname": "NewsChannel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild news channel",
      "augments": [
        "TextChannel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the channel",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the category this channel belongs to",
          "name": "parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is an NSFW channel or not",
          "name": "nsfw"
        },
        {
          "type": {
            "names": [
              "Collection.<PermissionOverwrite>"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Collection.<Message>"
            ]
          },
          "description": "Collection of Messages in this channel",
          "name": "messages"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the last message in this channel",
          "name": "lastMessageID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The timestamp of the last pinned message",
          "name": "lastPinTimestamp"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The topic of the channel",
          "name": "topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled. Always 0 in NewsChannel",
          "name": "rateLimitPerUser"
        }
      ],
      "___id": "T000002R002085",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          899,
          1006
        ],
        "filename": "Permission.js",
        "lineno": 24,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031273",
          "name": "Permission",
          "type": "MethodDefinition",
          "paramnames": [
            "allow",
            "deny"
          ]
        }
      },
      "name": "Permission",
      "longname": "Permission",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a calculated permissions number",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The allowed permissions number",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The denied permissions number",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "A JSON representation of the permissions number.\nIf a permission key isn't there, it is not set by this permission.\nIf a permission key is false, it is denied by the permission.\nIf a permission key is true, it is allowed by the permission.\ni.e.:\n{\n  \"readMessages\": true,\n  \"sendMessages\": true,\n  \"manageMessages\": false\n}\nIn the above example, readMessages and sendMessages are allowed permissions, and manageMessages is denied. Everything else is not explicitly set.\n[A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
          "name": "json"
        }
      ],
      "___id": "T000002R002092",
      "___s": true
    },
    {
      "comment": "/**\n    * Check if this permission allows a specific permission\n    * @arg {String} permission The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)\n    * @returns {Boolean} Whether the permission allows the specified permission\n    */",
      "meta": {
        "range": [
          1815,
          1895
        ],
        "filename": "Permission.js",
        "lineno": 51,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031368",
          "name": "Permission#has",
          "type": "MethodDefinition",
          "paramnames": [
            "permission"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Check if this permission allows a specific permission",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
          "name": "permission"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the permission allows the specified permission"
        }
      ],
      "name": "has",
      "longname": "Permission#has",
      "kind": "function",
      "memberof": "Permission",
      "scope": "instance",
      "___id": "T000002R002100",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          295,
          416
        ],
        "filename": "PermissionOverwrite.js",
        "lineno": 12,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031420",
          "name": "PermissionOverwrite",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        }
      },
      "name": "PermissionOverwrite",
      "longname": "PermissionOverwrite",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a permission overwrite",
      "augments": [
        "Permission"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwrite",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        }
      ],
      "___id": "T000002R002106",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          773,
          1235
        ],
        "filename": "PrivateChannel.js",
        "lineno": 21,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031520",
          "name": "PrivateChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "PrivateChannel",
      "longname": "PrivateChannel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a private channel",
      "augments": [
        "Channel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the last message in this channel",
          "name": "lastMessageID"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The recipient in this private channel (private channels only)",
          "name": "recipient"
        },
        {
          "type": {
            "names": [
              "Collection.<Message>"
            ]
          },
          "description": "Collection of Messages in this channel",
          "name": "messages"
        }
      ],
      "___id": "T000002R002120",
      "___s": true
    },
    {
      "comment": "/**\n    * Ring fellow group channel recipient(s)\n    * @arg {String[]} recipients The IDs of the recipients to ring\n    */",
      "meta": {
        "range": [
          1368,
          1525
        ],
        "filename": "PrivateChannel.js",
        "lineno": 37,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031603",
          "name": "PrivateChannel#ring",
          "type": "MethodDefinition",
          "paramnames": [
            "recipients"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Ring fellow group channel recipient(s)",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the recipients to ring",
          "name": "recipients"
        }
      ],
      "name": "ring",
      "longname": "PrivateChannel#ring",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002128",
      "___s": true
    },
    {
      "comment": "/**\n    * Check if the channel has an existing call\n    */",
      "meta": {
        "range": [
          1594,
          1741
        ],
        "filename": "PrivateChannel.js",
        "lineno": 46,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031629",
          "name": "PrivateChannel#syncCall",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Check if the channel has an existing call",
      "name": "syncCall",
      "longname": "PrivateChannel#syncCall",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002130",
      "___s": true
    },
    {
      "comment": "/**\n    * Leave the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          1811,
          1897
        ],
        "filename": "PrivateChannel.js",
        "lineno": 56,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031658",
          "name": "PrivateChannel#leave",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Leave the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "leave",
      "longname": "PrivateChannel#leave",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002132",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in a text channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          1986,
          2139
        ],
        "filename": "PrivateChannel.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031677",
          "name": "PrivateChannel#sendTyping",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Send typing status in a text channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "sendTyping",
      "longname": "PrivateChannel#sendTyping",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002133",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          2293,
          2459
        ],
        "filename": "PrivateChannel.js",
        "lineno": 73,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031712",
          "name": "PrivateChannel#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a previous message in a text channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "getMessage",
      "longname": "PrivateChannel#getMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002134",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          2854,
          3060
        ],
        "filename": "PrivateChannel.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031749",
          "name": "PrivateChannel#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a previous message in a text channel",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getMessages",
      "longname": "PrivateChannel#getMessages",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002135",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in a text channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          3158,
          3298
        ],
        "filename": "PrivateChannel.js",
        "lineno": 93,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031792",
          "name": "PrivateChannel#getPins",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the pins in a text channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getPins",
      "longname": "PrivateChannel#getPins",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002136",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in a text channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          4188,
          4368
        ],
        "filename": "PrivateChannel.js",
        "lineno": 110,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031827",
          "name": "PrivateChannel#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a message in a text channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
      "params": [
        {
          "type": {
            "names": [
              "String",
              "Object"
            ]
          },
          "description": "A string or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A file object",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "createMessage",
      "longname": "PrivateChannel#createMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002137",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          5212,
          5398
        ],
        "filename": "PrivateChannel.js",
        "lineno": 124,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031866",
          "name": "PrivateChannel#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "editMessage",
      "longname": "PrivateChannel#editMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002138",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5516,
          5682
        ],
        "filename": "PrivateChannel.js",
        "lineno": 133,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031905",
          "name": "PrivateChannel#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Pin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "pinMessage",
      "longname": "PrivateChannel#pinMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002139",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5802,
          5972
        ],
        "filename": "PrivateChannel.js",
        "lineno": 142,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031942",
          "name": "PrivateChannel#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unpin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unpinMessage",
      "longname": "PrivateChannel#unpinMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002140",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          6437,
          6683
        ],
        "filename": "PrivateChannel.js",
        "lineno": 155,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031979",
          "name": "PrivateChannel#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of users who reacted with a specific reaction",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "name": "getMessageReaction",
      "longname": "PrivateChannel#getMessageReaction",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002141",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          6994,
          7212
        ],
        "filename": "PrivateChannel.js",
        "lineno": 166,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032024",
          "name": "PrivateChannel#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a reaction to a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addMessageReaction",
      "longname": "PrivateChannel#addMessageReaction",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002142",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          7543,
          7767
        ],
        "filename": "PrivateChannel.js",
        "lineno": 177,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032065",
          "name": "PrivateChannel#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a reaction from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReaction",
      "longname": "PrivateChannel#removeMessageReaction",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002143",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          7907,
          8097
        ],
        "filename": "PrivateChannel.js",
        "lineno": 186,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032106",
          "name": "PrivateChannel#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove all reactions from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReactions",
      "longname": "PrivateChannel#removeMessageReactions",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002144",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8288,
          8476
        ],
        "filename": "PrivateChannel.js",
        "lineno": 196,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032143",
          "name": "PrivateChannel#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessage",
      "longname": "PrivateChannel#deleteMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002145",
      "___s": true
    },
    {
      "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8625,
          8797
        ],
        "filename": "PrivateChannel.js",
        "lineno": 205,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032182",
          "name": "PrivateChannel#unsendMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Un-send a message. You're welcome Programmix",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unsendMessage",
      "longname": "PrivateChannel#unsendMessage",
      "kind": "function",
      "memberof": "PrivateChannel",
      "scope": "instance",
      "___id": "T000002R002146",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          652,
          875
        ],
        "filename": "Relationship.js",
        "lineno": 16,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032259",
          "name": "Relationship",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "Relationship",
      "longname": "Relationship",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a Relationship",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The other user in the relationship",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of relationship. 1 is friend, 2 is block, 3 is incoming request, 4 is outgoing request",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The other user's status. Either \"online\", \"idle\", or \"offline\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The active game the other user is playing",
          "name": "game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the active game",
          "name": "game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
          "name": "game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The url of the active game",
          "name": "game.url"
        }
      ],
      "___id": "T000002R002152",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          877,
          988
        ],
        "filename": "Role.js",
        "lineno": 22,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032405",
          "name": "Role",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "guild"
          ]
        }
      },
      "name": "Role",
      "longname": "Role",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a role",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of the role's creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the role",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the role",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of role creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the role",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the role is mentionable or not",
          "name": "mentionable"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether a guild integration manages this role or not",
          "name": "managed"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether users with this role are hoisted in the user list or not",
          "name": "hoist"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The hex color of the role in base 10",
          "name": "color"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the role",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Permission"
            ]
          },
          "description": "The permissions representation of the role",
          "name": "permissions"
        }
      ],
      "___id": "T000002R002167",
      "___s": true
    },
    {
      "comment": "/**\n    * Generates a JSON representation of the role permissions\n    * @returns {Object}\n    */",
      "meta": {
        "range": [
          1787,
          1843
        ],
        "filename": "Role.js",
        "lineno": 56,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032541",
          "name": "Role#json",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Generates a JSON representation of the role permissions",
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          }
        }
      ],
      "name": "json",
      "longname": "Role#json",
      "kind": "member",
      "memberof": "Role",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002177",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the guild role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          2501,
          2650
        ],
        "filename": "Role.js",
        "lineno": 75,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032562",
          "name": "Role#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the guild role",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "name": "edit",
      "longname": "Role#edit",
      "kind": "function",
      "memberof": "Role",
      "scope": "instance",
      "___id": "T000002R002179",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          2863,
          3014
        ],
        "filename": "Role.js",
        "lineno": 84,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032598",
          "name": "Role#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the role's position. Note that role position numbers are highest on top and lowest at the bottom.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the role",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editPosition",
      "longname": "Role#editPosition",
      "kind": "function",
      "memberof": "Role",
      "scope": "instance",
      "___id": "T000002R002180",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          3152,
          3287
        ],
        "filename": "Role.js",
        "lineno": 93,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032632",
          "name": "Role#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the role",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "delete",
      "longname": "Role#delete",
      "kind": "function",
      "memberof": "Role",
      "scope": "instance",
      "___id": "T000002R002181",
      "___s": true
    },
    {
      "comment": "/**\n* Represents a store channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n*/",
      "meta": {
        "range": [
          683,
          726
        ],
        "filename": "StoreChannel.js",
        "lineno": 18,
        "columnno": 0,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032704",
          "name": "StoreChannel",
          "type": "ClassDeclaration",
          "paramnames": []
        }
      },
      "classdesc": "Represents a store channel",
      "augments": [
        "GuildChannel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the channel",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the category this channel belongs to",
          "name": "parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is an NSFW channel or not",
          "name": "nsfw"
        },
        {
          "type": {
            "names": [
              "Collection.<PermissionOverwrite>"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "permissionOverwrites"
        }
      ],
      "name": "StoreChannel",
      "longname": "StoreChannel",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R002185",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1205,
          1685
        ],
        "filename": "TextChannel.js",
        "lineno": 26,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032740",
          "name": "TextChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client",
            "messageLimit"
          ]
        }
      },
      "name": "TextChannel",
      "longname": "TextChannel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild text channel",
      "augments": [
        "GuildChannel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the channel",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the category this channel belongs to",
          "name": "parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is an NSFW channel or not",
          "name": "nsfw"
        },
        {
          "type": {
            "names": [
              "Collection.<PermissionOverwrite>"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Collection.<Message>"
            ]
          },
          "description": "Collection of Messages in this channel",
          "name": "messages"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the last message in this channel",
          "name": "lastMessageID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The timestamp of the last pinned message",
          "name": "lastPinTimestamp"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The topic of the channel",
          "name": "topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled",
          "name": "rateLimitPerUser"
        }
      ],
      "___id": "T000002R002192",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in the channel\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          2043,
          2160
        ],
        "filename": "TextChannel.js",
        "lineno": 49,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032859",
          "name": "TextChannel#getInvites",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getInvites",
      "longname": "TextChannel#getInvites",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002200",
      "___s": true
    },
    {
      "comment": "/**\n    * Create an invite for the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          2692,
          2845
        ],
        "filename": "TextChannel.js",
        "lineno": 63,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032886",
          "name": "TextChannel#createInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create an invite for the channel",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Invite generation options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How long the invite should last in seconds",
          "name": "options.maxAge"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How many uses the invite should last for",
          "name": "options.maxUses"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is temporary or not",
          "name": "options.temporary"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is unique or not",
          "name": "options.unique"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "createInvite",
      "longname": "TextChannel#createInvite",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002201",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in the channel\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          2985,
          3104
        ],
        "filename": "TextChannel.js",
        "lineno": 71,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032917",
          "name": "TextChannel#getWebhooks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the webhooks in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "name": "getWebhooks",
      "longname": "TextChannel#getWebhooks",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002202",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          3519,
          3674
        ],
        "filename": "TextChannel.js",
        "lineno": 83,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032944",
          "name": "TextChannel#createWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a channel webhook",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "name": "createWebhook",
      "longname": "TextChannel#createWebhook",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002203",
      "___s": true
    },
    {
      "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          3831,
          3971
        ],
        "filename": "TextChannel.js",
        "lineno": 92,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032975",
          "name": "TextChannel#deleteMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "messageIDs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Bulk delete messages (bot accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of message IDs to delete",
          "name": "messageIDs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessages",
      "longname": "TextChannel#deleteMessages",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002204",
      "___s": true
    },
    {
      "comment": "/**\n    * Purge previous messages in the channel with an optional filter (bot accounts only)\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
      "meta": {
        "range": [
          4483,
          4648
        ],
        "filename": "TextChannel.js",
        "lineno": 104,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033004",
          "name": "TextChannel#purge",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "filter",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Purge previous messages in the channel with an optional filter (bot accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of messages to search through, -1 for no limit",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional filter function that returns a boolean when passed a Message object",
          "name": "filter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of messages deleted"
        }
      ],
      "name": "purge",
      "longname": "TextChannel#purge",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002205",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4734,
          4887
        ],
        "filename": "TextChannel.js",
        "lineno": 112,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033039",
          "name": "TextChannel#sendTyping",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Send typing status in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "sendTyping",
      "longname": "TextChannel#sendTyping",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002206",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          5038,
          5204
        ],
        "filename": "TextChannel.js",
        "lineno": 121,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033074",
          "name": "TextChannel#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a previous message in the channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "getMessage",
      "longname": "TextChannel#getMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002207",
      "___s": true
    },
    {
      "comment": "/**\n    * Get previous messages in the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          5595,
          5801
        ],
        "filename": "TextChannel.js",
        "lineno": 133,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033111",
          "name": "TextChannel#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get previous messages in the channel",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getMessages",
      "longname": "TextChannel#getMessages",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002208",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in the channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          5896,
          6036
        ],
        "filename": "TextChannel.js",
        "lineno": 141,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033154",
          "name": "TextChannel#getPins",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all the pins in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "name": "getPins",
      "longname": "TextChannel#getPins",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002209",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in the channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          6923,
          7103
        ],
        "filename": "TextChannel.js",
        "lineno": 158,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033189",
          "name": "TextChannel#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a message in the channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
      "params": [
        {
          "type": {
            "names": [
              "String",
              "Object"
            ]
          },
          "description": "A string or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A file object",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "createMessage",
      "longname": "TextChannel#createMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002210",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          7947,
          8133
        ],
        "filename": "TextChannel.js",
        "lineno": 172,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033228",
          "name": "TextChannel#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "name": "editMessage",
      "longname": "TextChannel#editMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002211",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8251,
          8417
        ],
        "filename": "TextChannel.js",
        "lineno": 181,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033267",
          "name": "TextChannel#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Pin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "pinMessage",
      "longname": "TextChannel#pinMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002212",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8537,
          8707
        ],
        "filename": "TextChannel.js",
        "lineno": 190,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033304",
          "name": "TextChannel#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unpin a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unpinMessage",
      "longname": "TextChannel#unpinMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002213",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          9172,
          9418
        ],
        "filename": "TextChannel.js",
        "lineno": 203,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033341",
          "name": "TextChannel#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a list of users who reacted with a specific reaction",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "name": "getMessageReaction",
      "longname": "TextChannel#getMessageReaction",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002214",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          9729,
          9947
        ],
        "filename": "TextChannel.js",
        "lineno": 214,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033386",
          "name": "TextChannel#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a reaction to a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addMessageReaction",
      "longname": "TextChannel#addMessageReaction",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002215",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          10278,
          10502
        ],
        "filename": "TextChannel.js",
        "lineno": 225,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033427",
          "name": "TextChannel#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a reaction from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReaction",
      "longname": "TextChannel#removeMessageReaction",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002216",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          10642,
          10832
        ],
        "filename": "TextChannel.js",
        "lineno": 234,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033468",
          "name": "TextChannel#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove all reactions from a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeMessageReactions",
      "longname": "TextChannel#removeMessageReactions",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002217",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          11023,
          11211
        ],
        "filename": "TextChannel.js",
        "lineno": 244,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033505",
          "name": "TextChannel#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete a message",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "deleteMessage",
      "longname": "TextChannel#deleteMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002218",
      "___s": true
    },
    {
      "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          11360,
          11532
        ],
        "filename": "TextChannel.js",
        "lineno": 253,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033544",
          "name": "TextChannel#unsendMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Un-send a message. You're welcome Programmix",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "unsendMessage",
      "longname": "TextChannel#unsendMessage",
      "kind": "function",
      "memberof": "TextChannel",
      "scope": "instance",
      "___id": "T000002R002219",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          280,
          455
        ],
        "filename": "UnavailableGuild.js",
        "lineno": 12,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033621",
          "name": "UnavailableGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "UnavailableGuild",
      "longname": "UnavailableGuild",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the guild is unavailable or not",
          "name": "unavailable"
        },
        {
          "type": {
            "names": [
              "Shard"
            ]
          },
          "description": "The Shard that owns the guild",
          "name": "shard"
        }
      ],
      "___id": "T000002R002225",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1119,
          1451
        ],
        "filename": "User.js",
        "lineno": 24,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033715",
          "name": "User",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "client"
          ]
        }
      },
      "name": "User",
      "longname": "User",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a user",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of the user's creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the user",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The hash for the default avatar of a user if there is no avatar set",
          "name": "defaultAvatar"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of user creation",
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the user is an OAuth bot or not",
          "name": "bot"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The username of the user",
          "name": "username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The discriminator of the user",
          "name": "discriminator"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the user's avatar, or null if no avatar",
          "name": "avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The URL of the user's default avatar",
          "name": "defaultAvatarURL"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The URL of the user's avatar which can be either a JPG or GIF",
          "name": "avatarURL"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The URL of the user's avatar (always a JPG)",
          "name": "staticAvatarURL"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the user is an official Discord system user (e.g. urgent messages)",
          "name": "system"
        }
      ],
      "___id": "T000002R002236",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the user's avatar with the given format and size\n    * @arg {String} [format] The filetype of the avatar (\"jpg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the avatar (any power of two between 16 and 2048)\n    */",
      "meta": {
        "range": [
          2934,
          3543
        ],
        "filename": "User.js",
        "lineno": 78,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033962",
          "name": "User#dynamicAvatarURL",
          "type": "MethodDefinition",
          "paramnames": [
            "format",
            "size"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the user's avatar with the given format and size",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The filetype of the avatar (\"jpg\", \"png\", \"gif\", or \"webp\")",
          "name": "format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The size of the avatar (any power of two between 16 and 2048)",
          "name": "size"
        }
      ],
      "name": "dynamicAvatarURL",
      "longname": "User#dynamicAvatarURL",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "___id": "T000002R002250",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a DM channel with the user, or create one if it does not exist\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          3678,
          3770
        ],
        "filename": "User.js",
        "lineno": 100,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034057",
          "name": "User#getDMChannel",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a DM channel with the user, or create one if it does not exist",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "name": "getDMChannel",
      "longname": "User#getDMChannel",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002253",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a relationship with the user (user accounts only)\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          3975,
          4085
        ],
        "filename": "User.js",
        "lineno": 109,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034076",
          "name": "User#addRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "block"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a relationship with the user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If true, block the user. Otherwise, add the user as a friend",
          "name": "block"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "addRelationship",
      "longname": "User#addRelationship",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "___id": "T000002R002254",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a relationship with the user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4194,
          4298
        ],
        "filename": "User.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034097",
          "name": "User#removeRelationship",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a relationship with the user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "removeRelationship",
      "longname": "User#removeRelationship",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002255",
      "___s": true
    },
    {
      "comment": "/**\n    * Get profile data for the user (user accounts only)\n    * @returns {Promise<Object>} The user's profile data.\n    */",
      "meta": {
        "range": [
          4434,
          4526
        ],
        "filename": "User.js",
        "lineno": 125,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034116",
          "name": "User#getProfile",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get profile data for the user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's profile data."
        }
      ],
      "name": "getProfile",
      "longname": "User#getProfile",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002256",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the current user's note for the user (user accounts only)\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4675,
          4773
        ],
        "filename": "User.js",
        "lineno": 134,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034135",
          "name": "User#editNote",
          "type": "MethodDefinition",
          "paramnames": [
            "note"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Edit the current user's note for the user (user accounts only)",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The note",
          "name": "note"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "editNote",
      "longname": "User#editNote",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "___id": "T000002R002257",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the current user's note for another user (user accounts only)\n    */",
      "meta": {
        "range": [
          4869,
          4961
        ],
        "filename": "User.js",
        "lineno": 141,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034156",
          "name": "User#deleteNote",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Delete the current user's note for another user (user accounts only)",
      "name": "deleteNote",
      "longname": "User#deleteNote",
      "kind": "function",
      "memberof": "User",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002258",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          1033,
          1172
        ],
        "filename": "VoiceChannel.js",
        "lineno": 24,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034226",
          "name": "VoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "data",
            "guild"
          ]
        }
      },
      "name": "VoiceChannel",
      "longname": "VoiceChannel",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a guild voice channel",
      "augments": [
        "GuildChannel"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A string that mentions the channel",
          "name": "mention"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the channel",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild that owns the channel",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the category this channel belongs to",
          "name": "parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is an NSFW channel or not",
          "name": "nsfw"
        },
        {
          "type": {
            "names": [
              "Collection.<PermissionOverwrite>"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The bitrate of the channel",
          "name": "bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The max number of users that can join the channel",
          "name": "userLimit"
        },
        {
          "type": {
            "names": [
              "Collection.<Member>"
            ]
          },
          "nullable": true,
          "description": "Collection of Members in this channel",
          "name": "voiceMembers"
        }
      ],
      "___id": "T000002R002266",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in the channel\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          1512,
          1629
        ],
        "filename": "VoiceChannel.js",
        "lineno": 45,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034292",
          "name": "VoiceChannel#getInvites",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get all invites in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "name": "getInvites",
      "longname": "VoiceChannel#getInvites",
      "kind": "function",
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002271",
      "___s": true
    },
    {
      "comment": "/**\n    * Create an invite for the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          2161,
          2314
        ],
        "filename": "VoiceChannel.js",
        "lineno": 59,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034319",
          "name": "VoiceChannel#createInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create an invite for the channel",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Invite generation options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How long the invite should last in seconds",
          "name": "options.maxAge"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How many uses the invite should last for",
          "name": "options.maxUses"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is temporary or not",
          "name": "options.temporary"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is unique or not",
          "name": "options.unique"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "name": "createInvite",
      "longname": "VoiceChannel#createInvite",
      "kind": "function",
      "memberof": "VoiceChannel",
      "scope": "instance",
      "___id": "T000002R002272",
      "___s": true
    },
    {
      "comment": "/**\n    * Joins the channel.\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
      "meta": {
        "range": [
          2738,
          2864
        ],
        "filename": "VoiceChannel.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034350",
          "name": "VoiceChannel#join",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Joins the channel.",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "VoiceConnection constructor options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Whether the VoiceConnection will be part of a SharedStream or not",
          "name": "options.shared"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
          "name": "options.opusOnly"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<VoiceConnection>"
            ]
          },
          "description": "Resolves with a VoiceConnection"
        }
      ],
      "name": "join",
      "longname": "VoiceChannel#join",
      "kind": "function",
      "memberof": "VoiceChannel",
      "scope": "instance",
      "___id": "T000002R002273",
      "___s": true
    },
    {
      "comment": "/**\n    * Leaves the channel.\n    */",
      "meta": {
        "range": [
          2911,
          3023
        ],
        "filename": "VoiceChannel.js",
        "lineno": 77,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034379",
          "name": "VoiceChannel#leave",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Leaves the channel.",
      "name": "leave",
      "longname": "VoiceChannel#leave",
      "kind": "function",
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002274",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          744,
          967
        ],
        "filename": "VoiceState.js",
        "lineno": 18,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034444",
          "name": "VoiceState",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        }
      },
      "name": "VoiceState",
      "longname": "VoiceState",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a member's voice state in a call/guild",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the member's current voice session",
          "name": "sessionID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the member's current voice channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the member is server muted or not",
          "name": "mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the member is server deafened or not",
          "name": "deaf"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the member is suppressed or not",
          "name": "suppress"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the member is self muted or not",
          "name": "selfMute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the member is self deafened or not",
          "name": "selfDeaf"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the member is streaming using \"Go Live\"",
          "name": "selfStream"
        }
      ],
      "___id": "T000002R002280",
      "___s": true
    },
    {
      "comment": "/**\n    * Construct a Bucket\n    * @arg {Number} tokenLimit The max number of tokens the bucket can consume per interval\n    * @arg {Number} interval How long (in ms) to wait between clearing used tokens\n    * @arg {Object} [latencyRef] An object\n    * @arg {Number} latencyRef.latency Interval between consuming tokens\n    */",
      "meta": {
        "range": [
          773,
          1035
        ],
        "filename": "Bucket.js",
        "lineno": 19,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100034664",
          "name": "Bucket",
          "type": "MethodDefinition",
          "paramnames": [
            "tokenLimit",
            "interval",
            "latencyRef"
          ]
        }
      },
      "name": "Bucket",
      "longname": "Bucket",
      "kind": "class",
      "description": "Construct a Bucket",
      "scope": "global",
      "classdesc": "Handle ratelimiting something",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of tokens the bucket can consume per interval",
          "name": "tokenLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How long (in ms) to wait between clearing used tokens",
          "name": "interval"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object",
          "name": "latencyRef"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Interval between consuming tokens",
          "name": "latencyRef.latency"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How many tokens the bucket has consumed in this interval",
          "name": "tokens"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of last token clearing",
          "name": "lastReset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of last token consumption",
          "name": "lastSend"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number tokens the bucket can consume per interval",
          "name": "tokenLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How long (in ms) to wait between clearing used tokens",
          "name": "interval"
        }
      ],
      "___id": "T000002R002301",
      "___s": true
    },
    {
      "comment": "/**\n    * Queue something in the Bucket\n    * @arg {Function} func A callback to call when a token can be consumed\n    */",
      "meta": {
        "range": [
          1167,
          1240
        ],
        "filename": "Bucket.js",
        "lineno": 31,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100034713",
          "name": "Bucket#queue",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Queue something in the Bucket",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A callback to call when a token can be consumed",
          "name": "func"
        }
      ],
      "name": "queue",
      "longname": "Bucket#queue",
      "kind": "function",
      "memberof": "Bucket",
      "scope": "instance",
      "___id": "T000002R002310",
      "___s": true
    },
    {
      "comment": "/**\n    * Construct a Collection\n    * @arg {Class} baseObject The base class for all items\n    * @arg {Number} [limit] Max number of items to hold\n    */",
      "meta": {
        "range": [
          367,
          488
        ],
        "filename": "Collection.js",
        "lineno": 15,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100034984",
          "name": "Collection",
          "type": "MethodDefinition",
          "paramnames": [
            "baseObject",
            "limit"
          ]
        }
      },
      "name": "Collection",
      "longname": "Collection",
      "kind": "class",
      "description": "Construct a Collection",
      "scope": "global",
      "classdesc": "Hold a bunch of something",
      "augments": [
        "Map"
      ],
      "params": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "description": "The base class for all items",
          "name": "baseObject"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Max number of items to hold",
          "name": "limit"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "description": "The base class for all items",
          "name": "baseObject"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "Max number of items to hold",
          "name": "limit"
        }
      ],
      "___id": "T000002R002324",
      "___s": true
    },
    {
      "comment": "/**\n    * Add an object\n    * @arg {Object} obj The object data\n    * @arg {String} obj.id The ID of the object\n    * @arg {Class?} extra An extra parameter the constructor may need\n    * @arg {Boolean} replace Whether to replace an existing object with the same ID\n    * @returns {Class} The existing or newly created object\n    */",
      "meta": {
        "range": [
          831,
          1668
        ],
        "filename": "Collection.js",
        "lineno": 29,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035005",
          "name": "Collection#add",
          "type": "MethodDefinition",
          "paramnames": [
            "obj",
            "extra",
            "replace"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add an object",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object data",
          "name": "obj"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the object",
          "name": "obj.id"
        },
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "nullable": true,
          "description": "An extra parameter the constructor may need",
          "name": "extra"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether to replace an existing object with the same ID",
          "name": "replace"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "description": "The existing or newly created object"
        }
      ],
      "name": "add",
      "longname": "Collection#add",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002327",
      "___s": true
    },
    {
      "comment": "/**\n    * Return the first object to make the function evaluate true\n    * @arg {function} func A function that takes an object and returns true if it matches\n    * @returns {Class?} The first matching object, or undefined if no match\n    */",
      "meta": {
        "range": [
          1920,
          2089
        ],
        "filename": "Collection.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035154",
          "name": "Collection#find",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Return the first object to make the function evaluate true",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function that takes an object and returns true if it matches",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "nullable": true,
          "description": "The first matching object, or undefined if no match"
        }
      ],
      "name": "find",
      "longname": "Collection#find",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002331",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a random object from the Collection\n    * @returns {Class?} The random object, or undefined if there is no match\n    */",
      "meta": {
        "range": [
          2233,
          2456
        ],
        "filename": "Collection.js",
        "lineno": 73,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035177",
          "name": "Collection#random",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a random object from the Collection",
      "returns": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "nullable": true,
          "description": "The random object, or undefined if there is no match"
        }
      ],
      "name": "random",
      "longname": "Collection#random",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002333",
      "___s": true
    },
    {
      "comment": "/**\n    * Return all the objects that make the function evaluate true\n    * @arg {function} func A function that takes an object and returns true if it matches\n    * @returns {Array<Class>} An array containing all the objects that matched\n    */",
      "meta": {
        "range": [
          2712,
          2904
        ],
        "filename": "Collection.js",
        "lineno": 87,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035226",
          "name": "Collection#filter",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Return all the objects that make the function evaluate true",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function that takes an object and returns true if it matches",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Class>"
            ]
          },
          "description": "An array containing all the objects that matched"
        }
      ],
      "name": "filter",
      "longname": "Collection#filter",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002337",
      "___s": true
    },
    {
      "comment": "/**\n    * Return an array with the results of applying the given function to each element\n    * @arg {function} func A function that takes an object and returns something\n    * @returns {Array} An array containing the results\n    */",
      "meta": {
        "range": [
          3147,
          3295
        ],
        "filename": "Collection.js",
        "lineno": 102,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035257",
          "name": "Collection#map",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Return an array with the results of applying the given function to each element",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function that takes an object and returns something",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "An array containing the results"
        }
      ],
      "name": "map",
      "longname": "Collection#map",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002340",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a value resulting from applying a function to every element of the collection\n     * @arg {function} func A function that takes the previous value and the next item and returns a new value\n     * @arg {any} [initialValue] The initial value passed to the function\n     * @returns {any} The final result\n     */",
      "meta": {
        "range": [
          3634,
          3935
        ],
        "filename": "Collection.js",
        "lineno": 116,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035285",
          "name": "Collection#reduce",
          "type": "MethodDefinition",
          "paramnames": [
            "func",
            "initialValue"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a value resulting from applying a function to every element of the collection",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function that takes the previous value and the next item and returns a new value",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "optional": true,
          "description": "The initial value passed to the function",
          "name": "initialValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "any"
            ]
          },
          "description": "The final result"
        }
      ],
      "name": "reduce",
      "longname": "Collection#reduce",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002343",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns true if all elements satisfy the condition\n     * @arg {function} func A function that takes an object and returns true or false\n     * @returns {Boolean} Whether or not all elements satisfied the condition\n     */",
      "meta": {
        "range": [
          4179,
          4346
        ],
        "filename": "Collection.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035336",
          "name": "Collection#every",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns true if all elements satisfy the condition",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function that takes an object and returns true or false",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether or not all elements satisfied the condition"
        }
      ],
      "name": "every",
      "longname": "Collection#every",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002349",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns true if at least one element satisfies the condition\n     * @arg {function} func A function that takes an object and returns true or false\n     * @returns {Boolean} Whether or not at least one element satisfied the condition\n     */",
      "meta": {
        "range": [
          4608,
          4773
        ],
        "filename": "Collection.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035360",
          "name": "Collection#some",
          "type": "MethodDefinition",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns true if at least one element satisfies the condition",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function that takes an object and returns true or false",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether or not at least one element satisfied the condition"
        }
      ],
      "name": "some",
      "longname": "Collection#some",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002351",
      "___s": true
    },
    {
      "comment": "/**\n    * Update an object\n    * @arg {Object} obj The updated object data\n    * @arg {String} obj.id The ID of the object\n    * @arg {Class?} extra An extra parameter the constructor may need\n    * @arg {Boolean} replace Whether to replace an existing object with the same ID\n    * @returns {Class} The updated object\n    */",
      "meta": {
        "range": [
          5109,
          5415
        ],
        "filename": "Collection.js",
        "lineno": 162,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035383",
          "name": "Collection#update",
          "type": "MethodDefinition",
          "paramnames": [
            "obj",
            "extra",
            "replace"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update an object",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The updated object data",
          "name": "obj"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the object",
          "name": "obj.id"
        },
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "nullable": true,
          "description": "An extra parameter the constructor may need",
          "name": "extra"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether to replace an existing object with the same ID",
          "name": "replace"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "description": "The updated object"
        }
      ],
      "name": "update",
      "longname": "Collection#update",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002353",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove an object\n    * @arg {Object} obj The object\n    * @arg {String} obj.id The ID of the object\n    * @returns {Class?} The removed object, or null if nothing was removed\n    */",
      "meta": {
        "range": [
          5617,
          5780
        ],
        "filename": "Collection.js",
        "lineno": 180,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035437",
          "name": "Collection#remove",
          "type": "MethodDefinition",
          "paramnames": [
            "obj"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove an object",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object",
          "name": "obj"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the object",
          "name": "obj.id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Class"
            ]
          },
          "nullable": true,
          "description": "The removed object, or null if nothing was removed"
        }
      ],
      "name": "remove",
      "longname": "Collection#remove",
      "kind": "function",
      "memberof": "Collection",
      "scope": "instance",
      "___id": "T000002R002355",
      "___s": true
    },
    {
      "comment": "/**\n    * Construct a SequentialBucket\n    * @arg {Number} tokenLimit The max number of tokens the bucket can consume per interval\n    * @arg {Object} [latencyRef] An object\n    * @arg {Number} latencyRef.latency Interval between consuming tokens\n    */",
      "meta": {
        "range": [
          640,
          891
        ],
        "filename": "SequentialBucket.js",
        "lineno": 17,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035678",
          "name": "SequentialBucket",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "latencyRef"
          ]
        }
      },
      "name": "SequentialBucket",
      "longname": "SequentialBucket",
      "kind": "class",
      "description": "Construct a SequentialBucket",
      "scope": "global",
      "classdesc": "Ratelimit requests and release in sequence",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of tokens the bucket can consume per interval",
          "name": "tokenLimit"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object",
          "name": "latencyRef"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Interval between consuming tokens",
          "name": "latencyRef.latency"
        }
      ],
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How many tokens the bucket can consume in the current interval",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How many tokens the bucket has left in the current interval",
          "name": "remaining"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of next reset",
          "name": "reset"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the queue is being processed",
          "name": "processing"
        }
      ],
      "___id": "T000002R002378",
      "___s": true
    },
    {
      "comment": "/**\n    * Queue something in the SequentialBucket\n    * @arg {Function} func A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work\n    */",
      "meta": {
        "range": [
          1144,
          1314
        ],
        "filename": "SequentialBucket.js",
        "lineno": 30,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/util",
        "code": {
          "id": "astnode100035728",
          "name": "SequentialBucket#queue",
          "type": "MethodDefinition",
          "paramnames": [
            "func",
            "short"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Queue something in the SequentialBucket",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work",
          "name": "func"
        }
      ],
      "name": "queue",
      "longname": "SequentialBucket#queue",
      "kind": "function",
      "memberof": "SequentialBucket",
      "scope": "instance",
      "___id": "T000002R002387",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          646,
          2056
        ],
        "filename": "SharedStream.js",
        "lineno": 29,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100037455",
          "name": "SharedStream",
          "type": "MethodDefinition",
          "paramnames": []
        }
      },
      "name": "SharedStream",
      "longname": "SharedStream",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a collection of VoiceConnections sharing an input stream",
      "augments": [
        "EventEmitter"
      ],
      "___id": "T000002R002511",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a voice connection to the shared stream\n    * @arg {VoiceConnection} connection The voice connection to add\n    */",
      "meta": {
        "range": [
          2260,
          2603
        ],
        "filename": "SharedStream.js",
        "lineno": 78,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100037687",
          "name": "SharedStream#add",
          "type": "MethodDefinition",
          "paramnames": [
            "_connection"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Add a voice connection to the shared stream",
      "params": [
        {
          "type": {
            "names": [
              "VoiceConnection"
            ]
          },
          "description": "The voice connection to add",
          "name": "connection"
        }
      ],
      "name": "add",
      "longname": "SharedStream#add",
      "kind": "function",
      "memberof": "SharedStream",
      "scope": "instance",
      "___id": "T000002R002526",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a voice connection from the shared stream\n    * @arg {VoiceConnection} connection The voice connection to remove\n    */",
      "meta": {
        "range": [
          2750,
          2835
        ],
        "filename": "SharedStream.js",
        "lineno": 94,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100037734",
          "name": "SharedStream#remove",
          "type": "MethodDefinition",
          "paramnames": [
            "_connection"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove a voice connection from the shared stream",
      "params": [
        {
          "type": {
            "names": [
              "VoiceConnection"
            ]
          },
          "description": "The voice connection to remove",
          "name": "connection"
        }
      ],
      "name": "remove",
      "longname": "SharedStream#remove",
      "kind": "function",
      "memberof": "SharedStream",
      "scope": "instance",
      "___id": "T000002R002528",
      "___s": true
    },
    {
      "comment": "/**\n    * Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl\n    * @arg {ReadableStream | String} resource The audio or video resource, either a ReadableStream, URL, or file path\n    * @arg {Object} [options] Music options\n    * @arg {Boolean} [options.inlineVolume=false] Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage\n    * @arg {Number} [options.voiceDataTimeout=2000] Timeout when waiting for voice data (-1 for no timeout)\n    * @arg {Array<String>} [options.inputArgs] Additional input parameters to pass to ffmpeg/avconv (before -i)\n    * @arg {Array<String>} [options.encoderArgs] Additional encoder parameters to pass to ffmpeg/avconv (after -i)\n    * @arg {String} [options.format] The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null\n    * @arg {Number} [options.frameDuration=60] The resource opus frame duration (required for DCA/Ogg)\n    * @arg {Number} [options.frameSize=2880] The resource opus frame size\n    * @arg {Number} [options.sampleRate=48000] The resource audio sampling rate\n    */",
      "meta": {
        "range": [
          4151,
          5492
        ],
        "filename": "SharedStream.js",
        "lineno": 111,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100037747",
          "name": "SharedStream#play",
          "type": "MethodDefinition",
          "paramnames": [
            "source",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl",
      "params": [
        {
          "type": {
            "names": [
              "ReadableStream",
              "String"
            ]
          },
          "description": "The audio or video resource, either a ReadableStream, URL, or file path",
          "name": "resource"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Music options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage",
          "name": "options.inlineVolume"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2000,
          "description": "Timeout when waiting for voice data (-1 for no timeout)",
          "name": "options.voiceDataTimeout"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Additional input parameters to pass to ffmpeg/avconv (before -i)",
          "name": "options.inputArgs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Additional encoder parameters to pass to ffmpeg/avconv (after -i)",
          "name": "options.encoderArgs"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null",
          "name": "options.format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 60,
          "description": "The resource opus frame duration (required for DCA/Ogg)",
          "name": "options.frameDuration"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2880,
          "description": "The resource opus frame size",
          "name": "options.frameSize"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 48000,
          "description": "The resource audio sampling rate",
          "name": "options.sampleRate"
        }
      ],
      "name": "play",
      "longname": "SharedStream#play",
      "kind": "function",
      "memberof": "SharedStream",
      "scope": "instance",
      "___id": "T000002R002529",
      "___s": true
    },
    {
      "comment": "/**\n        * Fired when the shared stream starts playing a stream\n        * @event SharedStream#start\n        */",
      "meta": {
        "filename": "SharedStream.js",
        "lineno": 142,
        "columnno": 8,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the shared stream starts playing a stream",
      "kind": "event",
      "name": "start",
      "memberof": "SharedStream",
      "longname": "SharedStream#event:start",
      "scope": "instance",
      "___id": "T000002R002550",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the volume of this shared stream if inline volume is enabled\n     * @param {number} volume The volume as a value from 0 (min) to 1 (max)\n     */",
      "meta": {
        "range": [
          7340,
          7403
        ],
        "filename": "SharedStream.js",
        "lineno": 194,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100038224",
          "name": "SharedStream#setVolume",
          "type": "MethodDefinition",
          "paramnames": [
            "volume"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sets the volume of this shared stream if inline volume is enabled",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The volume as a value from 0 (min) to 1 (max)",
          "name": "volume"
        }
      ],
      "name": "setVolume",
      "longname": "SharedStream#setVolume",
      "kind": "function",
      "memberof": "SharedStream",
      "scope": "instance",
      "___id": "T000002R002559",
      "___s": true
    },
    {
      "comment": "/**\n    * Stop the bot from sending audio\n    */",
      "meta": {
        "range": [
          7462,
          8004
        ],
        "filename": "SharedStream.js",
        "lineno": 201,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100038237",
          "name": "SharedStream#stopPlaying",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Stop the bot from sending audio",
      "name": "stopPlaying",
      "longname": "SharedStream#stopPlaying",
      "kind": "function",
      "memberof": "SharedStream",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002560",
      "___s": true
    },
    {
      "comment": "/**\n        * Fired when the shared stream finishes playing a stream\n        * @event SharedStream#end\n        */",
      "meta": {
        "filename": "SharedStream.js",
        "lineno": 216,
        "columnno": 8,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the shared stream finishes playing a stream",
      "kind": "event",
      "name": "end",
      "memberof": "SharedStream",
      "longname": "SharedStream#event:end",
      "scope": "instance",
      "___id": "T000002R002565",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          2831,
          5331
        ],
        "filename": "VoiceConnection.js",
        "lineno": 88,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100038666",
          "name": "VoiceConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "id",
            "options"
          ]
        }
      },
      "name": "VoiceConnection",
      "longname": "VoiceConnection",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a voice connection",
      "augments": [
        "EventEmitter"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice connection (guild ID)",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice connection's current channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the voice connection is connecting",
          "name": "connecting"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the voice connection is ready",
          "name": "ready"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the voice connection is playing something",
          "name": "playing"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the voice connection is paused",
          "name": "paused"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The current volume level of the connection",
          "name": "volume"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The state of the currently playing stream",
          "name": "current"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The timestamp of the start of the current stream",
          "name": "current.startTime"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How long the current stream has been playing for, in milliseconds",
          "name": "current.playTime"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The timestamp of the most recent pause",
          "name": "current.pausedTimestamp"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "How long the current stream has been paused for, in milliseconds",
          "name": "current.pausedTime"
        },
        {
          "type": {
            "names": [
              "Options"
            ]
          },
          "description": "The custom options for the current stream",
          "name": "current.options"
        }
      ],
      "___id": "T000002R002613",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the voice connection encounters an error. This event should be handled by users\n            * @event VoiceConnection#error\n            * @prop {Error} err The error object\n            */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 145,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection encounters an error. This event should be handled by users",
      "kind": "event",
      "name": "error",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "The error object",
          "name": "err"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:error",
      "scope": "instance",
      "___id": "T000002R002637",
      "___s": true
    },
    {
      "comment": "/**\n        * Fired when stuff happens and gives more info\n        * @event VoiceConnection#debug\n        * @prop {String} message The debug message\n        */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 197,
        "columnno": 8,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when stuff happens and gives more info",
      "kind": "event",
      "name": "debug",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The debug message",
          "name": "message"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:debug",
      "scope": "instance",
      "___id": "T000002R002650",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the voice connection connects\n            * @event VoiceConnection#connect\n            */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 204,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection connects",
      "kind": "event",
      "name": "connect",
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:connect",
      "scope": "instance",
      "___id": "T000002R002651",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when the voice connection turns ready\n                    * @event VoiceConnection#ready\n                    */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 299,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection turns ready",
      "kind": "event",
      "name": "ready",
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:ready",
      "scope": "instance",
      "___id": "T000002R002680",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when the voice connection receives a pong\n                    * @event VoiceConnection#pong\n                    * @prop {Number} latency The current latency in milliseconds\n                    */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 308,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection receives a pong",
      "kind": "event",
      "name": "pong",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The current latency in milliseconds",
          "name": "latency"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:pong",
      "scope": "instance",
      "___id": "T000002R002681",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a user begins speaking\n                    * @event VoiceConnection#speakingStart\n                    * @prop {String} userID The ID of the user that began speaking\n                    */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 318,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when a user begins speaking",
      "kind": "event",
      "name": "speakingStart",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that began speaking",
          "name": "userID"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:speakingStart",
      "scope": "instance",
      "___id": "T000002R002683",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a user stops speaking\n                    * @event VoiceConnection#speakingStop\n                    * @prop {String} userID The ID of the user that stopped speaking\n                    */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 323,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when a user stops speaking",
      "kind": "event",
      "name": "speakingStop",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that stopped speaking",
          "name": "userID"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:speakingStop",
      "scope": "instance",
      "___id": "T000002R002684",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the voice connection disconnects\n            * @event VoiceConnection#disconnect\n            * @prop {Error?} err The error, if any\n            */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 399,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection disconnects",
      "kind": "event",
      "name": "disconnect",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "nullable": true,
          "description": "The error, if any",
          "name": "err"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:disconnect",
      "scope": "instance",
      "___id": "T000002R002699",
      "___s": true
    },
    {
      "comment": "/**\n    * Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl\n    * @arg {ReadableStream | String} resource The audio or video resource, either a ReadableStream, URL, or file path\n    * @arg {Object} [options] Music options\n    * @arg {Boolean} [options.inlineVolume=false] Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage\n    * @arg {Number} [options.voiceDataTimeout=2000] Timeout when waiting for voice data (-1 for no timeout)\n    * @arg {Array<String>} [options.inputArgs] Additional input parameters to pass to ffmpeg/avconv (before -i)\n    * @arg {Array<String>} [options.encoderArgs] Additional encoder parameters to pass to ffmpeg/avconv (after -i)\n    * @arg {String} [options.format] The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null\n    * @arg {Number} [options.frameDuration=20] The resource opus frame duration (required for DCA/Ogg)\n    * @arg {Number} [options.frameSize=2880] The resource opus frame size\n    * @arg {Number} [options.sampleRate=48000] The resource audio sampling rate\n    */",
      "meta": {
        "range": [
          16298,
          17839
        ],
        "filename": "VoiceConnection.js",
        "lineno": 425,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100040165",
          "name": "VoiceConnection#play",
          "type": "MethodDefinition",
          "paramnames": [
            "source",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl",
      "params": [
        {
          "type": {
            "names": [
              "ReadableStream",
              "String"
            ]
          },
          "description": "The audio or video resource, either a ReadableStream, URL, or file path",
          "name": "resource"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Music options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage",
          "name": "options.inlineVolume"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2000,
          "description": "Timeout when waiting for voice data (-1 for no timeout)",
          "name": "options.voiceDataTimeout"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Additional input parameters to pass to ffmpeg/avconv (before -i)",
          "name": "options.inputArgs"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Additional encoder parameters to pass to ffmpeg/avconv (after -i)",
          "name": "options.encoderArgs"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null",
          "name": "options.format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 20,
          "description": "The resource opus frame duration (required for DCA/Ogg)",
          "name": "options.frameDuration"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2880,
          "description": "The resource opus frame size",
          "name": "options.frameSize"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 48000,
          "description": "The resource audio sampling rate",
          "name": "options.sampleRate"
        }
      ],
      "name": "play",
      "longname": "VoiceConnection#play",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "___id": "T000002R002701",
      "___s": true
    },
    {
      "comment": "/**\n        * Fired when the voice connection starts playing a stream\n        * @event SharedStream#start\n        */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 463,
        "columnno": 8,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection starts playing a stream",
      "kind": "event",
      "name": "start",
      "memberof": "SharedStream",
      "longname": "SharedStream#event:start",
      "scope": "instance",
      "___id": "T000002R002722",
      "___s": true
    },
    {
      "comment": "/**\n    * Stop the bot from sending audio\n    */",
      "meta": {
        "range": [
          19634,
          20683
        ],
        "filename": "VoiceConnection.js",
        "lineno": 517,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100040680",
          "name": "VoiceConnection#stopPlaying",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Stop the bot from sending audio",
      "name": "stopPlaying",
      "longname": "VoiceConnection#stopPlaying",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002736",
      "___s": true
    },
    {
      "comment": "/**\n        * Fired when the voice connection finishes playing a stream\n        * @event VoiceConnection#end\n        */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 548,
        "columnno": 8,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when the voice connection finishes playing a stream",
      "kind": "event",
      "name": "end",
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:end",
      "scope": "instance",
      "___id": "T000002R002745",
      "___s": true
    },
    {
      "comment": "/**\n    * Generate a receive stream for the voice connection.\n    * @arg {String} [type=\"pcm\"] The desired vocie data type, either \"opus\" or \"pcm\"\n    * @returns {VoiceDataStream}\n    */",
      "meta": {
        "range": [
          21954,
          22702
        ],
        "filename": "VoiceConnection.js",
        "lineno": 592,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100041016",
          "name": "VoiceConnection#receive",
          "type": "MethodDefinition",
          "paramnames": [
            "type"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Generate a receive stream for the voice connection.",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"pcm\"",
          "description": "The desired vocie data type, either \"opus\" or \"pcm\"",
          "name": "type"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "VoiceDataStream"
            ]
          }
        }
      ],
      "name": "receive",
      "longname": "VoiceConnection#receive",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "___id": "T000002R002754",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired to warn of something weird but non-breaking happening\n                    * @event VoiceConnection#warn\n                    * @prop {String} message The warning message\n                    */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 623,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired to warn of something weird but non-breaking happening",
      "kind": "event",
      "name": "warn",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The warning message",
          "name": "message"
        }
      ],
      "memberof": "VoiceConnection",
      "longname": "VoiceConnection#event:warn",
      "scope": "instance",
      "___id": "T000002R002762",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a voice data packet is received\n                * @event VoiceDataStream#data\n                * @prop {Buffer} data The voice data\n                * @prop {String} userID The user who sent the voice packet\n                * @prop {Number} timestamp The intended timestamp of the packet\n                * @prop {Number} sequence The intended sequence number of the packet\n                */",
      "meta": {
        "filename": "VoiceConnection.js",
        "lineno": 647,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {}
      },
      "description": "Fired when a voice data packet is received",
      "kind": "event",
      "name": "data",
      "properties": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "The voice data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The user who sent the voice packet",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The intended timestamp of the packet",
          "name": "timestamp"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The intended sequence number of the packet",
          "name": "sequence"
        }
      ],
      "memberof": "VoiceDataStream",
      "longname": "VoiceDataStream#event:data",
      "scope": "instance",
      "___id": "T000002R002769",
      "___s": true
    },
    {
      "comment": "/**\n    * Switch the voice channel the bot is in. The channel to switch to must be in the same guild as the current voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
      "meta": {
        "range": [
          25690,
          25913
        ],
        "filename": "VoiceConnection.js",
        "lineno": 682,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100041410",
          "name": "VoiceConnection#switchChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "reactive"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Switch the voice channel the bot is in. The channel to switch to must be in the same guild as the current voice channel",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        }
      ],
      "name": "switchChannel",
      "longname": "VoiceConnection#switchChannel",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "___id": "T000002R002777",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's voice state\n    * @arg {Boolean} selfMute Whether the bot muted itself or not (audio sending is unaffected)\n    * @arg {Boolean} selfDeaf Whether the bot deafened itself or not (audio receiving is unaffected)\n    */",
      "meta": {
        "range": [
          26166,
          26527
        ],
        "filename": "VoiceConnection.js",
        "lineno": 698,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100041439",
          "name": "VoiceConnection#updateVoiceState",
          "type": "MethodDefinition",
          "paramnames": [
            "selfMute",
            "selfDeaf"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Update the bot's voice state",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the bot muted itself or not (audio sending is unaffected)",
          "name": "selfMute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the bot deafened itself or not (audio receiving is unaffected)",
          "name": "selfDeaf"
        }
      ],
      "name": "updateVoiceState",
      "longname": "VoiceConnection#updateVoiceState",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "___id": "T000002R002779",
      "___s": true
    },
    {
      "comment": "/**\n    * Modify the output volume of the current stream (if inlineVolume is enabled for the current stream)\n    * @arg {Number} [volume=1.0] The desired volume. 0.0 is 0%, 1.0 is 100%, 2.0 is 200%, etc. It is not recommended to go above 2.0\n    */",
      "meta": {
        "range": [
          27078,
          27141
        ],
        "filename": "VoiceConnection.js",
        "lineno": 725,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100041546",
          "name": "VoiceConnection#setVolume",
          "type": "MethodDefinition",
          "paramnames": [
            "volume"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Modify the output volume of the current stream (if inlineVolume is enabled for the current stream)",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "1.0",
          "description": "The desired volume. 0.0 is 0%, 1.0 is 100%, 2.0 is 200%, etc. It is not recommended to go above 2.0",
          "name": "volume"
        }
      ],
      "name": "setVolume",
      "longname": "VoiceConnection#setVolume",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "___id": "T000002R002789",
      "___s": true
    },
    {
      "comment": "/**\n    * Pause sending audio (if playing)\n    */",
      "meta": {
        "range": [
          27201,
          27585
        ],
        "filename": "VoiceConnection.js",
        "lineno": 732,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100041559",
          "name": "VoiceConnection#pause",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Pause sending audio (if playing)",
      "name": "pause",
      "longname": "VoiceConnection#pause",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002790",
      "___s": true
    },
    {
      "comment": "/**\n    * Resume sending audio (if paused)\n    */",
      "meta": {
        "range": [
          27645,
          27982
        ],
        "filename": "VoiceConnection.js",
        "lineno": 749,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100041622",
          "name": "VoiceConnection#resume",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Resume sending audio (if paused)",
      "name": "resume",
      "longname": "VoiceConnection#resume",
      "kind": "function",
      "memberof": "VoiceConnection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002794",
      "___s": true
    },
    {
      "comment": "",
      "meta": {
        "range": [
          356,
          424
        ],
        "filename": "VoiceDataStream.js",
        "lineno": 16,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/voice",
        "code": {
          "id": "astnode100042469",
          "name": "VoiceDataStream",
          "type": "MethodDefinition",
          "paramnames": [
            "type"
          ]
        }
      },
      "name": "VoiceDataStream",
      "longname": "VoiceDataStream",
      "kind": "class",
      "scope": "global",
      "classdesc": "Represents a voice data stream",
      "augments": [
        "EventEmitter"
      ],
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The targeted voice data type for the stream, either \"opus\" or \"pcm\"",
          "name": "type"
        }
      ],
      "___id": "T000002R002849",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/home/runner/work/eris-docs/eris-docs/eris/lib/Client.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/Constants.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/command/Command.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/command/CommandClient.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/errors/DiscordHTTPError.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/errors/DiscordRESTError.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway/Shard.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway/ShardManager.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/rest/Endpoints.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/rest/RequestHandler.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Base.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Call.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/CategoryChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Channel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/ExtendedUser.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/GroupChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Guild.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/GuildAuditLogEntry.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/GuildChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/GuildIntegration.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Invite.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Member.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Message.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/NewsChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Permission.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/PermissionOverwrite.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/PrivateChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Relationship.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/Role.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/StoreChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/TextChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/UnavailableGuild.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/User.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/VoiceChannel.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/structures/VoiceState.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/util/Bucket.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/util/Collection.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/util/MultipartData.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/util/SequentialBucket.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/Piper.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/SharedStream.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/VoiceConnection.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/VoiceConnectionManager.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/VoiceDataStream.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/BaseTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/DCAOpusTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/FFmpegDuplex.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/FFmpegOggTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/FFmpegPCMTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/OggOpusTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/PCMOpusTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/VolumeTransformer.js",
        "/home/runner/work/eris-docs/eris-docs/eris/lib/voice/streams/WebmOpusTransformer.js"
      ],
      "___id": "T000002R003143",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the user's avatar with the given format and size\n    * @arg {String} [format] The filetype of the avatar (\"jpg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the avatar (any power of two between 16 and 2048)\n    */",
      "meta": {
        "range": [
          2934,
          3543
        ],
        "filename": "User.js",
        "lineno": 78,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033962",
          "name": "User#dynamicAvatarURL",
          "type": "MethodDefinition",
          "paramnames": [
            "format",
            "size"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "dynamicAvatarURL",
      "longname": "ExtendedUser#dynamicAvatarURL",
      "kind": "function",
      "description": "Get the user's avatar with the given format and size",
      "memberof": "ExtendedUser",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The filetype of the avatar (\"jpg\", \"png\", \"gif\", or \"webp\")",
          "name": "format"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The size of the avatar (any power of two between 16 and 2048)",
          "name": "size"
        }
      ],
      "inherits": "User#dynamicAvatarURL",
      "inherited": true,
      "overrides": "User#dynamicAvatarURL",
      "___id": "T000002R003144",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a DM channel with the user, or create one if it does not exist\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          3678,
          3770
        ],
        "filename": "User.js",
        "lineno": 100,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034057",
          "name": "User#getDMChannel",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getDMChannel",
      "longname": "ExtendedUser#getDMChannel",
      "kind": "function",
      "description": "Get a DM channel with the user, or create one if it does not exist",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "memberof": "ExtendedUser",
      "scope": "instance",
      "inherits": "User#getDMChannel",
      "inherited": true,
      "overrides": "User#getDMChannel",
      "___id": "T000002R003145",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a relationship with the user (user accounts only)\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          3975,
          4085
        ],
        "filename": "User.js",
        "lineno": 109,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034076",
          "name": "User#addRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "block"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addRelationship",
      "longname": "ExtendedUser#addRelationship",
      "kind": "function",
      "description": "Create a relationship with the user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "ExtendedUser",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If true, block the user. Otherwise, add the user as a friend",
          "name": "block"
        }
      ],
      "inherits": "User#addRelationship",
      "inherited": true,
      "overrides": "User#addRelationship",
      "___id": "T000002R003146",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a relationship with the user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4194,
          4298
        ],
        "filename": "User.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034097",
          "name": "User#removeRelationship",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "removeRelationship",
      "longname": "ExtendedUser#removeRelationship",
      "kind": "function",
      "description": "Remove a relationship with the user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "ExtendedUser",
      "scope": "instance",
      "inherits": "User#removeRelationship",
      "inherited": true,
      "overrides": "User#removeRelationship",
      "___id": "T000002R003147",
      "___s": true
    },
    {
      "comment": "/**\n    * Get profile data for the user (user accounts only)\n    * @returns {Promise<Object>} The user's profile data.\n    */",
      "meta": {
        "range": [
          4434,
          4526
        ],
        "filename": "User.js",
        "lineno": 125,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034116",
          "name": "User#getProfile",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getProfile",
      "longname": "ExtendedUser#getProfile",
      "kind": "function",
      "description": "Get profile data for the user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's profile data."
        }
      ],
      "memberof": "ExtendedUser",
      "scope": "instance",
      "inherits": "User#getProfile",
      "inherited": true,
      "overrides": "User#getProfile",
      "___id": "T000002R003148",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the current user's note for the user (user accounts only)\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4675,
          4773
        ],
        "filename": "User.js",
        "lineno": 134,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034135",
          "name": "User#editNote",
          "type": "MethodDefinition",
          "paramnames": [
            "note"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editNote",
      "longname": "ExtendedUser#editNote",
      "kind": "function",
      "description": "Edit the current user's note for the user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "ExtendedUser",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The note",
          "name": "note"
        }
      ],
      "inherits": "User#editNote",
      "inherited": true,
      "overrides": "User#editNote",
      "___id": "T000002R003149",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the current user's note for another user (user accounts only)\n    */",
      "meta": {
        "range": [
          4869,
          4961
        ],
        "filename": "User.js",
        "lineno": 141,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100034156",
          "name": "User#deleteNote",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteNote",
      "longname": "ExtendedUser#deleteNote",
      "kind": "function",
      "description": "Delete the current user's note for another user (user accounts only)",
      "memberof": "ExtendedUser",
      "scope": "instance",
      "inherits": "User#deleteNote",
      "inherited": true,
      "overrides": "User#deleteNote",
      "___id": "T000002R003150",
      "___s": true
    },
    {
      "comment": "/**\n    * Ring fellow group channel recipient(s)\n    * @arg {String[]} recipients The IDs of the recipients to ring\n    */",
      "meta": {
        "range": [
          1368,
          1525
        ],
        "filename": "PrivateChannel.js",
        "lineno": 37,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031603",
          "name": "PrivateChannel#ring",
          "type": "MethodDefinition",
          "paramnames": [
            "recipients"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "ring",
      "longname": "GroupChannel#ring",
      "kind": "function",
      "description": "Ring fellow group channel recipient(s)",
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the recipients to ring",
          "name": "recipients"
        }
      ],
      "inherits": "PrivateChannel#ring",
      "inherited": true,
      "overrides": "PrivateChannel#ring",
      "___id": "T000002R003151",
      "___s": true
    },
    {
      "comment": "/**\n    * Check if the channel has an existing call\n    */",
      "meta": {
        "range": [
          1594,
          1741
        ],
        "filename": "PrivateChannel.js",
        "lineno": 46,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031629",
          "name": "PrivateChannel#syncCall",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "syncCall",
      "longname": "GroupChannel#syncCall",
      "kind": "function",
      "description": "Check if the channel has an existing call",
      "memberof": "GroupChannel",
      "scope": "instance",
      "inherits": "PrivateChannel#syncCall",
      "inherited": true,
      "overrides": "PrivateChannel#syncCall",
      "___id": "T000002R003152",
      "___s": true
    },
    {
      "comment": "/**\n    * Leave the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          1811,
          1897
        ],
        "filename": "PrivateChannel.js",
        "lineno": 56,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031658",
          "name": "PrivateChannel#leave",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "leave",
      "longname": "GroupChannel#leave",
      "kind": "function",
      "description": "Leave the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "inherits": "PrivateChannel#leave",
      "inherited": true,
      "overrides": "PrivateChannel#leave",
      "___id": "T000002R003153",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in a text channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          1986,
          2139
        ],
        "filename": "PrivateChannel.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031677",
          "name": "PrivateChannel#sendTyping",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "sendTyping",
      "longname": "GroupChannel#sendTyping",
      "kind": "function",
      "description": "Send typing status in a text channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "inherits": "PrivateChannel#sendTyping",
      "inherited": true,
      "overrides": "PrivateChannel#sendTyping",
      "___id": "T000002R003154",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          2293,
          2459
        ],
        "filename": "PrivateChannel.js",
        "lineno": 73,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031712",
          "name": "PrivateChannel#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessage",
      "longname": "GroupChannel#getMessage",
      "kind": "function",
      "description": "Get a previous message in a text channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "PrivateChannel#getMessage",
      "inherited": true,
      "overrides": "PrivateChannel#getMessage",
      "___id": "T000002R003155",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          2854,
          3060
        ],
        "filename": "PrivateChannel.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031749",
          "name": "PrivateChannel#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessages",
      "longname": "GroupChannel#getMessages",
      "kind": "function",
      "description": "Get a previous message in a text channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "inherits": "PrivateChannel#getMessages",
      "inherited": true,
      "overrides": "PrivateChannel#getMessages",
      "___id": "T000002R003156",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in a text channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          3158,
          3298
        ],
        "filename": "PrivateChannel.js",
        "lineno": 93,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031792",
          "name": "PrivateChannel#getPins",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getPins",
      "longname": "GroupChannel#getPins",
      "kind": "function",
      "description": "Get all the pins in a text channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "inherits": "PrivateChannel#getPins",
      "inherited": true,
      "overrides": "PrivateChannel#getPins",
      "___id": "T000002R003157",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in a text channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          4188,
          4368
        ],
        "filename": "PrivateChannel.js",
        "lineno": 110,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031827",
          "name": "PrivateChannel#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createMessage",
      "longname": "GroupChannel#createMessage",
      "kind": "function",
      "description": "Create a message in a text channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String",
              "Object"
            ]
          },
          "description": "A string or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A file object",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "inherits": "PrivateChannel#createMessage",
      "inherited": true,
      "overrides": "PrivateChannel#createMessage",
      "___id": "T000002R003158",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          5212,
          5398
        ],
        "filename": "PrivateChannel.js",
        "lineno": 124,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031866",
          "name": "PrivateChannel#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editMessage",
      "longname": "GroupChannel#editMessage",
      "kind": "function",
      "description": "Edit a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "inherits": "PrivateChannel#editMessage",
      "inherited": true,
      "overrides": "PrivateChannel#editMessage",
      "___id": "T000002R003159",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5516,
          5682
        ],
        "filename": "PrivateChannel.js",
        "lineno": 133,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031905",
          "name": "PrivateChannel#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "pinMessage",
      "longname": "GroupChannel#pinMessage",
      "kind": "function",
      "description": "Pin a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "PrivateChannel#pinMessage",
      "inherited": true,
      "overrides": "PrivateChannel#pinMessage",
      "___id": "T000002R003160",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5802,
          5972
        ],
        "filename": "PrivateChannel.js",
        "lineno": 142,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031942",
          "name": "PrivateChannel#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "unpinMessage",
      "longname": "GroupChannel#unpinMessage",
      "kind": "function",
      "description": "Unpin a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "PrivateChannel#unpinMessage",
      "inherited": true,
      "overrides": "PrivateChannel#unpinMessage",
      "___id": "T000002R003161",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          6437,
          6683
        ],
        "filename": "PrivateChannel.js",
        "lineno": 155,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031979",
          "name": "PrivateChannel#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessageReaction",
      "longname": "GroupChannel#getMessageReaction",
      "kind": "function",
      "description": "Get a list of users who reacted with a specific reaction",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "inherits": "PrivateChannel#getMessageReaction",
      "inherited": true,
      "overrides": "PrivateChannel#getMessageReaction",
      "___id": "T000002R003162",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          6994,
          7212
        ],
        "filename": "PrivateChannel.js",
        "lineno": 166,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032024",
          "name": "PrivateChannel#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addMessageReaction",
      "longname": "GroupChannel#addMessageReaction",
      "kind": "function",
      "description": "Add a reaction to a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "inherits": "PrivateChannel#addMessageReaction",
      "inherited": true,
      "overrides": "PrivateChannel#addMessageReaction",
      "___id": "T000002R003163",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          7543,
          7767
        ],
        "filename": "PrivateChannel.js",
        "lineno": 177,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032065",
          "name": "PrivateChannel#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeMessageReaction",
      "longname": "GroupChannel#removeMessageReaction",
      "kind": "function",
      "description": "Remove a reaction from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "inherits": "PrivateChannel#removeMessageReaction",
      "inherited": true,
      "overrides": "PrivateChannel#removeMessageReaction",
      "___id": "T000002R003164",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          7907,
          8097
        ],
        "filename": "PrivateChannel.js",
        "lineno": 186,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032106",
          "name": "PrivateChannel#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeMessageReactions",
      "longname": "GroupChannel#removeMessageReactions",
      "kind": "function",
      "description": "Remove all reactions from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "PrivateChannel#removeMessageReactions",
      "inherited": true,
      "overrides": "PrivateChannel#removeMessageReactions",
      "___id": "T000002R003165",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8288,
          8476
        ],
        "filename": "PrivateChannel.js",
        "lineno": 196,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032143",
          "name": "PrivateChannel#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteMessage",
      "longname": "GroupChannel#deleteMessage",
      "kind": "function",
      "description": "Delete a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "PrivateChannel#deleteMessage",
      "inherited": true,
      "overrides": "PrivateChannel#deleteMessage",
      "___id": "T000002R003166",
      "___s": true
    },
    {
      "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8625,
          8797
        ],
        "filename": "PrivateChannel.js",
        "lineno": 205,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032182",
          "name": "PrivateChannel#unsendMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "unsendMessage",
      "longname": "GroupChannel#unsendMessage",
      "kind": "function",
      "description": "Un-send a message. You're welcome Programmix",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "GroupChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "PrivateChannel#unsendMessage",
      "inherited": true,
      "overrides": "PrivateChannel#unsendMessage",
      "___id": "T000002R003167",
      "___s": true
    },
    {
      "comment": "/**\n    * Tells all shards to connect.\n    * @returns {Promise} Resolves when all shards are initialized\n    */",
      "meta": {
        "range": [
          10632,
          12379
        ],
        "filename": "Client.js",
        "lineno": 194,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000644",
          "name": "Client#connect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "connect",
      "longname": "CommandClient#connect",
      "kind": "function",
      "description": "Tells all shards to connect.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Resolves when all shards are initialized"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "async": true,
      "inherits": "Client#connect",
      "inherited": true,
      "overrides": "Client#connect",
      "___id": "T000002R003168",
      "___s": true
    },
    {
      "comment": "/**\n    * Get info on connecting to the Discord gateway\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
      "meta": {
        "range": [
          12544,
          12634
        ],
        "filename": "Client.js",
        "lineno": 241,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000899",
          "name": "Client#getGateway",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getGateway",
      "longname": "CommandClient#getGateway",
      "kind": "function",
      "description": "Get info on connecting to the Discord gateway",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an object containing gateway connection info"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getGateway",
      "inherited": true,
      "overrides": "Client#getGateway",
      "___id": "T000002R003169",
      "___s": true
    },
    {
      "comment": "/**\n    * Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
      "meta": {
        "range": [
          12852,
          13056
        ],
        "filename": "Client.js",
        "lineno": 249,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000914",
          "name": "Client#getBotGateway",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getBotGateway",
      "longname": "CommandClient#getBotGateway",
      "kind": "function",
      "description": "Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with an object containing gateway connection info"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getBotGateway",
      "inherited": true,
      "overrides": "Client#getBotGateway",
      "___id": "T000002R003170",
      "___s": true
    },
    {
      "comment": "/**\n    * Disconnects all shards\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
      "meta": {
        "range": [
          13318,
          13504
        ],
        "filename": "Client.js",
        "lineno": 261,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000950",
          "name": "Client#disconnect",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "disconnect",
      "longname": "CommandClient#disconnect",
      "kind": "function",
      "description": "Disconnects all shards",
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "Shard disconnect options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String",
              "Boolean"
            ]
          },
          "optional": true,
          "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
          "name": "options.reconnect"
        }
      ],
      "inherits": "Client#disconnect",
      "inherited": true,
      "overrides": "Client#disconnect",
      "___id": "T000002R003171",
      "___s": true
    },
    {
      "comment": "/**\n    * Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID\n    * @arg {String} channelID The ID of the voice channel\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
      "meta": {
        "range": [
          14119,
          15072
        ],
        "filename": "Client.js",
        "lineno": 277,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100000985",
          "name": "Client#joinVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "joinVoiceChannel",
      "longname": "CommandClient#joinVoiceChannel",
      "kind": "function",
      "description": "Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<VoiceConnection>"
            ]
          },
          "description": "Resolves with a VoiceConnection"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "VoiceConnection constructor options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Whether the VoiceConnection will be part of a SharedStream or not",
          "name": "options.shared"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
          "name": "options.opusOnly"
        }
      ],
      "inherits": "Client#joinVoiceChannel",
      "inherited": true,
      "overrides": "Client#joinVoiceChannel",
      "___id": "T000002R003172",
      "___s": true
    },
    {
      "comment": "/**\n    * Leaves a voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
      "meta": {
        "range": [
          15180,
          15375
        ],
        "filename": "Client.js",
        "lineno": 301,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001121",
          "name": "Client#leaveVoiceChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "leaveVoiceChannel",
      "longname": "CommandClient#leaveVoiceChannel",
      "kind": "function",
      "description": "Leaves a voice channel",
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the voice channel",
          "name": "channelID"
        }
      ],
      "inherits": "Client#leaveVoiceChannel",
      "inherited": true,
      "overrides": "Client#leaveVoiceChannel",
      "___id": "T000002R003173",
      "___s": true
    },
    {
      "comment": "/**\n    * Closes a voice connection with a guild ID\n    * @arg {String} guildID The ID of the guild\n    */",
      "meta": {
        "range": [
          15492,
          15837
        ],
        "filename": "Client.js",
        "lineno": 312,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001148",
          "name": "Client#closeVoiceConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "closeVoiceConnection",
      "longname": "CommandClient#closeVoiceConnection",
      "kind": "function",
      "description": "Closes a voice connection with a guild ID",
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#closeVoiceConnection",
      "inherited": true,
      "overrides": "Client#closeVoiceConnection",
      "___id": "T000002R003174",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
      "meta": {
        "range": [
          16019,
          16160
        ],
        "filename": "Client.js",
        "lineno": 326,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001196",
          "name": "Client#editAFK",
          "type": "MethodDefinition",
          "paramnames": [
            "afk"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editAFK",
      "longname": "CommandClient#editAFK",
      "kind": "function",
      "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the bot user is AFK or not",
          "name": "afk"
        }
      ],
      "inherits": "Client#editAFK",
      "inherited": true,
      "overrides": "Client#editAFK",
      "___id": "T000002R003175",
      "___s": true
    },
    {
      "comment": "/**\n    * Update the bot's status on all guilds\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
      "meta": {
        "range": [
          16657,
          17075
        ],
        "filename": "Client.js",
        "lineno": 342,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001227",
          "name": "Client#editStatus",
          "type": "MethodDefinition",
          "paramnames": [
            "status",
            "game"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editStatus",
      "longname": "CommandClient#editStatus",
      "kind": "function",
      "description": "Update the bot's status on all guilds",
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Sets the bot's active game, null to clear",
          "name": "game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Sets the name of the bot's active game",
          "name": "game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching",
          "name": "game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Sets the url of the shard's active game",
          "name": "game.url"
        }
      ],
      "inherits": "Client#editStatus",
      "inherited": true,
      "overrides": "Client#editStatus",
      "___id": "T000002R003176",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a Channel object from a channel ID\n    * @arg {String} channelID The ID of the channel\n    * @returns {CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel}\n    */",
      "meta": {
        "range": [
          17301,
          17721
        ],
        "filename": "Client.js",
        "lineno": 364,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001292",
          "name": "Client#getChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getChannel",
      "longname": "CommandClient#getChannel",
      "kind": "function",
      "description": "Get a Channel object from a channel ID",
      "returns": [
        {
          "type": {
            "names": [
              "CategoryChannel",
              "GroupChannel",
              "PrivateChannel",
              "TextChannel",
              "VoiceChannel",
              "NewsChannel"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "inherits": "Client#getChannel",
      "inherited": true,
      "overrides": "Client#getChannel",
      "___id": "T000002R003177",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel in a guild\n    * @arg {String} guildID The ID of the guild to create the channel in\n    * @arg {String} name The name of the channel\n    * @arg {String} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
      "meta": {
        "range": [
          19112,
          20405
        ],
        "filename": "Client.js",
        "lineno": 391,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001361",
          "name": "Client#createChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "name",
            "type",
            "reason",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createChannel",
      "longname": "CommandClient#createChannel",
      "kind": "function",
      "description": "Create a channel in a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the channel in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Object",
              "String"
            ]
          },
          "optional": true,
          "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent category channel for this channel",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing permission overwrite objects",
          "name": "options.permissionOverwrites"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "options.reason"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (voice channels only)",
          "name": "options.userLimit"
        }
      ],
      "inherits": "Client#createChannel",
      "inherited": true,
      "overrides": "Client#createChannel",
      "___id": "T000002R003178",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a channel's properties\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel (guild channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {String?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | GroupChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          21753,
          22326
        ],
        "filename": "Client.js",
        "lineno": 436,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001494",
          "name": "Client#editChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editChannel",
      "longname": "CommandClient#editChannel",
      "kind": "function",
      "description": "Edit a channel's properties",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|GroupChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the channel owner (group channels only)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel (guild channels only)",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editChannel",
      "inherited": true,
      "overrides": "Client#editChannel",
      "___id": "T000002R003179",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          22604,
          23744
        ],
        "filename": "Client.js",
        "lineno": 457,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001565",
          "name": "Client#editChannelPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editChannelPosition",
      "longname": "CommandClient#editChannelPosition",
      "kind": "function",
      "description": "Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "inherits": "Client#editChannelPosition",
      "inherited": true,
      "overrides": "Client#editChannelPosition",
      "___id": "T000002R003180",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild channel, or leave a private or group channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          23978,
          24140
        ],
        "filename": "Client.js",
        "lineno": 491,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001747",
          "name": "Client#deleteChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteChannel",
      "longname": "CommandClient#deleteChannel",
      "kind": "function",
      "description": "Delete a guild channel, or leave a private or group channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteChannel",
      "inherited": true,
      "overrides": "Client#deleteChannel",
      "___id": "T000002R003181",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24276,
          24407
        ],
        "filename": "Client.js",
        "lineno": 502,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001770",
          "name": "Client#sendChannelTyping",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "sendChannelTyping",
      "longname": "CommandClient#sendChannelTyping",
      "kind": "function",
      "description": "Send typing status in a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "inherits": "Client#sendChannelTyping",
      "inherited": true,
      "overrides": "Client#sendChannelTyping",
      "___id": "T000002R003182",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} channelID The ID of channel\n    * @arg {String} overwriteID The ID of the overwritten user or role (everyone role ID = guild ID)\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          24945,
          25223
        ],
        "filename": "Client.js",
        "lineno": 516,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001789",
          "name": "Client#editChannelPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editChannelPermission",
      "longname": "CommandClient#editChannelPermission",
      "kind": "function",
      "description": "Create a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role (everyone role ID = guild ID)",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editChannelPermission",
      "inherited": true,
      "overrides": "Client#editChannelPermission",
      "___id": "T000002R003183",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          25506,
          25715
        ],
        "filename": "Client.js",
        "lineno": 532,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001823",
          "name": "Client#deleteChannelPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteChannelPermission",
      "longname": "CommandClient#deleteChannelPermission",
      "kind": "function",
      "description": "Delete a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteChannelPermission",
      "inherited": true,
      "overrides": "Client#deleteChannelPermission",
      "___id": "T000002R003184",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          25858,
          26058
        ],
        "filename": "Client.js",
        "lineno": 543,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001848",
          "name": "Client#getChannelInvites",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getChannelInvites",
      "longname": "CommandClient#getChannelInvites",
      "kind": "function",
      "description": "Get all invites in a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "inherits": "Client#getChannelInvites",
      "inherited": true,
      "overrides": "Client#getChannelInvites",
      "___id": "T000002R003185",
      "___s": true
    },
    {
      "comment": "/**\n    * Create an invite for a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          26640,
          27033
        ],
        "filename": "Client.js",
        "lineno": 558,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001882",
          "name": "Client#createChannelInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createChannelInvite",
      "longname": "CommandClient#createChannelInvite",
      "kind": "function",
      "description": "Create an invite for a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Invite generation options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How long the invite should last in seconds",
          "name": "options.maxAge"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How many uses the invite should last for",
          "name": "options.maxUses"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is temporary or not",
          "name": "options.temporary"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is unique or not",
          "name": "options.unique"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#createChannelInvite",
      "inherited": true,
      "overrides": "Client#createChannelInvite",
      "___id": "T000002R003186",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in a channel\n    * @arg {String} channelID The ID of the channel to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          27243,
          27376
        ],
        "filename": "Client.js",
        "lineno": 573,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001933",
          "name": "Client#getChannelWebhooks",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getChannelWebhooks",
      "longname": "CommandClient#getChannelWebhooks",
      "kind": "function",
      "description": "Get all the webhooks in a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel to get webhooks for",
          "name": "channelID"
        }
      ],
      "inherits": "Client#getChannelWebhooks",
      "inherited": true,
      "overrides": "Client#getChannelWebhooks",
      "___id": "T000002R003187",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          27631,
          27808
        ],
        "filename": "Client.js",
        "lineno": 583,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001952",
          "name": "Client#getWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getWebhook",
      "longname": "CommandClient#getWebhook",
      "kind": "function",
      "description": "Get a webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        }
      ],
      "inherits": "Client#getWebhook",
      "inherited": true,
      "overrides": "Client#getWebhook",
      "___id": "T000002R003188",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel webhook\n    * @arg {String} channelID The ID of the channel to create the webhook in\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          28300,
          28495
        ],
        "filename": "Client.js",
        "lineno": 596,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100001981",
          "name": "Client#createChannelWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createChannelWebhook",
      "longname": "CommandClient#createChannelWebhook",
      "kind": "function",
      "description": "Create a channel webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel to create the webhook in",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#createChannelWebhook",
      "inherited": true,
      "overrides": "Client#createChannelWebhook",
      "___id": "T000002R003189",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} [options.name] The new default name\n    * @arg {String} [options.avatar] The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          29062,
          29301
        ],
        "filename": "Client.js",
        "lineno": 611,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002009",
          "name": "Client#editWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "options",
            "token",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editWebhook",
      "longname": "CommandClient#editWebhook",
      "kind": "function",
      "description": "Edit a webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editWebhook",
      "inherited": true,
      "overrides": "Client#editWebhook",
      "___id": "T000002R003190",
      "___s": true
    },
    {
      "comment": "/**\n    * Execute a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Webhook execution options\n    * @arg {String} [options.content=\"\"] A content string\n    * @arg {Object | Object[]} [options.file] A file object (or an Array of them)\n    * @arg {Buffer} options.file.file A buffer containing file data\n    * @arg {String} options.file.name What to name the file\n    * @arg {Object[]} [options.embeds] An array of Discord embeds\n    * @arg {String} [options.username] A custom username, defaults to webhook default username if not specified\n    * @arg {String} [options.avatarURL] A URL for a custom avatar, defaults to webhook default avatar if not specified\n    * @arg {Boolean} [options.tts=false] Whether the message should be a TTS message or not\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Boolean} [options.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @returns {Promise<Message?>}\n    */",
      "meta": {
        "range": [
          30413,
          31346
        ],
        "filename": "Client.js",
        "lineno": 633,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002047",
          "name": "Client#executeWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "executeWebhook",
      "longname": "CommandClient#executeWebhook",
      "kind": "function",
      "description": "Execute a webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<?Message>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The token of the webhook",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook execution options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"\"",
          "description": "A content string",
          "name": "options.content"
        },
        {
          "type": {
            "names": [
              "Object",
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "A file object (or an Array of them)",
          "name": "options.file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "options.file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "options.file.name"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "An array of Discord embeds",
          "name": "options.embeds"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "A custom username, defaults to webhook default username if not specified",
          "name": "options.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "A URL for a custom avatar, defaults to webhook default avatar if not specified",
          "name": "options.avatarURL"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether the message should be a TTS message or not",
          "name": "options.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to wait for the server to confirm the message create or not",
          "name": "options.wait"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "options.disableEveryone"
        }
      ],
      "inherits": "Client#executeWebhook",
      "inherited": true,
      "overrides": "Client#executeWebhook",
      "___id": "T000002R003191",
      "___s": true
    },
    {
      "comment": "/**\n    * Execute a slack-style webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Slack webhook options\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          31691,
          32010
        ],
        "filename": "Client.js",
        "lineno": 657,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002184",
          "name": "Client#executeSlackWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "executeSlackWebhook",
      "longname": "CommandClient#executeSlackWebhook",
      "kind": "function",
      "description": "Execute a slack-style webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The token of the webhook",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Slack webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Whether to wait for the server to confirm the message create or not",
          "name": "options.wait"
        }
      ],
      "inherits": "Client#executeSlackWebhook",
      "inherited": true,
      "overrides": "Client#executeSlackWebhook",
      "___id": "T000002R003192",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          32299,
          32522
        ],
        "filename": "Client.js",
        "lineno": 670,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002234",
          "name": "Client#deleteWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "webhookID",
            "token",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteWebhook",
      "longname": "CommandClient#deleteWebhook",
      "kind": "function",
      "description": "Delete a webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the webhook",
          "name": "webhookID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The token of the webhook, used instead of the Bot Authorization token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteWebhook",
      "inherited": true,
      "overrides": "Client#deleteWebhook",
      "___id": "T000002R003193",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in a guild\n    * @arg {String} guildID The ID of the guild to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          32726,
          32851
        ],
        "filename": "Client.js",
        "lineno": 681,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002267",
          "name": "Client#getGuildWebhooks",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildWebhooks",
      "longname": "CommandClient#getGuildWebhooks",
      "kind": "function",
      "description": "Get all the webhooks in a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to get webhooks for",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getGuildWebhooks",
      "inherited": true,
      "overrides": "Client#getGuildWebhooks",
      "___id": "T000002R003194",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {String} guildID The ID of the guild to get audit logs for\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with {users: Users[], entries: GuildAuditLogEntry[]}\n    */",
      "meta": {
        "range": [
          33270,
          33828
        ],
        "filename": "Client.js",
        "lineno": 693,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002286",
          "name": "Client#getGuildAuditLogs",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "limit",
            "before",
            "actionType"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildAuditLogs",
      "longname": "CommandClient#getGuildAuditLogs",
      "kind": "function",
      "description": "Get the audit logs for a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {users: Users[], entries: GuildAuditLogEntry[]}"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to get audit logs for",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The maximum number of entries to return",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get entries before this entry ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Filter entries by action type",
          "name": "actionType"
        }
      ],
      "inherits": "Client#getGuildAuditLogs",
      "inherited": true,
      "overrides": "Client#getGuildAuditLogs",
      "___id": "T000002R003195",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild emoji object\n    * @arg {String} guildID The ID of the guild to create the emoji in\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          34307,
          34490
        ],
        "filename": "Client.js",
        "lineno": 717,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002365",
          "name": "Client#createGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createGuildEmoji",
      "longname": "CommandClient#createGuildEmoji",
      "kind": "function",
      "description": "Create a guild emoji object",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The base 64 encoded string",
          "name": "options.image"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#createGuildEmoji",
      "inherited": true,
      "overrides": "Client#createGuildEmoji",
      "___id": "T000002R003196",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild emoji object\n    * @arg {String} guildID The ID of the guild to edit the emoji in\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
      "meta": {
        "range": [
          34973,
          35172
        ],
        "filename": "Client.js",
        "lineno": 732,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002393",
          "name": "Client#editGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editGuildEmoji",
      "longname": "CommandClient#editGuildEmoji",
      "kind": "function",
      "description": "Edit a guild emoji object",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild emoji object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to edit the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji you want to modify",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Emoji options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of emoji",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "An array containing authorized role IDs",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editGuildEmoji",
      "inherited": true,
      "overrides": "Client#editGuildEmoji",
      "___id": "T000002R003197",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild emoji object\n    * @arg {String} guildID The ID of the guild to delete the emoji in\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          35441,
          35624
        ],
        "filename": "Client.js",
        "lineno": 744,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002423",
          "name": "Client#deleteGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteGuildEmoji",
      "longname": "CommandClient#deleteGuildEmoji",
      "kind": "function",
      "description": "Delete a guild emoji object",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to delete the emoji in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteGuildEmoji",
      "inherited": true,
      "overrides": "Client#deleteGuildEmoji",
      "___id": "T000002R003198",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {Object} [options] The properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          36293,
          36700
        ],
        "filename": "Client.js",
        "lineno": 762,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002448",
          "name": "Client#createRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createRole",
      "longname": "CommandClient#createRole",
      "kind": "function",
      "description": "Create a guild role",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the role in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The properties to set",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#createRole",
      "inherited": true,
      "overrides": "Client#createRole",
      "___id": "T000002R003199",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild role\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
      "meta": {
        "range": [
          37405,
          37652
        ],
        "filename": "Client.js",
        "lineno": 787,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002509",
          "name": "Client#editRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editRole",
      "longname": "CommandClient#editRole",
      "kind": "function",
      "description": "Edit a guild role",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Role>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild the role is in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the role",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The role permissions number",
          "name": "options.permissions"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
          "name": "options.color"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to hoist the role in the user list or not",
          "name": "options.hoist"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the role is mentionable or not",
          "name": "options.mentionable"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editRole",
      "inherited": true,
      "overrides": "Client#editRole",
      "___id": "T000002R003200",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          37978,
          39011
        ],
        "filename": "Client.js",
        "lineno": 799,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002554",
          "name": "Client#editRolePosition",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editRolePosition",
      "longname": "CommandClient#editRolePosition",
      "kind": "function",
      "description": "Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild the role is in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the role",
          "name": "position"
        }
      ],
      "inherits": "Client#editRolePosition",
      "inherited": true,
      "overrides": "Client#editRolePosition",
      "___id": "T000002R003201",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          39269,
          39443
        ],
        "filename": "Client.js",
        "lineno": 832,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002732",
          "name": "Client#deleteRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteRole",
      "longname": "CommandClient#deleteRole",
      "kind": "function",
      "description": "Delete a guild role",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild to create the role in",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteRole",
      "inherited": true,
      "overrides": "Client#deleteRole",
      "___id": "T000002R003202",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the prune count for a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @returns {Promise<Number>} Resolves with the number of users that would be pruned\n    */",
      "meta": {
        "range": [
          39709,
          39892
        ],
        "filename": "Client.js",
        "lineno": 844,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002757",
          "name": "Client#getPruneCount",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "days"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getPruneCount",
      "longname": "CommandClient#getPruneCount",
      "kind": "function",
      "description": "Get the prune count for a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of users that would be pruned"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        }
      ],
      "inherits": "Client#getPruneCount",
      "inherited": true,
      "overrides": "Client#getPruneCount",
      "___id": "T000002R003203",
      "___s": true
    },
    {
      "comment": "/**\n    * Begin pruning a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} days The number of days of inactivity to prune for\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of pruned users\n    */",
      "meta": {
        "range": [
          40204,
          40415
        ],
        "filename": "Client.js",
        "lineno": 857,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002788",
          "name": "Client#pruneMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "days",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "pruneMembers",
      "longname": "CommandClient#pruneMembers",
      "kind": "function",
      "description": "Begin pruning a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of pruned users"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of days of inactivity to prune for",
          "name": "days"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#pruneMembers",
      "inherited": true,
      "overrides": "Client#pruneMembers",
      "___id": "T000002R003204",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of general/guild-specific voice regions\n    * @arg {String} [guildID] The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
      "meta": {
        "range": [
          40625,
          40832
        ],
        "filename": "Client.js",
        "lineno": 869,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002822",
          "name": "Client#getVoiceRegions",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getVoiceRegions",
      "longname": "CommandClient#getVoiceRegions",
      "kind": "function",
      "description": "Get a list of general/guild-specific voice regions",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of voice region objects"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getVoiceRegions",
      "inherited": true,
      "overrides": "Client#getVoiceRegions",
      "___id": "T000002R003205",
      "___s": true
    },
    {
      "comment": "/**\n    * Get info on an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {Boolean} [withCounts] Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          41118,
          41334
        ],
        "filename": "Client.js",
        "lineno": 879,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002854",
          "name": "Client#getInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID",
            "withCounts"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getInvite",
      "longname": "CommandClient#getInvite",
      "kind": "function",
      "description": "Get info on an invite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)",
          "name": "withCounts"
        }
      ],
      "inherits": "Client#getInvite",
      "inherited": true,
      "overrides": "Client#getInvite",
      "___id": "T000002R003206",
      "___s": true
    },
    {
      "comment": "/**\n    * Accept an invite (not for bot accounts)\n    * @arg {String} inviteID The ID of the invite\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          41484,
          41643
        ],
        "filename": "Client.js",
        "lineno": 890,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002886",
          "name": "Client#acceptInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "acceptInvite",
      "longname": "CommandClient#acceptInvite",
      "kind": "function",
      "description": "Accept an invite (not for bot accounts)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        }
      ],
      "inherits": "Client#acceptInvite",
      "inherited": true,
      "overrides": "Client#acceptInvite",
      "___id": "T000002R003207",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          41832,
          41990
        ],
        "filename": "Client.js",
        "lineno": 900,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002914",
          "name": "Client#deleteInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "inviteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteInvite",
      "longname": "CommandClient#deleteInvite",
      "kind": "function",
      "description": "Delete an invite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the invite",
          "name": "inviteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteInvite",
      "inherited": true,
      "overrides": "Client#deleteInvite",
      "___id": "T000002R003208",
      "___s": true
    },
    {
      "comment": "/**\n    * Get properties of the bot user\n    * @returns {Promise<ExtendedUser>}\n    */",
      "meta": {
        "range": [
          42087,
          42229
        ],
        "filename": "Client.js",
        "lineno": 910,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002937",
          "name": "Client#getSelf",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getSelf",
      "longname": "CommandClient#getSelf",
      "kind": "function",
      "description": "Get properties of the bot user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<ExtendedUser>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getSelf",
      "inherited": true,
      "overrides": "Client#getSelf",
      "___id": "T000002R003209",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit properties of the bot user\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.username] The new username\n    * @arg {String} [options.avatar] The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<ExtendedUser>}\n    */",
      "meta": {
        "range": [
          42567,
          42728
        ],
        "filename": "Client.js",
        "lineno": 921,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002964",
          "name": "Client#editSelf",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editSelf",
      "longname": "CommandClient#editSelf",
      "kind": "function",
      "description": "Edit properties of the bot user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<ExtendedUser>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new username",
          "name": "options.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        }
      ],
      "inherits": "Client#editSelf",
      "inherited": true,
      "overrides": "Client#editSelf",
      "___id": "T000002R003210",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a DM channel with a user, or create one if it does not exist\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          42907,
          43308
        ],
        "filename": "Client.js",
        "lineno": 930,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100002993",
          "name": "Client#getDMChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getDMChannel",
      "longname": "CommandClient#getDMChannel",
      "kind": "function",
      "description": "Get a DM channel with a user, or create one if it does not exist",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        }
      ],
      "inherits": "Client#getDMChannel",
      "inherited": true,
      "overrides": "Client#getDMChannel",
      "___id": "T000002R003211",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a group channel with other users\n    * @arg {String[]} userIDs The IDs of the other users\n    * @returns {Promise<PrivateChannel>}\n    */",
      "meta": {
        "range": [
          43473,
          43729
        ],
        "filename": "Client.js",
        "lineno": 945,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003050",
          "name": "Client#createGroupChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "userIDs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createGroupChannel",
      "longname": "CommandClient#createGroupChannel",
      "kind": "function",
      "description": "Create a group channel with other users",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PrivateChannel>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the other users",
          "name": "userIDs"
        }
      ],
      "inherits": "Client#createGroupChannel",
      "inherited": true,
      "overrides": "Client#createGroupChannel",
      "___id": "T000002R003212",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          43930,
          44122
        ],
        "filename": "Client.js",
        "lineno": 958,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003083",
          "name": "Client#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessage",
      "longname": "CommandClient#getMessage",
      "kind": "function",
      "description": "Get a previous message in a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "Client#getMessage",
      "inherited": true,
      "overrides": "Client#getMessage",
      "___id": "T000002R003213",
      "___s": true
    },
    {
      "comment": "/**\n    * Get previous messages in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          44563,
          46462
        ],
        "filename": "Client.js",
        "lineno": 971,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003113",
          "name": "Client#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessages",
      "longname": "CommandClient#getMessages",
      "kind": "function",
      "description": "Get previous messages in a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "inherits": "Client#getMessages",
      "inherited": true,
      "overrides": "Client#getMessages",
      "___id": "T000002R003214",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          46607,
          46799
        ],
        "filename": "Client.js",
        "lineno": 1014,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003381",
          "name": "Client#getPins",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getPins",
      "longname": "CommandClient#getPins",
      "kind": "function",
      "description": "Get all the pins in a channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "inherits": "Client#getPins",
      "inherited": true,
      "overrides": "Client#getPins",
      "___id": "T000002R003215",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in a channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user\n    * @arg {String} channelID The ID of the channel\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object | Object[]} [file] A file object (or an Array of them)\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          47793,
          48901
        ],
        "filename": "Client.js",
        "lineno": 1032,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003415",
          "name": "Client#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createMessage",
      "longname": "CommandClient#createMessage",
      "kind": "function",
      "description": "Create a message in a channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object",
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "A file object (or an Array of them)",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "inherits": "Client#createMessage",
      "inherited": true,
      "overrides": "Client#createMessage",
      "___id": "T000002R003216",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          49797,
          50832
        ],
        "filename": "Client.js",
        "lineno": 1063,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003567",
          "name": "Client#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editMessage",
      "longname": "CommandClient#editMessage",
      "kind": "function",
      "description": "Edit a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "inherits": "Client#editMessage",
      "inherited": true,
      "overrides": "Client#editMessage",
      "___id": "T000002R003217",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          51002,
          51144
        ],
        "filename": "Client.js",
        "lineno": 1087,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003710",
          "name": "Client#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "pinMessage",
      "longname": "CommandClient#pinMessage",
      "kind": "function",
      "description": "Pin a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "Client#pinMessage",
      "inherited": true,
      "overrides": "Client#pinMessage",
      "___id": "T000002R003218",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          51316,
          51463
        ],
        "filename": "Client.js",
        "lineno": 1097,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003731",
          "name": "Client#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "unpinMessage",
      "longname": "CommandClient#unpinMessage",
      "kind": "function",
      "description": "Unpin a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "Client#unpinMessage",
      "inherited": true,
      "overrides": "Client#unpinMessage",
      "___id": "T000002R003219",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          51980,
          52453
        ],
        "filename": "Client.js",
        "lineno": 1111,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003752",
          "name": "Client#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessageReaction",
      "longname": "CommandClient#getMessageReaction",
      "kind": "function",
      "description": "Get a list of users who reacted with a specific reaction",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "inherits": "Client#getMessageReaction",
      "inherited": true,
      "overrides": "Client#getMessageReaction",
      "___id": "T000002R003220",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          52816,
          53139
        ],
        "filename": "Client.js",
        "lineno": 1130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003815",
          "name": "Client#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addMessageReaction",
      "longname": "CommandClient#addMessageReaction",
      "kind": "function",
      "description": "Add a reaction to a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "inherits": "Client#addMessageReaction",
      "inherited": true,
      "overrides": "Client#addMessageReaction",
      "___id": "T000002R003221",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          53522,
          53851
        ],
        "filename": "Client.js",
        "lineno": 1145,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003855",
          "name": "Client#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeMessageReaction",
      "longname": "CommandClient#removeMessageReaction",
      "kind": "function",
      "description": "Remove a reaction from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "inherits": "Client#removeMessageReaction",
      "inherited": true,
      "overrides": "Client#removeMessageReaction",
      "___id": "T000002R003222",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54043,
          54214
        ],
        "filename": "Client.js",
        "lineno": 1158,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003895",
          "name": "Client#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeMessageReactions",
      "longname": "CommandClient#removeMessageReactions",
      "kind": "function",
      "description": "Remove all reactions from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "Client#removeMessageReactions",
      "inherited": true,
      "overrides": "Client#removeMessageReactions",
      "___id": "T000002R003223",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54457,
          54649
        ],
        "filename": "Client.js",
        "lineno": 1169,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003916",
          "name": "Client#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteMessage",
      "longname": "CommandClient#deleteMessage",
      "kind": "function",
      "description": "Delete a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteMessage",
      "inherited": true,
      "overrides": "Client#deleteMessage",
      "___id": "T000002R003224",
      "___s": true
    },
    {
      "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          54928,
          55982
        ],
        "filename": "Client.js",
        "lineno": 1182,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100003941",
          "name": "Client#deleteMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "messageIDs",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteMessages",
      "longname": "CommandClient#deleteMessages",
      "kind": "function",
      "description": "Bulk delete messages (bot accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of message IDs to delete",
          "name": "messageIDs"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#deleteMessages",
      "inherited": true,
      "overrides": "Client#deleteMessages",
      "___id": "T000002R003225",
      "___s": true
    },
    {
      "comment": "/**\n    * Purge previous messages in a channel with an optional filter (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
      "meta": {
        "range": [
          56544,
          58602
        ],
        "filename": "Client.js",
        "lineno": 1217,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004073",
          "name": "Client#purgeChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "limit",
            "filter",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "purgeChannel",
      "longname": "CommandClient#purgeChannel",
      "kind": "function",
      "description": "Purge previous messages in a channel with an optional filter (bot accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of messages deleted"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of messages to search through, -1 for no limit",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional filter function that returns a boolean when passed a Message object",
          "name": "filter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        }
      ],
      "inherits": "Client#purgeChannel",
      "inherited": true,
      "overrides": "Client#purgeChannel",
      "___id": "T000002R003226",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's embed object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild embed object\n    */",
      "meta": {
        "range": [
          58758,
          58877
        ],
        "filename": "Client.js",
        "lineno": 1280,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004340",
          "name": "Client#getGuildEmbed",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildEmbed",
      "longname": "CommandClient#getGuildEmbed",
      "kind": "function",
      "description": "Get a guild's embed object",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A guild embed object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getGuildEmbed",
      "inherited": true,
      "overrides": "Client#getGuildEmbed",
      "___id": "T000002R003227",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of integrations for a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
      "meta": {
        "range": [
          59036,
          59317
        ],
        "filename": "Client.js",
        "lineno": 1289,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004359",
          "name": "Client#getGuildIntegrations",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildIntegrations",
      "longname": "CommandClient#getGuildIntegrations",
      "kind": "function",
      "description": "Get a list of integrations for a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<GuildIntegration>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getGuildIntegrations",
      "inherited": true,
      "overrides": "Client#getGuildIntegrations",
      "___id": "T000002R003228",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          59862,
          60215
        ],
        "filename": "Client.js",
        "lineno": 1304,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004403",
          "name": "Client#editGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editGuildIntegration",
      "longname": "CommandClient#editGuildIntegration",
      "kind": "function",
      "description": "Edit a guild integration",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "What to do when a user's subscription runs out",
          "name": "options.expireBehavior"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "How long before the integration's role is removed from an unsubscribed user",
          "name": "options.expireGracePeriod"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Whether to enable integration emoticons or not",
          "name": "options.enableEmoticons"
        }
      ],
      "inherits": "Client#editGuildIntegration",
      "inherited": true,
      "overrides": "Client#editGuildIntegration",
      "___id": "T000002R003229",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          60402,
          60569
        ],
        "filename": "Client.js",
        "lineno": 1318,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004438",
          "name": "Client#deleteGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteGuildIntegration",
      "longname": "CommandClient#deleteGuildIntegration",
      "kind": "function",
      "description": "Delete a guild integration",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "inherits": "Client#deleteGuildIntegration",
      "inherited": true,
      "overrides": "Client#deleteGuildIntegration",
      "___id": "T000002R003230",
      "___s": true
    },
    {
      "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          60763,
          60931
        ],
        "filename": "Client.js",
        "lineno": 1328,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004459",
          "name": "Client#syncGuildIntegration",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "integrationID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "syncGuildIntegration",
      "longname": "CommandClient#syncGuildIntegration",
      "kind": "function",
      "description": "Force a guild integration to sync",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the integration",
          "name": "integrationID"
        }
      ],
      "inherits": "Client#syncGuildIntegration",
      "inherited": true,
      "overrides": "Client#syncGuildIntegration",
      "___id": "T000002R003231",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          61068,
          61260
        ],
        "filename": "Client.js",
        "lineno": 1337,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004480",
          "name": "Client#getGuildInvites",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildInvites",
      "longname": "CommandClient#getGuildInvites",
      "kind": "function",
      "description": "Get all invites in a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getGuildInvites",
      "inherited": true,
      "overrides": "Client#getGuildInvites",
      "___id": "T000002R003232",
      "___s": true
    },
    {
      "comment": "/**\n    * Returns the vanity url of the guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          61396,
          61521
        ],
        "filename": "Client.js",
        "lineno": 1346,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004514",
          "name": "Client#getGuildVanity",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildVanity",
      "longname": "CommandClient#getGuildVanity",
      "kind": "function",
      "description": "Returns the vanity url of the guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getGuildVanity",
      "inherited": true,
      "overrides": "Client#getGuildVanity",
      "___id": "T000002R003233",
      "___s": true
    },
    {
      "comment": "/**\n    * Ban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for, between 0-7 inclusive\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          61864,
          62377
        ],
        "filename": "Client.js",
        "lineno": 1358,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004533",
          "name": "Client#banGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "deleteMessageDays",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "banGuildMember",
      "longname": "CommandClient#banGuildMember",
      "kind": "function",
      "description": "Ban a user from a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of days to delete messages for, between 0-7 inclusive",
          "name": "deleteMessageDays"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#banGuildMember",
      "inherited": true,
      "overrides": "Client#banGuildMember",
      "___id": "T000002R003234",
      "___s": true
    },
    {
      "comment": "/**\n    * Unban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          62619,
          62798
        ],
        "filename": "Client.js",
        "lineno": 1375,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004588",
          "name": "Client#unbanGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "unbanGuildMember",
      "longname": "CommandClient#unbanGuildMember",
      "kind": "function",
      "description": "Unban a user from a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#unbanGuildMember",
      "inherited": true,
      "overrides": "Client#unbanGuildMember",
      "___id": "T000002R003235",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a guild\n    * @arg {String} name The name of the guild\n    * @arg {String} region The region of the guild\n    * @arg {String} [icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          63093,
          63323
        ],
        "filename": "Client.js",
        "lineno": 1388,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004613",
          "name": "Client#createGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "name",
            "region",
            "icon"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createGuild",
      "longname": "CommandClient#createGuild",
      "kind": "function",
      "description": "Create a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the guild",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The region of the guild",
          "name": "region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "icon",
          "defaultvalue": null
        }
      ],
      "inherits": "Client#createGuild",
      "inherited": true,
      "overrides": "Client#createGuild",
      "___id": "T000002R003236",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the user to transfer server ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.description] The description for the guild (VIP only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          65002,
          65818
        ],
        "filename": "Client.js",
        "lineno": 1416,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004650",
          "name": "Client#editGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editGuild",
      "longname": "CommandClient#editGuild",
      "kind": "function",
      "description": "Edit a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the guild",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The region of the guild",
          "name": "options.region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.icon"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The guild verification level",
          "name": "options.verificationLevel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
          "name": "options.defaultNotifications"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
          "name": "options.explicitContentFilter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the system channel",
          "name": "options.systemChannelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the AFK voice channel",
          "name": "options.afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The AFK timeout in seconds",
          "name": "options.afkTimeout"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the user to transfer server ownership to (bot user must be owner)",
          "name": "options.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
          "name": "options.banner"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The description for the guild (VIP only)",
          "name": "options.description"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editGuild",
      "inherited": true,
      "overrides": "Client#editGuild",
      "___id": "T000002R003237",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          66011,
          66286
        ],
        "filename": "Client.js",
        "lineno": 1440,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004735",
          "name": "Client#getGuildBans",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildBans",
      "longname": "CommandClient#getGuildBans",
      "kind": "function",
      "description": "Get the ban list of a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of {reason: String, user: User}"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getGuildBans",
      "inherited": true,
      "overrides": "Client#getGuildBans",
      "___id": "T000002R003238",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
      "meta": {
        "range": [
          66529,
          66760
        ],
        "filename": "Client.js",
        "lineno": 1455,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004781",
          "name": "Client#getGuildBan",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getGuildBan",
      "longname": "CommandClient#getGuildBan",
      "kind": "function",
      "description": "Get a ban from the ban list of a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with {reason: String, user: User}"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the banned user",
          "name": "userID"
        }
      ],
      "inherits": "Client#getGuildBan",
      "inherited": true,
      "overrides": "Client#getGuildBan",
      "___id": "T000002R003239",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          67445,
          67903
        ],
        "filename": "Client.js",
        "lineno": 1475,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004821",
          "name": "Client#editGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editGuildMember",
      "longname": "CommandClient#editGuildMember",
      "kind": "function",
      "description": "Edit a guild member",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "The array of role IDs the member should have",
          "name": "options.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Set the member's server nickname, \"\" to remove",
          "name": "options.nick"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server mute the member",
          "name": "options.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Server deafen the member",
          "name": "options.deaf"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The ID of the voice channel to move the member to (must be in voice)",
          "name": "options.channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editGuildMember",
      "inherited": true,
      "overrides": "Client#editGuildMember",
      "___id": "T000002R003240",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          68198,
          68404
        ],
        "filename": "Client.js",
        "lineno": 1494,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004886",
          "name": "Client#addGuildMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addGuildMemberRole",
      "longname": "CommandClient#addGuildMemberRole",
      "kind": "function",
      "description": "Add a role to a guild member",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#addGuildMemberRole",
      "inherited": true,
      "overrides": "Client#addGuildMemberRole",
      "___id": "T000002R003241",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          68704,
          68916
        ],
        "filename": "Client.js",
        "lineno": 1508,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004913",
          "name": "Client#removeGuildMemberRole",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID",
            "roleID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeGuildMemberRole",
      "longname": "CommandClient#removeGuildMemberRole",
      "kind": "function",
      "description": "Remove a role from a guild member",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the role",
          "name": "roleID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#removeGuildMemberRole",
      "inherited": true,
      "overrides": "Client#removeGuildMemberRole",
      "___id": "T000002R003242",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the bot's nickname in a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} nick The nickname\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69159,
          69356
        ],
        "filename": "Client.js",
        "lineno": 1521,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004940",
          "name": "Client#editNickname",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "nick",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editNickname",
      "longname": "CommandClient#editNickname",
      "kind": "function",
      "description": "Edit the bot's nickname in a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The nickname",
          "name": "nick"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#editNickname",
      "inherited": true,
      "overrides": "Client#editNickname",
      "___id": "T000002R003243",
      "___s": true
    },
    {
      "comment": "/**\n    * Kick a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69597,
          69778
        ],
        "filename": "Client.js",
        "lineno": 1535,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004967",
          "name": "Client#kickGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "userID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "kickGuildMember",
      "longname": "CommandClient#kickGuildMember",
      "kind": "function",
      "description": "Kick a user from a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "Client#kickGuildMember",
      "inherited": true,
      "overrides": "Client#kickGuildMember",
      "___id": "T000002R003244",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a guild (bot user must be owner)\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          69918,
          70032
        ],
        "filename": "Client.js",
        "lineno": 1546,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100004992",
          "name": "Client#deleteGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteGuild",
      "longname": "CommandClient#deleteGuild",
      "kind": "function",
      "description": "Delete a guild (bot user must be owner)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#deleteGuild",
      "inherited": true,
      "overrides": "Client#deleteGuild",
      "___id": "T000002R003245",
      "___s": true
    },
    {
      "comment": "/**\n    * Leave a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          70146,
          70271
        ],
        "filename": "Client.js",
        "lineno": 1555,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005011",
          "name": "Client#leaveGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "leaveGuild",
      "longname": "CommandClient#leaveGuild",
      "kind": "function",
      "description": "Leave a guild",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#leaveGuild",
      "inherited": true,
      "overrides": "Client#leaveGuild",
      "___id": "T000002R003246",
      "___s": true
    },
    {
      "comment": "/**\n    * Get data on an OAuth2 application\n    * @arg {String} [appID=\"@me\"] The client ID of the application to get data for. \"@me\" refers to the logged in user's own application\n    * @returns {Promise<Object>} The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure\n    */",
      "meta": {
        "range": [
          70697,
          70834
        ],
        "filename": "Client.js",
        "lineno": 1564,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005031",
          "name": "Client#getOAuthApplication",
          "type": "MethodDefinition",
          "paramnames": [
            "appID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getOAuthApplication",
      "longname": "CommandClient#getOAuthApplication",
      "kind": "function",
      "description": "Get data on an OAuth2 application",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The client ID of the application to get data for. \"@me\" refers to the logged in user's own application",
          "name": "appID"
        }
      ],
      "inherits": "Client#getOAuthApplication",
      "inherited": true,
      "overrides": "Client#getOAuthApplication",
      "___id": "T000002R003247",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71069,
          71261
        ],
        "filename": "Client.js",
        "lineno": 1574,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005052",
          "name": "Client#addRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "block"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addRelationship",
      "longname": "CommandClient#addRelationship",
      "kind": "function",
      "description": "Create a relationship with a user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "If true, block the user. Otherwise, add the user as a friend",
          "name": "block"
        }
      ],
      "inherits": "Client#addRelationship",
      "inherited": true,
      "overrides": "Client#addRelationship",
      "___id": "T000002R003248",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71400,
          71538
        ],
        "filename": "Client.js",
        "lineno": 1585,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005079",
          "name": "Client#removeRelationship",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeRelationship",
      "longname": "CommandClient#removeRelationship",
      "kind": "function",
      "description": "Remove a relationship with a user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "inherits": "Client#removeRelationship",
      "inherited": true,
      "overrides": "Client#removeRelationship",
      "___id": "T000002R003249",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a user to a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          71720,
          71865
        ],
        "filename": "Client.js",
        "lineno": 1595,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005099",
          "name": "Client#addGroupRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "groupID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addGroupRecipient",
      "longname": "CommandClient#addGroupRecipient",
      "kind": "function",
      "description": "Add a user to a group",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target group",
          "name": "groupID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "inherits": "Client#addGroupRecipient",
      "inherited": true,
      "overrides": "Client#addGroupRecipient",
      "___id": "T000002R003250",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a user from a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72052,
          72203
        ],
        "filename": "Client.js",
        "lineno": 1605,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005120",
          "name": "Client#removeGroupRecipient",
          "type": "MethodDefinition",
          "paramnames": [
            "groupID",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeGroupRecipient",
      "longname": "CommandClient#removeGroupRecipient",
      "kind": "function",
      "description": "Remove a user from a group",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target group",
          "name": "groupID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "inherits": "Client#removeGroupRecipient",
      "inherited": true,
      "overrides": "Client#removeGroupRecipient",
      "___id": "T000002R003251",
      "___s": true
    },
    {
      "comment": "/**\n    * Get profile data for a user (user accounts only)\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
      "meta": {
        "range": [
          72390,
          72509
        ],
        "filename": "Client.js",
        "lineno": 1614,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005141",
          "name": "Client#getUserProfile",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getUserProfile",
      "longname": "CommandClient#getUserProfile",
      "kind": "function",
      "description": "Get profile data for a user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's profile data."
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        }
      ],
      "inherits": "Client#getUserProfile",
      "inherited": true,
      "overrides": "Client#getUserProfile",
      "___id": "T000002R003252",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the current user's note for another user (user accounts only)\n    * @arg {String} userID The ID of the target user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72715,
          72872
        ],
        "filename": "Client.js",
        "lineno": 1624,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005160",
          "name": "Client#editUserNote",
          "type": "MethodDefinition",
          "paramnames": [
            "userID",
            "note"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editUserNote",
      "longname": "CommandClient#editUserNote",
      "kind": "function",
      "description": "Edit the current user's note for another user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the target user",
          "name": "userID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The note",
          "name": "note"
        }
      ],
      "inherits": "Client#editUserNote",
      "inherited": true,
      "overrides": "Client#editUserNote",
      "___id": "T000002R003253",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the current user's note for another user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          72993,
          73119
        ],
        "filename": "Client.js",
        "lineno": 1634,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005184",
          "name": "Client#deleteUserNote",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteUserNote",
      "longname": "CommandClient#deleteUserNote",
      "kind": "function",
      "description": "Delete the current user's note for another user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#deleteUserNote",
      "inherited": true,
      "overrides": "Client#deleteUserNote",
      "___id": "T000002R003254",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the connections for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's connections\n    */",
      "meta": {
        "range": [
          73264,
          73384
        ],
        "filename": "Client.js",
        "lineno": 1642,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005204",
          "name": "Client#getSelfConnections",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getSelfConnections",
      "longname": "CommandClient#getSelfConnections",
      "kind": "function",
      "description": "Get the connections for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's connections"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getSelfConnections",
      "inherited": true,
      "overrides": "Client#getSelfConnections",
      "___id": "T000002R003255",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a connection for the current user (user accounts only)\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @arg {Object} data The connection data\n    * @arg {Boolean} [data.friendSync] Whether to sync friends from the connection or not\n    * @arg {Number} [data.visibility] The visibility level for the connection. 0 = hidden, 1 = shown on profile\n    * @returns {Promise<Object>} The updated connection data\n    */",
      "meta": {
        "range": [
          73899,
          74156
        ],
        "filename": "Client.js",
        "lineno": 1655,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005222",
          "name": "Client#editSelfConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "platform",
            "id",
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editSelfConnection",
      "longname": "CommandClient#editSelfConnection",
      "kind": "function",
      "description": "Edit a connection for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The updated connection data"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
          "name": "platform"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection ID",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The connection data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to sync friends from the connection or not",
          "name": "data.friendSync"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The visibility level for the connection. 0 = hidden, 1 = shown on profile",
          "name": "data.visibility"
        }
      ],
      "inherits": "Client#editSelfConnection",
      "inherited": true,
      "overrides": "Client#editSelfConnection",
      "___id": "T000002R003256",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a connection for the current user (user accounts only)\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          74390,
          74549
        ],
        "filename": "Client.js",
        "lineno": 1668,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005254",
          "name": "Client#deleteSelfConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "platform",
            "id"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteSelfConnection",
      "longname": "CommandClient#deleteSelfConnection",
      "kind": "function",
      "description": "Delete a connection for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
          "name": "platform"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The connection ID",
          "name": "id"
        }
      ],
      "inherits": "Client#deleteSelfConnection",
      "inherited": true,
      "overrides": "Client#deleteSelfConnection",
      "___id": "T000002R003257",
      "___s": true
    },
    {
      "comment": "/**\n    * Get settings for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's settings data.\n    */",
      "meta": {
        "range": [
          74690,
          74804
        ],
        "filename": "Client.js",
        "lineno": 1676,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005276",
          "name": "Client#getSelfSettings",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getSelfSettings",
      "longname": "CommandClient#getSelfSettings",
      "kind": "function",
      "description": "Get settings for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's settings data."
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getSelfSettings",
      "inherited": true,
      "overrides": "Client#getSelfSettings",
      "___id": "T000002R003258",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit settings for the current user (user accounts only)\n    * @arg {Object} data The user settings data\n    * @arg {Boolean} [data.convertEmoticons] Whether to convert emoticons or not (e.g. :D => 😄)\n    * @arg {Boolean} [data.detectPlatformAccounts] Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)\n    * @arg {Boolean} [data.developerMode] Whether to enable developer mode or not\n    * @arg {Boolean} [data.enableTTSCommand] Whether to respect usage of the TTS command or not\n    * @arg {Object} [data.friendSourceFlags] An object representing allowed friend request sources\n    * @arg {Boolean} [data.friendSourceFlags.all] Whether to allow friends requests from anywhere or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualFriends] Whether to allow friend requests from people with mutual friends or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualGuilds] Whether to allow friend requests from people in mutual guilds or not\n    * @arg {Array<String>} [data.guildPositions] An ordered array of guild IDs representing the guild list order in the Discord client\n    * @arg {Boolean} [data.inlineAttachmentMedia] Whether to show attachment previews or not\n    * @arg {Boolean} [data.inlineEmbedMedia] Whether to show embed images or not\n    * @arg {String} [data.locale] The locale to use for the Discord UI\n    * @arg {Boolean} [data.messageDisplayCompact] Whether to use compact mode or not\n    * @arg {Boolean} [data.renderEmbeds] Whether to show embeds or not\n    * @arg {Boolean} [data.renderReactions] Whether to show reactions or not\n    * @arg {Array<String>} [data.restrictedGuilds] An array of guild IDs where direct messages from guild members are disallowed\n    * @arg {Boolean} [data.showCurrentGame] Whether to set the user's status to the current game or not\n    * @arg {String} [data.status] The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"\n    * @arg {String} [data.theme] The theme to use for the Discord UI, either \"dark\" or \"light\"\n    * @returns {Promise<Object>} The user's settings data.\n    */",
      "meta": {
        "range": [
          76923,
          78350
        ],
        "filename": "Client.js",
        "lineno": 1704,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005294",
          "name": "Client#editSelfSettings",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editSelfSettings",
      "longname": "CommandClient#editSelfSettings",
      "kind": "function",
      "description": "Edit settings for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's settings data."
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The user settings data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to convert emoticons or not (e.g. :D => 😄)",
          "name": "data.convertEmoticons"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)",
          "name": "data.detectPlatformAccounts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to enable developer mode or not",
          "name": "data.developerMode"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to respect usage of the TTS command or not",
          "name": "data.enableTTSCommand"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An object representing allowed friend request sources",
          "name": "data.friendSourceFlags"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friends requests from anywhere or not",
          "name": "data.friendSourceFlags.all"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friend requests from people with mutual friends or not",
          "name": "data.friendSourceFlags.mutualFriends"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to allow friend requests from people in mutual guilds or not",
          "name": "data.friendSourceFlags.mutualGuilds"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An ordered array of guild IDs representing the guild list order in the Discord client",
          "name": "data.guildPositions"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show attachment previews or not",
          "name": "data.inlineAttachmentMedia"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show embed images or not",
          "name": "data.inlineEmbedMedia"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The locale to use for the Discord UI",
          "name": "data.locale"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to use compact mode or not",
          "name": "data.messageDisplayCompact"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show embeds or not",
          "name": "data.renderEmbeds"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to show reactions or not",
          "name": "data.renderReactions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "An array of guild IDs where direct messages from guild members are disallowed",
          "name": "data.restrictedGuilds"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to set the user's status to the current game or not",
          "name": "data.showCurrentGame"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"",
          "name": "data.status"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The theme to use for the Discord UI, either \"dark\" or \"light\"",
          "name": "data.theme"
        }
      ],
      "inherits": "Client#editSelfSettings",
      "inherited": true,
      "overrides": "Client#editSelfSettings",
      "___id": "T000002R003259",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the MFA backup codes for the current user (user accounts only)\n    * @arg {String} password The password for the current user\n    * @arg {Boolean} [regenerate] Whether to regenerate the MFA backup codes or not\n    * @returns {Promise<Object>} The user's MFA codes\n    */",
      "meta": {
        "range": [
          78645,
          78863
        ],
        "filename": "Client.js",
        "lineno": 1744,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005428",
          "name": "Client#getSelfMFACodes",
          "type": "MethodDefinition",
          "paramnames": [
            "password",
            "regenerate"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getSelfMFACodes",
      "longname": "CommandClient#getSelfMFACodes",
      "kind": "function",
      "description": "Get the MFA backup codes for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's MFA codes"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The password for the current user",
          "name": "password"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to regenerate the MFA backup codes or not",
          "name": "regenerate"
        }
      ],
      "inherits": "Client#getSelfMFACodes",
      "inherited": true,
      "overrides": "Client#getSelfMFACodes",
      "___id": "T000002R003260",
      "___s": true
    },
    {
      "comment": "/**\n    * Enable TOTP authentication for the current user (user accounts only)\n    * @arg {String} secret The TOTP secret used to generate the auth code\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token and backup codes\n    */",
      "meta": {
        "range": [
          79205,
          79503
        ],
        "filename": "Client.js",
        "lineno": 1757,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005455",
          "name": "Client#enableSelfMFATOTP",
          "type": "MethodDefinition",
          "paramnames": [
            "secret",
            "code"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "enableSelfMFATOTP",
      "longname": "CommandClient#enableSelfMFATOTP",
      "kind": "function",
      "description": "Enable TOTP authentication for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An object containing the user's new authorization token and backup codes"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The TOTP secret used to generate the auth code",
          "name": "secret"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The timed auth code for the current user",
          "name": "code"
        }
      ],
      "inherits": "Client#enableSelfMFATOTP",
      "inherited": true,
      "overrides": "Client#enableSelfMFATOTP",
      "___id": "T000002R003261",
      "___s": true
    },
    {
      "comment": "/**\n    * Disable TOTP authentication for the current user (user accounts only)\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token\n    */",
      "meta": {
        "range": [
          79755,
          80027
        ],
        "filename": "Client.js",
        "lineno": 1773,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005499",
          "name": "Client#disableSelfMFATOTP",
          "type": "MethodDefinition",
          "paramnames": [
            "code"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "disableSelfMFATOTP",
      "longname": "CommandClient#disableSelfMFATOTP",
      "kind": "function",
      "description": "Disable TOTP authentication for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An object containing the user's new authorization token"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The timed auth code for the current user",
          "name": "code"
        }
      ],
      "inherits": "Client#disableSelfMFATOTP",
      "inherited": true,
      "overrides": "Client#disableSelfMFATOTP",
      "___id": "T000002R003262",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the billing info for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's billing info\n    */",
      "meta": {
        "range": [
          80174,
          80286
        ],
        "filename": "Client.js",
        "lineno": 1787,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005540",
          "name": "Client#getSelfBilling",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getSelfBilling",
      "longname": "CommandClient#getSelfBilling",
      "kind": "function",
      "description": "Get the billing info for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's billing info"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getSelfBilling",
      "inherited": true,
      "overrides": "Client#getSelfBilling",
      "___id": "T000002R003263",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the payment history for the current user (user accounts only)\n    * @returns {Promise<Object>} The user's payment history\n    */",
      "meta": {
        "range": [
          80439,
          80561
        ],
        "filename": "Client.js",
        "lineno": 1795,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005558",
          "name": "Client#getSelfPayments",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getSelfPayments",
      "longname": "CommandClient#getSelfPayments",
      "kind": "function",
      "description": "Get the payment history for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "The user's payment history"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#getSelfPayments",
      "inherited": true,
      "overrides": "Client#getSelfPayments",
      "___id": "T000002R003264",
      "___s": true
    },
    {
      "comment": "/**\n    * Purchase a premium subscription (Nitro) for the current user (user accounts only)\n    * You must get a Stripe card token from the Stripe API for this to work\n    * @arg {String} token The Stripe credit card token\n    * @arg {String} plan The plan to purchase, either \"premium_month\" or \"premium_year\"\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          80914,
          81171
        ],
        "filename": "Client.js",
        "lineno": 1806,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005576",
          "name": "Client#addSelfPremiumSubscription",
          "type": "MethodDefinition",
          "paramnames": [
            "token",
            "plan"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addSelfPremiumSubscription",
      "longname": "CommandClient#addSelfPremiumSubscription",
      "kind": "function",
      "description": "Purchase a premium subscription (Nitro) for the current user (user accounts only)\nYou must get a Stripe card token from the Stripe API for this to work",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The Stripe credit card token",
          "name": "token"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The plan to purchase, either \"premium_month\" or \"premium_year\"",
          "name": "plan"
        }
      ],
      "inherits": "Client#addSelfPremiumSubscription",
      "inherited": true,
      "overrides": "Client#addSelfPremiumSubscription",
      "___id": "T000002R003265",
      "___s": true
    },
    {
      "comment": "/**\n    * Cancel the premium subscription (Nitro) for the current user (user accounts only)\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          81305,
          81456
        ],
        "filename": "Client.js",
        "lineno": 1818,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005603",
          "name": "Client#deleteSelfPremiumSubscription",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteSelfPremiumSubscription",
      "longname": "CommandClient#deleteSelfPremiumSubscription",
      "kind": "function",
      "description": "Cancel the premium subscription (Nitro) for the current user (user accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#deleteSelfPremiumSubscription",
      "inherited": true,
      "overrides": "Client#deleteSelfPremiumSubscription",
      "___id": "T000002R003266",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a channel's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          81735,
          82041
        ],
        "filename": "Client.js",
        "lineno": 1827,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005621",
          "name": "Client#getRESTChannel",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTChannel",
      "longname": "CommandClient#getRESTChannel",
      "kind": "function",
      "description": "Get a channel's data via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|GroupChannel|PrivateChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        }
      ],
      "inherits": "Client#getRESTChannel",
      "inherited": true,
      "overrides": "Client#getRESTChannel",
      "___id": "T000002R003267",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Guild>}\n    */",
      "meta": {
        "range": [
          82229,
          82507
        ],
        "filename": "Client.js",
        "lineno": 1840,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005667",
          "name": "Client#getRESTGuild",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuild",
      "longname": "CommandClient#getRESTGuild",
      "kind": "function",
      "description": "Get a guild's data via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Guild>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getRESTGuild",
      "inherited": true,
      "overrides": "Client#getRESTGuild",
      "___id": "T000002R003268",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=100] The max number of guilds to get (1 to 1000)\n    * @arg {String} [before] The lowest guild ID of the next page\n    * @arg {String} [after] The highest guild ID of the previous page\n    * @returns {Promise<Guild[]>}\n    */",
      "meta": {
        "range": [
          82874,
          83264
        ],
        "filename": "Client.js",
        "lineno": 1854,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005711",
          "name": "Client#getRESTGuilds",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuilds",
      "longname": "CommandClient#getRESTGuilds",
      "kind": "function",
      "description": "Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Guild>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The max number of guilds to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The lowest guild ID of the next page",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest guild ID of the previous page",
          "name": "after"
        }
      ],
      "inherits": "Client#getRESTGuilds",
      "inherited": true,
      "overrides": "Client#getRESTGuilds",
      "___id": "T000002R003269",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[] | NewsChannel[])>}\n    */",
      "meta": {
        "range": [
          83519,
          83862
        ],
        "filename": "Client.js",
        "lineno": 1870,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005770",
          "name": "Client#getRESTGuildChannels",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuildChannels",
      "longname": "CommandClient#getRESTGuildChannels",
      "kind": "function",
      "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>|Array.<NewsChannel>)>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getRESTGuildChannels",
      "inherited": true,
      "overrides": "Client#getRESTGuildChannels",
      "___id": "T000002R003270",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
      "meta": {
        "range": [
          84087,
          84338
        ],
        "filename": "Client.js",
        "lineno": 1883,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005822",
          "name": "Client#getRESTGuildEmojis",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuildEmojis",
      "longname": "CommandClient#getRESTGuildEmojis",
      "kind": "function",
      "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "An array of guild emoji objects"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getRESTGuildEmojis",
      "inherited": true,
      "overrides": "Client#getRESTGuildEmojis",
      "___id": "T000002R003271",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
      "meta": {
        "range": [
          84590,
          84857
        ],
        "filename": "Client.js",
        "lineno": 1896,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005857",
          "name": "Client#getRESTGuildEmoji",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "emojiID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuildEmoji",
      "longname": "CommandClient#getRESTGuildEmoji",
      "kind": "function",
      "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "An emoji object"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the emoji",
          "name": "emojiID"
        }
      ],
      "inherits": "Client#getRESTGuildEmoji",
      "inherited": true,
      "overrides": "Client#getRESTGuildEmoji",
      "___id": "T000002R003272",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
      "meta": {
        "range": [
          85195,
          85607
        ],
        "filename": "Client.js",
        "lineno": 1910,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005894",
          "name": "Client#getRESTGuildMembers",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "limit",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuildMembers",
      "longname": "CommandClient#getRESTGuildMembers",
      "kind": "function",
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Member>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The max number of members to get (1 to 1000)",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The highest user ID of the previous page",
          "name": "after"
        }
      ],
      "inherits": "Client#getRESTGuildMembers",
      "inherited": true,
      "overrides": "Client#getRESTGuildMembers",
      "___id": "T000002R003273",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
      "meta": {
        "range": [
          85849,
          86189
        ],
        "filename": "Client.js",
        "lineno": 1926,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100005958",
          "name": "Client#getRESTGuildMember",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuildMember",
      "longname": "CommandClient#getRESTGuildMember",
      "kind": "function",
      "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Member>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "inherits": "Client#getRESTGuildMember",
      "inherited": true,
      "overrides": "Client#getRESTGuildMember",
      "___id": "T000002R003274",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Role[]>}\n    */",
      "meta": {
        "range": [
          86379,
          86687
        ],
        "filename": "Client.js",
        "lineno": 1938,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006011",
          "name": "Client#getRESTGuildRoles",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTGuildRoles",
      "longname": "CommandClient#getRESTGuildRoles",
      "kind": "function",
      "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Role>>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        }
      ],
      "inherits": "Client#getRESTGuildRoles",
      "inherited": true,
      "overrides": "Client#getRESTGuildRoles",
      "___id": "T000002R003275",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a user's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<User>}\n    */",
      "meta": {
        "range": [
          86871,
          87142
        ],
        "filename": "Client.js",
        "lineno": 1950,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006061",
          "name": "Client#getRESTUser",
          "type": "MethodDefinition",
          "paramnames": [
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getRESTUser",
      "longname": "CommandClient#getRESTUser",
      "kind": "function",
      "description": "Get a user's data via the REST API. REST mode is required to use this endpoint.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<User>"
            ]
          }
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user",
          "name": "userID"
        }
      ],
      "inherits": "Client#getRESTUser",
      "inherited": true,
      "overrides": "Client#getRESTUser",
      "___id": "T000002R003276",
      "___s": true
    },
    {
      "comment": "/**\n    * Search a channel's messages\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
      "meta": {
        "range": [
          89168,
          90111
        ],
        "filename": "Client.js",
        "lineno": 1989,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006105",
          "name": "Client#searchChannelMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "channelID",
            "query"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "searchChannelMessages",
      "longname": "CommandClient#searchChannelMessages",
      "kind": "function",
      "description": "Search a channel's messages",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Search parameters",
          "name": "query"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"timestamp\"",
          "description": "What to sort by, either \"timestamp\" or \"relevance\"",
          "name": "query.sortBy"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"desc\"",
          "description": "What order to sort by, either \"asc\" or \"desc\"",
          "name": "query.sortOrder"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by a content string",
          "name": "query.content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by an author ID",
          "name": "query.authorID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The minimum message ID to return results for",
          "name": "query.minID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The maximum message ID to return results for",
          "name": "query.maxID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 25,
          "description": "How many messages to return, 1 <= limit <= 25",
          "name": "query.limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
          "name": "query.offset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
          "name": "query.contextSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
          "name": "query.has"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed provider",
          "name": "query.embedProviders"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed type",
          "name": "query.embedTypes"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment extension",
          "name": "query.attachmentExtensions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment filename",
          "name": "query.attachmentFilename"
        }
      ],
      "inherits": "Client#searchChannelMessages",
      "inherited": true,
      "overrides": "Client#searchChannelMessages",
      "___id": "T000002R003277",
      "___s": true
    },
    {
      "comment": "/**\n    * Search a guild's messages\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @arg {String[]} [query.channelIDs] Filter results by channel ID\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
      "meta": {
        "range": [
          92201,
          93178
        ],
        "filename": "Client.js",
        "lineno": 2044,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib",
        "code": {
          "id": "astnode100006215",
          "name": "Client#searchGuildMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "guildID",
            "query"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "searchGuildMessages",
      "longname": "CommandClient#searchGuildMessages",
      "kind": "function",
      "description": "Search a guild's messages",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
        }
      ],
      "memberof": "CommandClient",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild",
          "name": "guildID"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Search parameters",
          "name": "query"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"timestamp\"",
          "description": "What to sort by, either \"timestamp\" or \"relevance\"",
          "name": "query.sortBy"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"desc\"",
          "description": "What order to sort by, either \"asc\" or \"desc\"",
          "name": "query.sortOrder"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by a content string",
          "name": "query.content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by an author ID",
          "name": "query.authorID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The minimum message ID to return results for",
          "name": "query.minID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The maximum message ID to return results for",
          "name": "query.maxID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 25,
          "description": "How many messages to return, 1 <= limit <= 25",
          "name": "query.limit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
          "name": "query.offset"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 2,
          "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
          "name": "query.contextSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
          "name": "query.has"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed provider",
          "name": "query.embedProviders"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by embed type",
          "name": "query.embedTypes"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment extension",
          "name": "query.attachmentExtensions"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Filter results by attachment filename",
          "name": "query.attachmentFilename"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "optional": true,
          "description": "Filter results by channel ID",
          "name": "query.channelIDs"
        }
      ],
      "inherits": "Client#searchGuildMessages",
      "inherited": true,
      "overrides": "Client#searchGuildMessages",
      "___id": "T000002R003278",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the shard encounters an error\n            * @event Client#error\n            * @prop {Error} err The error\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 103,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "error",
      "longname": "CommandClient#event:error",
      "kind": "event",
      "description": "Fired when the shard encounters an error",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "The error",
          "name": "err"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:error",
      "inherited": true,
      "overrides": "Client#event:error",
      "___id": "T000002R003279",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when stuff happens and gives more info\n            * @event Client#debug\n            * @prop {String} message The debug message\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 122,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "debug",
      "longname": "CommandClient#event:debug",
      "kind": "event",
      "description": "Fired when stuff happens and gives more info",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The debug message",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:debug",
      "inherited": true,
      "overrides": "Client#event:debug",
      "___id": "T000002R003280",
      "___s": true
    },
    {
      "comment": "/**\n                        * Fired when a user's username, avatar, or discriminator changes\n                        * @event Client#userUpdate\n                        * @prop {User} user The updated user\n                        * @prop {Object?} oldUser The old user data\n                        * @prop {String} oldUser.username The username of the user\n                        * @prop {String} oldUser.discriminator The discriminator of the user\n                        * @prop {String?} oldUser.avatar The hash of the user's avatar, or null if no avatar\n                        */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 233,
        "columnno": 24,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "userUpdate",
      "longname": "CommandClient#event:userUpdate",
      "kind": "event",
      "description": "Fired when a user's username, avatar, or discriminator changes",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The updated user",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old user data",
          "name": "oldUser"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The username of the user",
          "name": "oldUser.username"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The discriminator of the user",
          "name": "oldUser.discriminator"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the user's avatar, or null if no avatar",
          "name": "oldUser.avatar"
        }
      ],
      "inherits": "Client#event:userUpdate",
      "inherited": true,
      "overrides": "Client#event:userUpdate",
      "___id": "T000002R003281",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild member or relationship's status or game changes\n                    * @event Client#presenceUpdate\n                    * @prop {Member | Relationship} other The updated member or relationship\n                    * @prop {Object?} oldPresence The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null\n                    * @prop {String} oldPresence.status The other user's old status. Either \"online\", \"idle\", or \"offline\"\n                    * @prop {Object?} oldPresence.game The old game the other user was playing\n                    * @prop {String} oldPresence.game.name The name of the active game\n                    * @prop {Number} oldPresence.game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n                    * @prop {String} oldPresence.game.url The url of the active game\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 255,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "presenceUpdate",
      "longname": "CommandClient#event:presenceUpdate",
      "kind": "event",
      "description": "Fired when a guild member or relationship's status or game changes",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Member",
              "Relationship"
            ]
          },
          "description": "The updated member or relationship",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null",
          "name": "oldPresence"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The other user's old status. Either \"online\", \"idle\", or \"offline\"",
          "name": "oldPresence.status"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old game the other user was playing",
          "name": "oldPresence.game"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the active game",
          "name": "oldPresence.game.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
          "name": "oldPresence.game.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The url of the active game",
          "name": "oldPresence.game.url"
        }
      ],
      "inherits": "Client#event:presenceUpdate",
      "inherited": true,
      "overrides": "Client#event:presenceUpdate",
      "___id": "T000002R003282",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild member switches voice channels\n                            * @event Client#voiceChannelSwitch\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The new voice channel\n                            * @prop {VoiceChannel} oldChannel The old voice channel\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 369,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "voiceChannelSwitch",
      "longname": "CommandClient#event:voiceChannelSwitch",
      "kind": "event",
      "description": "Fired when a guild member switches voice channels",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The new voice channel",
          "name": "newChannel"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The old voice channel",
          "name": "oldChannel"
        }
      ],
      "inherits": "Client#event:voiceChannelSwitch",
      "inherited": true,
      "overrides": "Client#event:voiceChannelSwitch",
      "___id": "T000002R003283",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                            * @event Client#voiceChannelJoin\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The voice channel\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 379,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "voiceChannelJoin",
      "longname": "CommandClient#event:voiceChannelJoin",
      "kind": "event",
      "description": "Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The voice channel",
          "name": "newChannel"
        }
      ],
      "inherits": "Client#event:voiceChannelJoin",
      "inherited": true,
      "overrides": "Client#event:voiceChannelJoin",
      "___id": "T000002R003284",
      "___s": true
    },
    {
      "comment": "/**\n                        * Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                        * @event Client#voiceChannelLeave\n                        * @prop {?Member} member The member\n                        * @prop {VoiceChannel} oldChannel The voice channel\n                        */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 389,
        "columnno": 24,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "voiceChannelLeave",
      "longname": "CommandClient#event:voiceChannelLeave",
      "kind": "event",
      "description": "Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "nullable": true,
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "VoiceChannel"
            ]
          },
          "description": "The voice channel",
          "name": "oldChannel"
        }
      ],
      "inherits": "Client#event:voiceChannelLeave",
      "inherited": true,
      "overrides": "Client#event:voiceChannelLeave",
      "___id": "T000002R003285",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild member's voice state changes\n                    * @event Client#voiceStateUpdate\n                    * @prop {Member} member The member\n                    * @prop {Object} oldState The old voice state\n                    * @prop {Boolean} oldState.mute The previous server mute status\n                    * @prop {Boolean} oldState.deaf The previous server deaf status\n                    * @prop {Boolean} oldState.selfMute The previous self mute status\n                    * @prop {Boolean} oldState.selfDeaf The previous self deaf status\n                    * @prop {Boolean} oldState.selfStream The previous self stream status\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 399,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "voiceStateUpdate",
      "longname": "CommandClient#event:voiceStateUpdate",
      "kind": "event",
      "description": "Fired when a guild member's voice state changes",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old voice state",
          "name": "oldState"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous server mute status",
          "name": "oldState.mute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous server deaf status",
          "name": "oldState.deaf"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous self mute status",
          "name": "oldState.selfMute"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous self deaf status",
          "name": "oldState.selfDeaf"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "The previous self stream status",
          "name": "oldState.selfStream"
        }
      ],
      "inherits": "Client#event:voiceStateUpdate",
      "inherited": true,
      "overrides": "Client#event:voiceStateUpdate",
      "___id": "T000002R003286",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a user begins typing\n                    * @event Client#typingStart\n                    * @prop {PrivateChannel | TextChannel} channel The text channel the user is typing in\n                    * @prop {User} user The user\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 416,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "typingStart",
      "longname": "CommandClient#event:typingStart",
      "kind": "event",
      "description": "Fired when a user begins typing",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel"
            ]
          },
          "description": "The text channel the user is typing in",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user",
          "name": "user"
        }
      ],
      "inherits": "Client#event:typingStart",
      "inherited": true,
      "overrides": "Client#event:typingStart",
      "___id": "T000002R003287",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a message is created\n                    * @event Client#messageCreate\n                    * @prop {Message} message The message\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 430,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageCreate",
      "longname": "CommandClient#event:messageCreate",
      "kind": "event",
      "description": "Fired when a message is created",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Message"
            ]
          },
          "description": "The message",
          "name": "message"
        }
      ],
      "inherits": "Client#event:messageCreate",
      "inherited": true,
      "overrides": "Client#event:messageCreate",
      "___id": "T000002R003288",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a message is updated\n                * @event Client#messageUpdate\n                * @prop {Message} message The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)\n                * @prop {Object?} oldMessage The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null\n                * @prop {Object[]} oldMessage.attachments Array of attachments\n                * @prop {Object[]} oldMessage.embeds Array of embeds\n                * @prop {String} oldMessage.content Message content\n                * @prop {Number} oldMessage.editedTimestamp Timestamp of latest message edit\n                * @prop {Object} oldMessage.mentionedBy Object of if different things mention the bot user\n                * @prop {Boolean} oldMessage.pinned Whether the message was pinned or not\n                * @prop {Boolean} oldMessage.tts Whether to play the message using TTS or not\n                * @prop {String[]} oldMessage.mentions Array of mentioned users' ids\n                * @prop {String[]} oldMessage.roleMentions Array of mentioned roles' ids.\n                * @prop {String[]} oldMessage.channelMentions Array of mentions channels' ids.\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 466,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageUpdate",
      "longname": "CommandClient#event:messageUpdate",
      "kind": "event",
      "description": "Fired when a message is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Message"
            ]
          },
          "description": "The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null",
          "name": "oldMessage"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "Array of attachments",
          "name": "oldMessage.attachments"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "Array of embeds",
          "name": "oldMessage.embeds"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Message content",
          "name": "oldMessage.content"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Timestamp of latest message edit",
          "name": "oldMessage.editedTimestamp"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object of if different things mention the bot user",
          "name": "oldMessage.mentionedBy"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the message was pinned or not",
          "name": "oldMessage.pinned"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether to play the message using TTS or not",
          "name": "oldMessage.tts"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentioned users' ids",
          "name": "oldMessage.mentions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentioned roles' ids.",
          "name": "oldMessage.roleMentions"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of mentions channels' ids.",
          "name": "oldMessage.channelMentions"
        }
      ],
      "inherits": "Client#event:messageUpdate",
      "inherited": true,
      "overrides": "Client#event:messageUpdate",
      "___id": "T000002R003289",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a cached message is deleted\n                * @event Client#messageDelete\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 490,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageDelete",
      "longname": "CommandClient#event:messageDelete",
      "kind": "event",
      "description": "Fired when a cached message is deleted",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        }
      ],
      "inherits": "Client#event:messageDelete",
      "inherited": true,
      "overrides": "Client#event:messageDelete",
      "___id": "T000002R003290",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a bulk delete occurs\n                * @event Client#messageDeleteBulk\n                * @prop {Message[] | Object[]} messages An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 507,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageDeleteBulk",
      "longname": "CommandClient#event:messageDeleteBulk",
      "kind": "event",
      "description": "Fired when a bulk delete occurs",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Array.<Message>",
              "Array.<Object>"
            ]
          },
          "description": "An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "messages"
        }
      ],
      "inherits": "Client#event:messageDeleteBulk",
      "inherited": true,
      "overrides": "Client#event:messageDeleteBulk",
      "___id": "T000002R003291",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when someone adds a reaction to a message\n                * @event Client#messageReactionAdd\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The emoji ID (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that added the reaction\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 540,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageReactionAdd",
      "longname": "CommandClient#event:messageReactionAdd",
      "kind": "event",
      "description": "Fired when someone adds a reaction to a message",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The reaction emoji object",
          "name": "emoji"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The emoji ID (null for non-custom emojis)",
          "name": "emoji.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The emoji name",
          "name": "emoji.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that added the reaction",
          "name": "userID"
        }
      ],
      "inherits": "Client#event:messageReactionAdd",
      "inherited": true,
      "overrides": "Client#event:messageReactionAdd",
      "___id": "T000002R003292",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when someone removes a reaction from a message\n                * @event Client#messageReactionRemove\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The ID of the emoji (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that removed the reaction\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 570,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageReactionRemove",
      "longname": "CommandClient#event:messageReactionRemove",
      "kind": "event",
      "description": "Fired when someone removes a reaction from a message",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The reaction emoji object",
          "name": "emoji"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The ID of the emoji (null for non-custom emojis)",
          "name": "emoji.id"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The emoji name",
          "name": "emoji.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that removed the reaction",
          "name": "userID"
        }
      ],
      "inherits": "Client#event:messageReactionRemove",
      "inherited": true,
      "overrides": "Client#event:messageReactionRemove",
      "___id": "T000002R003293",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when someone removes a reaction from a message\n                * @event Client#messageReactionRemoveAll\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 590,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "messageReactionRemoveAll",
      "longname": "CommandClient#event:messageReactionRemoveAll",
      "kind": "event",
      "description": "Fired when someone removes a reaction from a message",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Message",
              "Object"
            ]
          },
          "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
          "name": "message"
        }
      ],
      "inherits": "Client#event:messageReactionRemoveAll",
      "inherited": true,
      "overrides": "Client#event:messageReactionRemoveAll",
      "___id": "T000002R003294",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a member joins a server\n                * @event Client#guildMemberAdd\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The member\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 609,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildMemberAdd",
      "longname": "CommandClient#event:guildMemberAdd",
      "kind": "event",
      "description": "Fired when a member joins a server",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The member",
          "name": "member"
        }
      ],
      "inherits": "Client#event:guildMemberAdd",
      "inherited": true,
      "overrides": "Client#event:guildMemberAdd",
      "___id": "T000002R003295",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a member's roles or nickname are updated\n                * @event Client#guildMemberUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The updated member\n                * @prop {Object?} oldMember The old member data\n                * @prop {String[]} oldMember.roles An array of role IDs this member is a part of\n                * @prop {String?} oldMember.nick The server nickname of the member\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 633,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildMemberUpdate",
      "longname": "CommandClient#event:guildMemberUpdate",
      "kind": "event",
      "description": "Fired when a member's roles or nickname are updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Member"
            ]
          },
          "description": "The updated member",
          "name": "member"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "nullable": true,
          "description": "The old member data",
          "name": "oldMember"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "An array of role IDs this member is a part of",
          "name": "oldMember.roles"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The server nickname of the member",
          "name": "oldMember.nick"
        }
      ],
      "inherits": "Client#event:guildMemberUpdate",
      "inherited": true,
      "overrides": "Client#event:guildMemberUpdate",
      "___id": "T000002R003296",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a member leaves a server\n                * @event Client#guildMemberRemove\n                * @prop {Guild} guild The guild\n                * @prop {Member | Object} member The member. If the member is not cached, this will be an object with `id` and `user` key\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 655,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildMemberRemove",
      "longname": "CommandClient#event:guildMemberRemove",
      "kind": "event",
      "description": "Fired when a member leaves a server",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Member",
              "Object"
            ]
          },
          "description": "The member. If the member is not cached, this will be an object with `id` and `user` key",
          "name": "member"
        }
      ],
      "inherits": "Client#event:guildMemberRemove",
      "inherited": true,
      "overrides": "Client#event:guildMemberRemove",
      "___id": "T000002R003297",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild becomes available\n                            * @event Client#guildAvailable\n                            * @prop {Guild} guild The guild\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 672,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildAvailable",
      "longname": "CommandClient#event:guildAvailable",
      "kind": "event",
      "description": "Fired when a guild becomes available",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "inherits": "Client#event:guildAvailable",
      "inherited": true,
      "overrides": "Client#event:guildAvailable",
      "___id": "T000002R003298",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a guild is created. This happens when:\n                            * - the client creates a guild\n                            * - the client joins a guild\n                            * @event Client#guildCreate\n                            * @prop {Guild} guild The guild\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 679,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildCreate",
      "longname": "CommandClient#event:guildCreate",
      "kind": "event",
      "description": "Fired when a guild is created. This happens when:\n- the client creates a guild\n- the client joins a guild",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "inherits": "Client#event:guildCreate",
      "inherited": true,
      "overrides": "Client#event:guildCreate",
      "___id": "T000002R003299",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when an unavailable guild is created\n                    * @event Client#unavailableGuildCreate\n                    * @prop {UnavailableGuild} guild The unavailable guild\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 694,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "unavailableGuildCreate",
      "longname": "CommandClient#event:unavailableGuildCreate",
      "kind": "event",
      "description": "Fired when an unavailable guild is created",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "UnavailableGuild"
            ]
          },
          "description": "The unavailable guild",
          "name": "guild"
        }
      ],
      "inherits": "Client#event:unavailableGuildCreate",
      "inherited": true,
      "overrides": "Client#event:unavailableGuildCreate",
      "___id": "T000002R003300",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild is updated\n                * @event Client#guildUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Object} oldGuild The old guild data\n                * @prop {String} oldGuild.name The name of the guild\n                * @prop {Number} oldGuild.verificationLevel The guild verification level\n                * @prop {String} oldGuild.region The region of the guild\n                * @prop {String?} oldGuild.icon The hash of the guild icon, or null if no icon\n                * @prop {String} oldGuild.afkChannelID The ID of the AFK voice channel\n                * @prop {Number} oldGuild.afkTimeout The AFK timeout in seconds\n                * @prop {String} oldGuild.ownerID The ID of the user that is the guild owner\n                * @prop {String?} oldGuild.splash The hash of the guild splash image, or null if no splash (VIP only)\n                * @prop {String?} oldGuild.banner The hash of the guild banner image, or null if no splash (VIP only)\n                * @prop {Object[]} oldGuild.features An array of guild features\n                * @prop {Object[]} oldGuild.emojis An array of guild emojis\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 728,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildUpdate",
      "longname": "CommandClient#event:guildUpdate",
      "kind": "event",
      "description": "Fired when a guild is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old guild data",
          "name": "oldGuild"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the guild",
          "name": "oldGuild.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The guild verification level",
          "name": "oldGuild.verificationLevel"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The region of the guild",
          "name": "oldGuild.region"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild icon, or null if no icon",
          "name": "oldGuild.icon"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the AFK voice channel",
          "name": "oldGuild.afkChannelID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The AFK timeout in seconds",
          "name": "oldGuild.afkTimeout"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the user that is the guild owner",
          "name": "oldGuild.ownerID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild splash image, or null if no splash (VIP only)",
          "name": "oldGuild.splash"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The hash of the guild banner image, or null if no splash (VIP only)",
          "name": "oldGuild.banner"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "An array of guild features",
          "name": "oldGuild.features"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "An array of guild emojis",
          "name": "oldGuild.emojis"
        }
      ],
      "inherits": "Client#event:guildUpdate",
      "inherited": true,
      "overrides": "Client#event:guildUpdate",
      "___id": "T000002R003301",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild becomes unavailable\n                    * @event Client#guildUnavailable\n                    * @prop {Guild} guild The guild\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 766,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildUnavailable",
      "longname": "CommandClient#event:guildUnavailable",
      "kind": "event",
      "description": "Fired when a guild becomes unavailable",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "inherits": "Client#event:guildUnavailable",
      "inherited": true,
      "overrides": "Client#event:guildUnavailable",
      "___id": "T000002R003302",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a guild is deleted. This happens when:\n                    * - the client left the guild\n                    * - the client was kicked/banned from the guild\n                    * - the guild was literally deleted\n                    * @event Client#guildDelete\n                    * @prop {Guild} guild The guild\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 773,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildDelete",
      "longname": "CommandClient#event:guildDelete",
      "kind": "event",
      "description": "Fired when a guild is deleted. This happens when:\n- the client left the guild\n- the client was kicked/banned from the guild\n- the guild was literally deleted",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        }
      ],
      "inherits": "Client#event:guildDelete",
      "inherited": true,
      "overrides": "Client#event:guildDelete",
      "___id": "T000002R003303",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user is banned from a guild\n                * @event Client#guildBanAdd\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 788,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildBanAdd",
      "longname": "CommandClient#event:guildBanAdd",
      "kind": "event",
      "description": "Fired when a user is banned from a guild",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The banned user",
          "name": "user"
        }
      ],
      "inherits": "Client#event:guildBanAdd",
      "inherited": true,
      "overrides": "Client#event:guildBanAdd",
      "___id": "T000002R003304",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user is unbanned from a guild\n                * @event Client#guildBanRemove\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 798,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildBanRemove",
      "longname": "CommandClient#event:guildBanRemove",
      "kind": "event",
      "description": "Fired when a user is unbanned from a guild",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The banned user",
          "name": "user"
        }
      ],
      "inherits": "Client#event:guildBanRemove",
      "inherited": true,
      "overrides": "Client#event:guildBanRemove",
      "___id": "T000002R003305",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild role is created\n                * @event Client#guildRoleCreate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 808,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildRoleCreate",
      "longname": "CommandClient#event:guildRoleCreate",
      "kind": "event",
      "description": "Fired when a guild role is created",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Role"
            ]
          },
          "description": "The role",
          "name": "role"
        }
      ],
      "inherits": "Client#event:guildRoleCreate",
      "inherited": true,
      "overrides": "Client#event:guildRoleCreate",
      "___id": "T000002R003306",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild role is updated\n                * @event Client#guildRoleUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The updated role\n                * @prop {Object} oldRole The old role data\n                * @prop {String} oldRole.name The name of the role\n                * @prop {Boolean} oldRole.mentionable Whether the role is mentionable or not\n                * @prop {Boolean} oldRole.managed Whether a guild integration manages this role or not\n                * @prop {Boolean} oldRole.hoist Whether users with this role are hoisted in the user list or not\n                * @prop {Number} oldRole.color The hex color of the role in base 10\n                * @prop {Number} oldRole.position The position of the role\n                * @prop {Permission} oldRole.permissions The permissions number of the role\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 845,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildRoleUpdate",
      "longname": "CommandClient#event:guildRoleUpdate",
      "kind": "event",
      "description": "Fired when a guild role is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Role"
            ]
          },
          "description": "The updated role",
          "name": "role"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old role data",
          "name": "oldRole"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the role",
          "name": "oldRole.name"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the role is mentionable or not",
          "name": "oldRole.mentionable"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether a guild integration manages this role or not",
          "name": "oldRole.managed"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether users with this role are hoisted in the user list or not",
          "name": "oldRole.hoist"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The hex color of the role in base 10",
          "name": "oldRole.color"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the role",
          "name": "oldRole.position"
        },
        {
          "type": {
            "names": [
              "Permission"
            ]
          },
          "description": "The permissions number of the role",
          "name": "oldRole.permissions"
        }
      ],
      "inherits": "Client#event:guildRoleUpdate",
      "inherited": true,
      "overrides": "Client#event:guildRoleUpdate",
      "___id": "T000002R003307",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild role is deleted\n                * @event Client#guildRoleDelete\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 863,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildRoleDelete",
      "longname": "CommandClient#event:guildRoleDelete",
      "kind": "event",
      "description": "Fired when a guild role is deleted",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Role"
            ]
          },
          "description": "The role",
          "name": "role"
        }
      ],
      "inherits": "Client#event:guildRoleDelete",
      "inherited": true,
      "overrides": "Client#event:guildRoleDelete",
      "___id": "T000002R003308",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a channel is created\n                    * @event Client#channelCreate\n                    * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The channel\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 889,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "channelCreate",
      "longname": "CommandClient#event:channelCreate",
      "kind": "event",
      "description": "Fired when a channel is created",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "TextChannel",
              "VoiceChannel",
              "CategoryChannel",
              "StoreChannel",
              "NewsChannel",
              "GuildChannel",
              "PrivateChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        }
      ],
      "inherits": "Client#event:channelCreate",
      "inherited": true,
      "overrides": "Client#event:channelCreate",
      "___id": "T000002R003309",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a channel is updated\n                * @event Client#channelUpdate\n                * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The updated channel\n                * @prop {Object} oldChannel The old channel data\n                * @prop {String} oldChannel.name The name of the channel\n                * @prop {Number} oldChannel.position The position of the channel\n                * @prop {Boolean} oldChannel.nsfw Whether the channel is NSFW or not\n                * @prop {String?} oldChannel.topic The topic of the channel (text channels only)\n                * @prop {Number} oldChannel.type The type of the old channel\n                * @prop {Number?} oldChannel.bitrate The bitrate of the channel (voice channels only)\n                * @prop {Collection} oldChannel.permissionOverwrites Collection of PermissionOverwrites in this channel\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 967,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "channelUpdate",
      "longname": "CommandClient#event:channelUpdate",
      "kind": "event",
      "description": "Fired when a channel is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "TextChannel",
              "VoiceChannel",
              "CategoryChannel",
              "StoreChannel",
              "NewsChannel",
              "GuildChannel",
              "PrivateChannel"
            ]
          },
          "description": "The updated channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old channel data",
          "name": "oldChannel"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the channel",
          "name": "oldChannel.name"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The position of the channel",
          "name": "oldChannel.position"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the channel is NSFW or not",
          "name": "oldChannel.nsfw"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The topic of the channel (text channels only)",
          "name": "oldChannel.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The type of the old channel",
          "name": "oldChannel.type"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The bitrate of the channel (voice channels only)",
          "name": "oldChannel.bitrate"
        },
        {
          "type": {
            "names": [
              "Collection"
            ]
          },
          "description": "Collection of PermissionOverwrites in this channel",
          "name": "oldChannel.permissionOverwrites"
        }
      ],
      "inherits": "Client#event:channelUpdate",
      "inherited": true,
      "overrides": "Client#event:channelUpdate",
      "___id": "T000002R003310",
      "___s": true
    },
    {
      "comment": "/**\n                            * Fired when a channel is deleted\n                            * @event Client#channelDelete\n                            * @prop {PrivateChannel | TextChannel | VoiceChannel | CategoryChannel} channel The channel\n                            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 989,
        "columnno": 28,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "channelDelete",
      "longname": "CommandClient#event:channelDelete",
      "kind": "event",
      "description": "Fired when a channel is deleted",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel",
              "VoiceChannel",
              "CategoryChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        }
      ],
      "inherits": "Client#event:channelDelete",
      "inherited": true,
      "overrides": "Client#event:channelDelete",
      "___id": "T000002R003311",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a call is created\n                * @event Client#callCreate\n                * @prop {Call} call The call\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1050,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "callCreate",
      "longname": "CommandClient#event:callCreate",
      "kind": "event",
      "description": "Fired when a call is created",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The call",
          "name": "call"
        }
      ],
      "inherits": "Client#event:callCreate",
      "inherited": true,
      "overrides": "Client#event:callCreate",
      "___id": "T000002R003312",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a call is updated\n                * @event Client#callUpdate\n                * @prop {Call} call The updated call\n                * @prop {Object} oldCall The old call data\n                * @prop {String[]} oldCall.participants The IDs of the call participants\n                * @prop {Number?} oldCall.endedTimestamp The timestamp of the call end\n                * @prop {String[]?} oldCall.ringing The IDs of people that were being rung\n                * @prop {String?} oldCall.region The region of the call server\n                * @prop {Boolean} oldCall.unavailable Whether the call was unavailable or not\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1070,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "callUpdate",
      "longname": "CommandClient#event:callUpdate",
      "kind": "event",
      "description": "Fired when a call is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The updated call",
          "name": "call"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old call data",
          "name": "oldCall"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The IDs of the call participants",
          "name": "oldCall.participants"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "nullable": true,
          "description": "The timestamp of the call end",
          "name": "oldCall.endedTimestamp"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "nullable": true,
          "description": "The IDs of people that were being rung",
          "name": "oldCall.ringing"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "nullable": true,
          "description": "The region of the call server",
          "name": "oldCall.region"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the call was unavailable or not",
          "name": "oldCall.unavailable"
        }
      ],
      "inherits": "Client#event:callUpdate",
      "inherited": true,
      "overrides": "Client#event:callUpdate",
      "___id": "T000002R003313",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a call is deleted\n                * @event Client#callDelete\n                * @prop {Call} call The call\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1091,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "callDelete",
      "longname": "CommandClient#event:callDelete",
      "kind": "event",
      "description": "Fired when a call is deleted",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The call",
          "name": "call"
        }
      ],
      "inherits": "Client#event:callDelete",
      "inherited": true,
      "overrides": "Client#event:callDelete",
      "___id": "T000002R003314",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user joins a group channel\n                * @event Client#channelRecipientAdd\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1101,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "channelRecipientAdd",
      "longname": "CommandClient#event:channelRecipientAdd",
      "kind": "event",
      "description": "Fired when a user joins a group channel",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "GroupChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user",
          "name": "user"
        }
      ],
      "inherits": "Client#event:channelRecipientAdd",
      "inherited": true,
      "overrides": "Client#event:channelRecipientAdd",
      "___id": "T000002R003315",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a user leaves a group channel\n                * @event Client#channelRecipientRemove\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1112,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "channelRecipientRemove",
      "longname": "CommandClient#event:channelRecipientRemove",
      "kind": "event",
      "description": "Fired when a user leaves a group channel",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "GroupChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The user",
          "name": "user"
        }
      ],
      "inherits": "Client#event:channelRecipientRemove",
      "inherited": true,
      "overrides": "Client#event:channelRecipientRemove",
      "___id": "T000002R003316",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a client receives a friend suggestion\n                * @event Client#friendSuggestionCreate\n                * @prop {User} user The suggested user\n                * @prop {String[]} reasons Array of reasons why this suggestion was made\n                * @prop {Number} reasons.type Type of reason?\n                * @prop {String} reasons.platform_type Platform you share with the user\n                * @prop {String} reasons.name Username of suggested user on that platform\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1122,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "friendSuggestionCreate",
      "longname": "CommandClient#event:friendSuggestionCreate",
      "kind": "event",
      "description": "Fired when a client receives a friend suggestion",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The suggested user",
          "name": "user"
        },
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of reasons why this suggestion was made",
          "name": "reasons"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Type of reason?",
          "name": "reasons.type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Platform you share with the user",
          "name": "reasons.platform_type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Username of suggested user on that platform",
          "name": "reasons.name"
        }
      ],
      "inherits": "Client#event:friendSuggestionCreate",
      "inherited": true,
      "overrides": "Client#event:friendSuggestionCreate",
      "___id": "T000002R003317",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a client's friend suggestion is removed for any reason\n                * @event Client#friendSuggestionDelete\n                * @prop {User} user The suggested user\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1135,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "friendSuggestionDelete",
      "longname": "CommandClient#event:friendSuggestionDelete",
      "kind": "event",
      "description": "Fired when a client's friend suggestion is removed for any reason",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "User"
            ]
          },
          "description": "The suggested user",
          "name": "user"
        }
      ],
      "inherits": "Client#event:friendSuggestionDelete",
      "inherited": true,
      "overrides": "Client#event:friendSuggestionDelete",
      "___id": "T000002R003318",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when Discord sends member chunks\n                * @event Client#guildMemberChunk\n                * @prop {Guild} guild The guild the chunked members are in\n                * @prop {Array<Member>} members The members in the chunk\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1166,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildMemberChunk",
      "longname": "CommandClient#event:guildMemberChunk",
      "kind": "event",
      "description": "Fired when Discord sends member chunks",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild the chunked members are in",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Array.<Member>"
            ]
          },
          "description": "The members in the chunk",
          "name": "members"
        }
      ],
      "inherits": "Client#event:guildMemberChunk",
      "inherited": true,
      "overrides": "Client#event:guildMemberChunk",
      "___id": "T000002R003319",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard finishes processing the ready packet\n                * @event Client#shardPreReady\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1305,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "shardPreReady",
      "longname": "CommandClient#event:shardPreReady",
      "kind": "event",
      "description": "Fired when a shard finishes processing the ready packet",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:shardPreReady",
      "inherited": true,
      "overrides": "Client#event:shardPreReady",
      "___id": "T000002R003320",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a relationship is updated\n                    * @event Client#relationshipUpdate\n                    * @prop {Relationship} relationship The relationship\n                    * @prop {Object} oldRelationship The old relationship data\n                    * @prop {Number} oldRelationship.type The old type of the relationship\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1346,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "relationshipUpdate",
      "longname": "CommandClient#event:relationshipUpdate",
      "kind": "event",
      "description": "Fired when a relationship is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Relationship"
            ]
          },
          "description": "The relationship",
          "name": "relationship"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The old relationship data",
          "name": "oldRelationship"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The old type of the relationship",
          "name": "oldRelationship.type"
        }
      ],
      "inherits": "Client#event:relationshipUpdate",
      "inherited": true,
      "overrides": "Client#event:relationshipUpdate",
      "___id": "T000002R003321",
      "___s": true
    },
    {
      "comment": "/**\n                    * Fired when a relationship is added\n                    * @event Client#relationshipAdd\n                    * @prop {Relationship} relationship The relationship\n                    */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1355,
        "columnno": 20,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "relationshipAdd",
      "longname": "CommandClient#event:relationshipAdd",
      "kind": "event",
      "description": "Fired when a relationship is added",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Relationship"
            ]
          },
          "description": "The relationship",
          "name": "relationship"
        }
      ],
      "inherits": "Client#event:relationshipAdd",
      "inherited": true,
      "overrides": "Client#event:relationshipAdd",
      "___id": "T000002R003322",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a relationship is removed\n                * @event Client#relationshipRemove\n                * @prop {Relationship} relationship The relationship\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1368,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "relationshipRemove",
      "longname": "CommandClient#event:relationshipRemove",
      "kind": "event",
      "description": "Fired when a relationship is removed",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Relationship"
            ]
          },
          "description": "The relationship",
          "name": "relationship"
        }
      ],
      "inherits": "Client#event:relationshipRemove",
      "inherited": true,
      "overrides": "Client#event:relationshipRemove",
      "___id": "T000002R003323",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a guild's emojis are updated\n                * @event Client#guildEmojisUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Array} emojis The updated emojis of the guild\n                * @prop {Array} oldEmojis The old emojis of the guild\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1380,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "guildEmojisUpdate",
      "longname": "CommandClient#event:guildEmojisUpdate",
      "kind": "event",
      "description": "Fired when a guild's emojis are updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Guild"
            ]
          },
          "description": "The guild",
          "name": "guild"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The updated emojis of the guild",
          "name": "emojis"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The old emojis of the guild",
          "name": "oldEmojis"
        }
      ],
      "inherits": "Client#event:guildEmojisUpdate",
      "inherited": true,
      "overrides": "Client#event:guildEmojisUpdate",
      "___id": "T000002R003324",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a channel pin timestamp is updated\n                * @event Client#channelPinUpdate\n                * @prop {PrivateChannel | TextChannel} channel The channel\n                * @prop {Number} timestamp The new timestamp\n                * @prop {Number} oldTimestamp The old timestamp\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1398,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "channelPinUpdate",
      "longname": "CommandClient#event:channelPinUpdate",
      "kind": "event",
      "description": "Fired when a channel pin timestamp is updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "PrivateChannel",
              "TextChannel"
            ]
          },
          "description": "The channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new timestamp",
          "name": "timestamp"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The old timestamp",
          "name": "oldTimestamp"
        }
      ],
      "inherits": "Client#event:channelPinUpdate",
      "inherited": true,
      "overrides": "Client#event:channelPinUpdate",
      "___id": "T000002R003325",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a channel's webhooks are updated\n                * @event Client#webhooksUpdate\n                * @prop {Object} data The update data\n                * @prop {String} channelID The ID of the channel that webhooks were updated in\n                * @prop {String} guildID The ID of the guild that webhooks were updated in\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1409,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "webhooksUpdate",
      "longname": "CommandClient#event:webhooksUpdate",
      "kind": "event",
      "description": "Fired when a channel's webhooks are updated",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The update data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the channel that webhooks were updated in",
          "name": "channelID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the guild that webhooks were updated in",
          "name": "guildID"
        }
      ],
      "inherits": "Client#event:webhooksUpdate",
      "inherited": true,
      "overrides": "Client#event:webhooksUpdate",
      "___id": "T000002R003326",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when the shard encounters an unknown packet\n                * @event Client#unknown\n                * @prop {Object} packet The unknown packet\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1456,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "unknown",
      "longname": "CommandClient#event:unknown",
      "kind": "event",
      "description": "Fired when the shard encounters an unknown packet",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The unknown packet",
          "name": "packet"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:unknown",
      "inherited": true,
      "overrides": "Client#event:unknown",
      "___id": "T000002R003327",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the shard establishes a connection\n            * @event Client#connect\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1587,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "connect",
      "longname": "CommandClient#event:connect",
      "kind": "event",
      "description": "Fired when the shard establishes a connection",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:connect",
      "inherited": true,
      "overrides": "Client#event:connect",
      "___id": "T000002R003328",
      "___s": true
    },
    {
      "comment": "/**\n            * Fired when the shard receives a websocket packet\n            * @event Client#rawWS\n            * @prop {Object} packet The packet\n            * @prop {Number} id The ID of the shard\n            */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1693,
        "columnno": 12,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "rawWS",
      "longname": "CommandClient#event:rawWS",
      "kind": "event",
      "description": "Fired when the shard receives a websocket packet",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The packet",
          "name": "packet"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:rawWS",
      "inherited": true,
      "overrides": "Client#event:rawWS",
      "___id": "T000002R003329",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired to warn of something weird but non-breaking happening\n                * @event Client#warn\n                * @prop {String} message The warning message\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1704,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "warn",
      "longname": "CommandClient#event:warn",
      "kind": "event",
      "description": "Fired to warn of something weird but non-breaking happening",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The warning message",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:warn",
      "inherited": true,
      "overrides": "Client#event:warn",
      "___id": "T000002R003330",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard receives an OP:10/HELLO packet\n                * @event Client#hello\n                * @prop {String[]} trace The Discord server trace of the gateway and session servers\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "Shard.js",
        "lineno": 1756,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "hello",
      "longname": "CommandClient#event:hello",
      "kind": "event",
      "description": "Fired when a shard receives an OP:10/HELLO packet",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "The Discord server trace of the gateway and session servers",
          "name": "trace"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:hello",
      "inherited": true,
      "overrides": "Client#event:hello",
      "___id": "T000002R003331",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard turns ready\n                * @event Client#shardReady\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 51,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "shardReady",
      "longname": "CommandClient#event:shardReady",
      "kind": "event",
      "description": "Fired when a shard turns ready",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:shardReady",
      "inherited": true,
      "overrides": "Client#event:shardReady",
      "___id": "T000002R003332",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when all shards turn ready\n                * @event Client#ready\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 67,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "ready",
      "longname": "CommandClient#event:ready",
      "kind": "event",
      "description": "Fired when all shards turn ready",
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#event:ready",
      "inherited": true,
      "overrides": "Client#event:ready",
      "___id": "T000002R003333",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard resumes\n                * @event Client#shardResume\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 73,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "shardResume",
      "longname": "CommandClient#event:shardResume",
      "kind": "event",
      "description": "Fired when a shard resumes",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:shardResume",
      "inherited": true,
      "overrides": "Client#event:shardResume",
      "___id": "T000002R003334",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when a shard disconnects\n                * @event Client#shardDisconnect\n                * @prop {Error?} error The error, if any\n                * @prop {Number} id The ID of the shard\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 91,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "shardDisconnect",
      "longname": "CommandClient#event:shardDisconnect",
      "kind": "event",
      "description": "Fired when a shard disconnects",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "nullable": true,
          "description": "The error, if any",
          "name": "error"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The ID of the shard",
          "name": "id"
        }
      ],
      "inherits": "Client#event:shardDisconnect",
      "inherited": true,
      "overrides": "Client#event:shardDisconnect",
      "___id": "T000002R003335",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when all shards disconnect\n                * @event Client#disconnect\n                */",
      "meta": {
        "filename": "ShardManager.js",
        "lineno": 105,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/gateway",
        "code": {}
      },
      "name": "disconnect",
      "longname": "CommandClient#event:disconnect",
      "kind": "event",
      "description": "Fired when all shards disconnect",
      "memberof": "CommandClient",
      "scope": "instance",
      "inherits": "Client#event:disconnect",
      "inherited": true,
      "overrides": "Client#event:disconnect",
      "___id": "T000002R003336",
      "___s": true
    },
    {
      "comment": "/**\n                * Fired when the bot user is rung in a call\n                * @event Client#callRing\n                * @prop {Call} call The call\n                */",
      "meta": {
        "filename": "Call.js",
        "lineno": 38,
        "columnno": 16,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {}
      },
      "name": "callRing",
      "longname": "CommandClient#event:callRing",
      "kind": "event",
      "description": "Fired when the bot user is rung in a call",
      "memberof": "CommandClient",
      "scope": "instance",
      "properties": [
        {
          "type": {
            "names": [
              "Call"
            ]
          },
          "description": "The call",
          "name": "call"
        }
      ],
      "inherits": "Client#event:callRing",
      "inherited": true,
      "overrides": "Client#event:callRing",
      "___id": "T000002R003337",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
      "meta": {
        "range": [
          2153,
          3114
        ],
        "filename": "GuildChannel.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027786",
          "name": "GuildChannel#permissionsOf",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "permissionsOf",
      "longname": "CategoryChannel#permissionsOf",
      "kind": "function",
      "description": "Get the channel-specific permissions of a member",
      "returns": [
        {
          "type": {
            "names": [
              "Permission"
            ]
          }
        }
      ],
      "memberof": "CategoryChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "inherits": "GuildChannel#permissionsOf",
      "inherited": true,
      "___id": "T000002R003338",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          4125,
          4240
        ],
        "filename": "GuildChannel.js",
        "lineno": 99,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027932",
          "name": "GuildChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "edit",
      "longname": "CategoryChannel#edit",
      "kind": "function",
      "description": "Edit the channel's properties",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "CategoryChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#edit",
      "inherited": true,
      "___id": "T000002R003339",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4462,
          4579
        ],
        "filename": "GuildChannel.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027955",
          "name": "GuildChannel#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPosition",
      "longname": "CategoryChannel#editPosition",
      "kind": "function",
      "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CategoryChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "inherits": "GuildChannel#editPosition",
      "inherited": true,
      "___id": "T000002R003340",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4720,
          4821
        ],
        "filename": "GuildChannel.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027976",
          "name": "GuildChannel#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "delete",
      "longname": "CategoryChannel#delete",
      "kind": "function",
      "description": "Delete the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CategoryChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#delete",
      "inherited": true,
      "___id": "T000002R003341",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
      "meta": {
        "range": [
          5302,
          5483
        ],
        "filename": "GuildChannel.js",
        "lineno": 130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027997",
          "name": "GuildChannel#editPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPermission",
      "longname": "CategoryChannel#editPermission",
      "kind": "function",
      "description": "Create a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PermissionOverwrite>"
            ]
          }
        }
      ],
      "memberof": "CategoryChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#editPermission",
      "inherited": true,
      "___id": "T000002R003342",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5714,
          5861
        ],
        "filename": "GuildChannel.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028026",
          "name": "GuildChannel#deletePermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deletePermission",
      "longname": "CategoryChannel#deletePermission",
      "kind": "function",
      "description": "Delete a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "CategoryChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#deletePermission",
      "inherited": true,
      "___id": "T000002R003343",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
      "meta": {
        "range": [
          2153,
          3114
        ],
        "filename": "GuildChannel.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027786",
          "name": "GuildChannel#permissionsOf",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "permissionsOf",
      "longname": "TextChannel#permissionsOf",
      "kind": "function",
      "description": "Get the channel-specific permissions of a member",
      "returns": [
        {
          "type": {
            "names": [
              "Permission"
            ]
          }
        }
      ],
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "inherits": "GuildChannel#permissionsOf",
      "inherited": true,
      "overrides": "GuildChannel#permissionsOf",
      "___id": "T000002R003344",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          4125,
          4240
        ],
        "filename": "GuildChannel.js",
        "lineno": 99,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027932",
          "name": "GuildChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "edit",
      "longname": "TextChannel#edit",
      "kind": "function",
      "description": "Edit the channel's properties",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#edit",
      "inherited": true,
      "overrides": "GuildChannel#edit",
      "___id": "T000002R003345",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4462,
          4579
        ],
        "filename": "GuildChannel.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027955",
          "name": "GuildChannel#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPosition",
      "longname": "TextChannel#editPosition",
      "kind": "function",
      "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "inherits": "GuildChannel#editPosition",
      "inherited": true,
      "overrides": "GuildChannel#editPosition",
      "___id": "T000002R003346",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4720,
          4821
        ],
        "filename": "GuildChannel.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027976",
          "name": "GuildChannel#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "delete",
      "longname": "TextChannel#delete",
      "kind": "function",
      "description": "Delete the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#delete",
      "inherited": true,
      "overrides": "GuildChannel#delete",
      "___id": "T000002R003347",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
      "meta": {
        "range": [
          5302,
          5483
        ],
        "filename": "GuildChannel.js",
        "lineno": 130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027997",
          "name": "GuildChannel#editPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPermission",
      "longname": "TextChannel#editPermission",
      "kind": "function",
      "description": "Create a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PermissionOverwrite>"
            ]
          }
        }
      ],
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#editPermission",
      "inherited": true,
      "overrides": "GuildChannel#editPermission",
      "___id": "T000002R003348",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5714,
          5861
        ],
        "filename": "GuildChannel.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028026",
          "name": "GuildChannel#deletePermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deletePermission",
      "longname": "TextChannel#deletePermission",
      "kind": "function",
      "description": "Delete a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "TextChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#deletePermission",
      "inherited": true,
      "overrides": "GuildChannel#deletePermission",
      "___id": "T000002R003349",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all invites in the channel\n    * @returns {Promise<Invite[]>}\n    */",
      "meta": {
        "range": [
          2043,
          2160
        ],
        "filename": "TextChannel.js",
        "lineno": 49,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032859",
          "name": "TextChannel#getInvites",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getInvites",
      "longname": "NewsChannel#getInvites",
      "kind": "function",
      "description": "Get all invites in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Invite>>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "TextChannel#getInvites",
      "inherited": true,
      "overrides": "TextChannel#getInvites",
      "___id": "T000002R003350",
      "___s": true
    },
    {
      "comment": "/**\n    * Create an invite for the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
      "meta": {
        "range": [
          2692,
          2845
        ],
        "filename": "TextChannel.js",
        "lineno": 63,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032886",
          "name": "TextChannel#createInvite",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createInvite",
      "longname": "NewsChannel#createInvite",
      "kind": "function",
      "description": "Create an invite for the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Invite>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Invite generation options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How long the invite should last in seconds",
          "name": "options.maxAge"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "How many uses the invite should last for",
          "name": "options.maxUses"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is temporary or not",
          "name": "options.temporary"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether the invite is unique or not",
          "name": "options.unique"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "TextChannel#createInvite",
      "inherited": true,
      "overrides": "TextChannel#createInvite",
      "___id": "T000002R003351",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the webhooks in the channel\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
      "meta": {
        "range": [
          2985,
          3104
        ],
        "filename": "TextChannel.js",
        "lineno": 71,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032917",
          "name": "TextChannel#getWebhooks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getWebhooks",
      "longname": "NewsChannel#getWebhooks",
      "kind": "function",
      "description": "Get all the webhooks in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Object>>"
            ]
          },
          "description": "Resolves with an array of webhook objects"
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "TextChannel#getWebhooks",
      "inherited": true,
      "overrides": "TextChannel#getWebhooks",
      "___id": "T000002R003352",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
      "meta": {
        "range": [
          3519,
          3674
        ],
        "filename": "TextChannel.js",
        "lineno": 83,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032944",
          "name": "TextChannel#createWebhook",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createWebhook",
      "longname": "NewsChannel#createWebhook",
      "kind": "function",
      "description": "Create a channel webhook",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Object>"
            ]
          },
          "description": "Resolves with a webhook object"
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Webhook options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default name",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
          "name": "options.avatar"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "TextChannel#createWebhook",
      "inherited": true,
      "overrides": "TextChannel#createWebhook",
      "___id": "T000002R003353",
      "___s": true
    },
    {
      "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          3831,
          3971
        ],
        "filename": "TextChannel.js",
        "lineno": 92,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100032975",
          "name": "TextChannel#deleteMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "messageIDs"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteMessages",
      "longname": "NewsChannel#deleteMessages",
      "kind": "function",
      "description": "Bulk delete messages (bot accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Array.<String>"
            ]
          },
          "description": "Array of message IDs to delete",
          "name": "messageIDs"
        }
      ],
      "inherits": "TextChannel#deleteMessages",
      "inherited": true,
      "overrides": "TextChannel#deleteMessages",
      "___id": "T000002R003354",
      "___s": true
    },
    {
      "comment": "/**\n    * Purge previous messages in the channel with an optional filter (bot accounts only)\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
      "meta": {
        "range": [
          4483,
          4648
        ],
        "filename": "TextChannel.js",
        "lineno": 104,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033004",
          "name": "TextChannel#purge",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "filter",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "purge",
      "longname": "NewsChannel#purge",
      "kind": "function",
      "description": "Purge previous messages in the channel with an optional filter (bot accounts only)",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Number>"
            ]
          },
          "description": "Resolves with the number of messages deleted"
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The max number of messages to search through, -1 for no limit",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional filter function that returns a boolean when passed a Message object",
          "name": "filter"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        }
      ],
      "inherits": "TextChannel#purge",
      "inherited": true,
      "overrides": "TextChannel#purge",
      "___id": "T000002R003355",
      "___s": true
    },
    {
      "comment": "/**\n    * Send typing status in the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4734,
          4887
        ],
        "filename": "TextChannel.js",
        "lineno": 112,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033039",
          "name": "TextChannel#sendTyping",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "sendTyping",
      "longname": "NewsChannel#sendTyping",
      "kind": "function",
      "description": "Send typing status in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "TextChannel#sendTyping",
      "inherited": true,
      "overrides": "TextChannel#sendTyping",
      "___id": "T000002R003356",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a previous message in the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          5038,
          5204
        ],
        "filename": "TextChannel.js",
        "lineno": 121,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033074",
          "name": "TextChannel#getMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessage",
      "longname": "NewsChannel#getMessage",
      "kind": "function",
      "description": "Get a previous message in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "TextChannel#getMessage",
      "inherited": true,
      "overrides": "TextChannel#getMessage",
      "___id": "T000002R003357",
      "___s": true
    },
    {
      "comment": "/**\n    * Get previous messages in the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          5595,
          5801
        ],
        "filename": "TextChannel.js",
        "lineno": 133,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033111",
          "name": "TextChannel#getMessages",
          "type": "MethodDefinition",
          "paramnames": [
            "limit",
            "before",
            "after",
            "around"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessages",
      "longname": "NewsChannel#getMessages",
      "kind": "function",
      "description": "Get previous messages in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 50,
          "description": "The max number of messages to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages before this message ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages after this message ID",
          "name": "after"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get messages around this message ID (does not work with limit > 100)",
          "name": "around"
        }
      ],
      "inherits": "TextChannel#getMessages",
      "inherited": true,
      "overrides": "TextChannel#getMessages",
      "___id": "T000002R003358",
      "___s": true
    },
    {
      "comment": "/**\n    * Get all the pins in the channel\n    * @returns {Promise<Message[]>}\n    */",
      "meta": {
        "range": [
          5896,
          6036
        ],
        "filename": "TextChannel.js",
        "lineno": 141,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033154",
          "name": "TextChannel#getPins",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getPins",
      "longname": "NewsChannel#getPins",
      "kind": "function",
      "description": "Get all the pins in the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Message>>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "TextChannel#getPins",
      "inherited": true,
      "overrides": "TextChannel#getPins",
      "___id": "T000002R003359",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a message in the channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          6923,
          7103
        ],
        "filename": "TextChannel.js",
        "lineno": 158,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033189",
          "name": "TextChannel#createMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "content",
            "file"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "createMessage",
      "longname": "NewsChannel#createMessage",
      "kind": "function",
      "description": "Create a message in the channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String",
              "Object"
            ]
          },
          "description": "A string or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Set the message TTS flag",
          "name": "content.tts"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "A file object",
          "name": "file"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "A buffer containing file data",
          "name": "file.file"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "What to name the file",
          "name": "file.name"
        }
      ],
      "inherits": "TextChannel#createMessage",
      "inherited": true,
      "overrides": "TextChannel#createMessage",
      "___id": "T000002R003360",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @returns {Promise<Message>}\n    */",
      "meta": {
        "range": [
          7947,
          8133
        ],
        "filename": "TextChannel.js",
        "lineno": 172,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033228",
          "name": "TextChannel#editMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "content"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editMessage",
      "longname": "NewsChannel#editMessage",
      "kind": "function",
      "description": "Edit a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Message>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String",
              "Array",
              "Object"
            ]
          },
          "description": "A string, array of strings, or object. If an object is passed:",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "A content string",
          "name": "content.content"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "Whether to filter @everyone/@here or not (overrides default)",
          "name": "content.disableEveryone"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
          "name": "content.embed"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
          "name": "content.flags"
        }
      ],
      "inherits": "TextChannel#editMessage",
      "inherited": true,
      "overrides": "TextChannel#editMessage",
      "___id": "T000002R003361",
      "___s": true
    },
    {
      "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8251,
          8417
        ],
        "filename": "TextChannel.js",
        "lineno": 181,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033267",
          "name": "TextChannel#pinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "pinMessage",
      "longname": "NewsChannel#pinMessage",
      "kind": "function",
      "description": "Pin a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "TextChannel#pinMessage",
      "inherited": true,
      "overrides": "TextChannel#pinMessage",
      "___id": "T000002R003362",
      "___s": true
    },
    {
      "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          8537,
          8707
        ],
        "filename": "TextChannel.js",
        "lineno": 190,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033304",
          "name": "TextChannel#unpinMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "unpinMessage",
      "longname": "NewsChannel#unpinMessage",
      "kind": "function",
      "description": "Unpin a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "TextChannel#unpinMessage",
      "inherited": true,
      "overrides": "TextChannel#unpinMessage",
      "___id": "T000002R003363",
      "___s": true
    },
    {
      "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
      "meta": {
        "range": [
          9172,
          9418
        ],
        "filename": "TextChannel.js",
        "lineno": 203,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033341",
          "name": "TextChannel#getMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "limit",
            "before",
            "after"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getMessageReaction",
      "longname": "NewsChannel#getMessageReaction",
      "kind": "function",
      "description": "Get a list of users who reacted with a specific reaction",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<User>>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "The maximum number of users to get",
          "name": "limit"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users before this user ID",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Get users after this user ID",
          "name": "after"
        }
      ],
      "inherits": "TextChannel#getMessageReaction",
      "inherited": true,
      "overrides": "TextChannel#getMessageReaction",
      "___id": "T000002R003364",
      "___s": true
    },
    {
      "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          9729,
          9947
        ],
        "filename": "TextChannel.js",
        "lineno": 214,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033386",
          "name": "TextChannel#addMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addMessageReaction",
      "longname": "NewsChannel#addMessageReaction",
      "kind": "function",
      "description": "Add a reaction to a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to react as",
          "name": "userID"
        }
      ],
      "inherits": "TextChannel#addMessageReaction",
      "inherited": true,
      "overrides": "TextChannel#addMessageReaction",
      "___id": "T000002R003365",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          10278,
          10502
        ],
        "filename": "TextChannel.js",
        "lineno": 225,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033427",
          "name": "TextChannel#removeMessageReaction",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reaction",
            "userID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeMessageReaction",
      "longname": "NewsChannel#removeMessageReaction",
      "kind": "function",
      "description": "Remove a reaction from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
          "name": "reaction"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "defaultvalue": "\"@me\"",
          "description": "The ID of the user to remove the reaction for",
          "name": "userID"
        }
      ],
      "inherits": "TextChannel#removeMessageReaction",
      "inherited": true,
      "overrides": "TextChannel#removeMessageReaction",
      "___id": "T000002R003366",
      "___s": true
    },
    {
      "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          10642,
          10832
        ],
        "filename": "TextChannel.js",
        "lineno": 234,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033468",
          "name": "TextChannel#removeMessageReactions",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeMessageReactions",
      "longname": "NewsChannel#removeMessageReactions",
      "kind": "function",
      "description": "Remove all reactions from a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "TextChannel#removeMessageReactions",
      "inherited": true,
      "overrides": "TextChannel#removeMessageReactions",
      "___id": "T000002R003367",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          11023,
          11211
        ],
        "filename": "TextChannel.js",
        "lineno": 244,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033505",
          "name": "TextChannel#deleteMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deleteMessage",
      "longname": "NewsChannel#deleteMessage",
      "kind": "function",
      "description": "Delete a message",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "TextChannel#deleteMessage",
      "inherited": true,
      "overrides": "TextChannel#deleteMessage",
      "___id": "T000002R003368",
      "___s": true
    },
    {
      "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          11360,
          11532
        ],
        "filename": "TextChannel.js",
        "lineno": 253,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100033544",
          "name": "TextChannel#unsendMessage",
          "type": "MethodDefinition",
          "paramnames": [
            "messageID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "unsendMessage",
      "longname": "NewsChannel#unsendMessage",
      "kind": "function",
      "description": "Un-send a message. You're welcome Programmix",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the message",
          "name": "messageID"
        }
      ],
      "inherits": "TextChannel#unsendMessage",
      "inherited": true,
      "overrides": "TextChannel#unsendMessage",
      "___id": "T000002R003369",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
      "meta": {
        "range": [
          2153,
          3114
        ],
        "filename": "GuildChannel.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027786",
          "name": "GuildChannel#permissionsOf",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "permissionsOf",
      "longname": "NewsChannel#permissionsOf",
      "kind": "function",
      "description": "Get the channel-specific permissions of a member",
      "returns": [
        {
          "type": {
            "names": [
              "Permission"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "GuildChannel#permissionsOf",
      "inherited": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "overrides": "TextChannel#permissionsOf",
      "___id": "T000002R003370",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          4125,
          4240
        ],
        "filename": "GuildChannel.js",
        "lineno": 99,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027932",
          "name": "GuildChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "edit",
      "longname": "NewsChannel#edit",
      "kind": "function",
      "description": "Edit the channel's properties",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "GuildChannel#edit",
      "inherited": true,
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "overrides": "TextChannel#edit",
      "___id": "T000002R003371",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4462,
          4579
        ],
        "filename": "GuildChannel.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027955",
          "name": "GuildChannel#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPosition",
      "longname": "NewsChannel#editPosition",
      "kind": "function",
      "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "GuildChannel#editPosition",
      "inherited": true,
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "overrides": "TextChannel#editPosition",
      "___id": "T000002R003372",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4720,
          4821
        ],
        "filename": "GuildChannel.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027976",
          "name": "GuildChannel#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "delete",
      "longname": "NewsChannel#delete",
      "kind": "function",
      "description": "Delete the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "GuildChannel#delete",
      "inherited": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "overrides": "TextChannel#delete",
      "___id": "T000002R003373",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
      "meta": {
        "range": [
          5302,
          5483
        ],
        "filename": "GuildChannel.js",
        "lineno": 130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027997",
          "name": "GuildChannel#editPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPermission",
      "longname": "NewsChannel#editPermission",
      "kind": "function",
      "description": "Create a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PermissionOverwrite>"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "GuildChannel#editPermission",
      "inherited": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "overrides": "TextChannel#editPermission",
      "___id": "T000002R003374",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5714,
          5861
        ],
        "filename": "GuildChannel.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028026",
          "name": "GuildChannel#deletePermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deletePermission",
      "longname": "NewsChannel#deletePermission",
      "kind": "function",
      "description": "Delete a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "NewsChannel",
      "scope": "instance",
      "inherits": "GuildChannel#deletePermission",
      "inherited": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "overrides": "TextChannel#deletePermission",
      "___id": "T000002R003375",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
      "meta": {
        "range": [
          2153,
          3114
        ],
        "filename": "GuildChannel.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027786",
          "name": "GuildChannel#permissionsOf",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "permissionsOf",
      "longname": "StoreChannel#permissionsOf",
      "kind": "function",
      "description": "Get the channel-specific permissions of a member",
      "returns": [
        {
          "type": {
            "names": [
              "Permission"
            ]
          }
        }
      ],
      "memberof": "StoreChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "inherits": "GuildChannel#permissionsOf",
      "inherited": true,
      "___id": "T000002R003376",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          4125,
          4240
        ],
        "filename": "GuildChannel.js",
        "lineno": 99,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027932",
          "name": "GuildChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "edit",
      "longname": "StoreChannel#edit",
      "kind": "function",
      "description": "Edit the channel's properties",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "StoreChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#edit",
      "inherited": true,
      "___id": "T000002R003377",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4462,
          4579
        ],
        "filename": "GuildChannel.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027955",
          "name": "GuildChannel#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPosition",
      "longname": "StoreChannel#editPosition",
      "kind": "function",
      "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "StoreChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "inherits": "GuildChannel#editPosition",
      "inherited": true,
      "___id": "T000002R003378",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4720,
          4821
        ],
        "filename": "GuildChannel.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027976",
          "name": "GuildChannel#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "delete",
      "longname": "StoreChannel#delete",
      "kind": "function",
      "description": "Delete the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "StoreChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#delete",
      "inherited": true,
      "___id": "T000002R003379",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
      "meta": {
        "range": [
          5302,
          5483
        ],
        "filename": "GuildChannel.js",
        "lineno": 130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027997",
          "name": "GuildChannel#editPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPermission",
      "longname": "StoreChannel#editPermission",
      "kind": "function",
      "description": "Create a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PermissionOverwrite>"
            ]
          }
        }
      ],
      "memberof": "StoreChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#editPermission",
      "inherited": true,
      "___id": "T000002R003380",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5714,
          5861
        ],
        "filename": "GuildChannel.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028026",
          "name": "GuildChannel#deletePermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deletePermission",
      "longname": "StoreChannel#deletePermission",
      "kind": "function",
      "description": "Delete a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "StoreChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#deletePermission",
      "inherited": true,
      "___id": "T000002R003381",
      "___s": true
    },
    {
      "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
      "meta": {
        "range": [
          2153,
          3114
        ],
        "filename": "GuildChannel.js",
        "lineno": 60,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027786",
          "name": "GuildChannel#permissionsOf",
          "type": "MethodDefinition",
          "paramnames": [
            "memberID"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "permissionsOf",
      "longname": "VoiceChannel#permissionsOf",
      "kind": "function",
      "description": "Get the channel-specific permissions of a member",
      "returns": [
        {
          "type": {
            "names": [
              "Permission"
            ]
          }
        }
      ],
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the member",
          "name": "memberID"
        }
      ],
      "inherits": "GuildChannel#permissionsOf",
      "inherited": true,
      "overrides": "GuildChannel#permissionsOf",
      "___id": "T000002R003382",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
      "meta": {
        "range": [
          4125,
          4240
        ],
        "filename": "GuildChannel.js",
        "lineno": 99,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027932",
          "name": "GuildChannel#edit",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "edit",
      "longname": "VoiceChannel#edit",
      "kind": "function",
      "description": "Edit the channel's properties",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
            ]
          }
        }
      ],
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The properties to edit",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The name of the channel",
          "name": "options.name"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The topic of the channel (guild text channels only)",
          "name": "options.topic"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The bitrate of the channel (guild voice channels only)",
          "name": "options.bitrate"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The channel user limit (guild voice channels only)",
          "name": "options.userLimit"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
          "name": "options.rateLimitPerUser"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "description": "The nsfw status of the channel",
          "name": "options.nsfw"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "nullable": true,
          "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
          "name": "options.parentID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#edit",
      "inherited": true,
      "overrides": "GuildChannel#edit",
      "___id": "T000002R003383",
      "___s": true
    },
    {
      "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4462,
          4579
        ],
        "filename": "GuildChannel.js",
        "lineno": 108,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027955",
          "name": "GuildChannel#editPosition",
          "type": "MethodDefinition",
          "paramnames": [
            "position"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPosition",
      "longname": "VoiceChannel#editPosition",
      "kind": "function",
      "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The new position of the channel",
          "name": "position"
        }
      ],
      "inherits": "GuildChannel#editPosition",
      "inherited": true,
      "overrides": "GuildChannel#editPosition",
      "___id": "T000002R003384",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          4720,
          4821
        ],
        "filename": "GuildChannel.js",
        "lineno": 117,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027976",
          "name": "GuildChannel#delete",
          "type": "MethodDefinition",
          "paramnames": [
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "delete",
      "longname": "VoiceChannel#delete",
      "kind": "function",
      "description": "Delete the channel",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#delete",
      "inherited": true,
      "overrides": "GuildChannel#delete",
      "___id": "T000002R003385",
      "___s": true
    },
    {
      "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
      "meta": {
        "range": [
          5302,
          5483
        ],
        "filename": "GuildChannel.js",
        "lineno": 130,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100027997",
          "name": "GuildChannel#editPermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "allow",
            "deny",
            "type",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "editPermission",
      "longname": "VoiceChannel#editPermission",
      "kind": "function",
      "description": "Create a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<PermissionOverwrite>"
            ]
          }
        }
      ],
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for allowed permissions",
          "name": "allow"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The permissions number for denied permissions",
          "name": "deny"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The object type of the overwrite, either \"member\" or \"role\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#editPermission",
      "inherited": true,
      "overrides": "GuildChannel#editPermission",
      "___id": "T000002R003386",
      "___s": true
    },
    {
      "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
      "meta": {
        "range": [
          5714,
          5861
        ],
        "filename": "GuildChannel.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100028026",
          "name": "GuildChannel#deletePermission",
          "type": "MethodDefinition",
          "paramnames": [
            "overwriteID",
            "reason"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "deletePermission",
      "longname": "VoiceChannel#deletePermission",
      "kind": "function",
      "description": "Delete a channel permission overwrite",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "VoiceChannel",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The ID of the overwritten user or role",
          "name": "overwriteID"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The reason to be displayed in audit logs",
          "name": "reason"
        }
      ],
      "inherits": "GuildChannel#deletePermission",
      "inherited": true,
      "overrides": "GuildChannel#deletePermission",
      "___id": "T000002R003387",
      "___s": true
    },
    {
      "comment": "/**\n    * Check if this permission allows a specific permission\n    * @arg {String} permission The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)\n    * @returns {Boolean} Whether the permission allows the specified permission\n    */",
      "meta": {
        "range": [
          1815,
          1895
        ],
        "filename": "Permission.js",
        "lineno": 51,
        "columnno": 4,
        "path": "/home/runner/work/eris-docs/eris-docs/eris/lib/structures",
        "code": {
          "id": "astnode100031368",
          "name": "Permission#has",
          "type": "MethodDefinition",
          "paramnames": [
            "permission"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "has",
      "longname": "PermissionOverwrite#has",
      "kind": "function",
      "description": "Check if this permission allows a specific permission",
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "Whether the permission allows the specified permission"
        }
      ],
      "memberof": "PermissionOverwrite",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
          "name": "permission"
        }
      ],
      "inherits": "Permission#has",
      "inherited": true,
      "overrides": "Permission#has",
      "___id": "T000002R003388",
      "___s": true
    }
  ]
}